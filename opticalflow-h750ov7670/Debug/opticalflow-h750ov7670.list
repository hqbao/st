
opticalflow-h750ov7670.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800d738  0800d738  0001d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d85c  0800d85c  0001d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d864  0800d864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a4  24000000  0800d874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000459a8  240000a8  0800d918  000200a8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24045a50  0800d918  00025a50  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000285aa  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bf0  00000000  00000000  0004867c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ba8  00000000  00000000  0004c270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a78  00000000  00000000  0004de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038ed8  00000000  00000000  0004f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000252a7  00000000  00000000  00088768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171823  00000000  00000000  000ada0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021f232  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007bd8  00000000  00000000  0021f284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a8 	.word	0x240000a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d720 	.word	0x0800d720

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000ac 	.word	0x240000ac
 80002d4:	0800d720 	.word	0x0800d720

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <OV7670_Init>:
static uint8_t mtx_yuv[]={0x80, 0x80, 0x00, 0x22, 0x5E, 0x80};
static uint8_t mtx_rgb[]={0xB3, 0xB3, 0x00, 0x3D, 0xB0, 0xE4};


void OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c, LPTIM_HandleTypeDef *p_hlptim)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
	sp_hdcmi=p_hdcmi;
 80005ea:	4a09      	ldr	r2, [pc, #36]	; (8000610 <OV7670_Init+0x34>)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi=p_hdma_dcmi;
 80005f0:	4a08      	ldr	r2, [pc, #32]	; (8000614 <OV7670_Init+0x38>)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	6013      	str	r3, [r2, #0]
	sp_hi2c=p_hi2c;
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <OV7670_Init+0x3c>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
	sp_hlptim=p_hlptim;
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <OV7670_Init+0x40>)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	240000c4 	.word	0x240000c4
 8000614:	240000c8 	.word	0x240000c8
 8000618:	240000cc 	.word	0x240000cc
 800061c:	240000d0 	.word	0x240000d0

08000620 <OV7670_Power>:

void OV7670_Power(uint8_t en)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if(en)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <OV7670_Power+0x1e>
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <OV7670_Power+0x38>)
 8000638:	f006 fb16 	bl	8006c68 <HAL_GPIO_WritePin>
 800063c:	e005      	b.n	800064a <OV7670_Power+0x2a>
	else
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <OV7670_Power+0x38>)
 8000646:	f006 fb0f 	bl	8006c68 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f002 fa28 	bl	8002aa0 <HAL_Delay>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58020c00 	.word	0x58020c00

0800065c <OV7670_ResetHW>:

void OV7670_ResetHW(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <OV7670_ResetHW+0x2c>)
 8000668:	f006 fafe 	bl	8006c68 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f002 fa17 	bl	8002aa0 <HAL_Delay>
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <OV7670_ResetHW+0x2c>)
 800067a:	f006 faf5 	bl	8006c68 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800067e:	2032      	movs	r0, #50	; 0x32
 8000680:	f002 fa0e 	bl	8002aa0 <HAL_Delay>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	58020c00 	.word	0x58020c00

0800068c <OV7670_XCLK>:

void OV7670_XCLK(uint8_t en)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	if(en)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d007      	beq.n	80006ac <OV7670_XCLK+0x20>
		HAL_LPTIM_PWM_Start(sp_hlptim, 6,3);//6 3 8mhz
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <OV7670_XCLK+0x34>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2203      	movs	r2, #3
 80006a2:	2106      	movs	r1, #6
 80006a4:	4618      	mov	r0, r3
 80006a6:	f007 f94d 	bl	8007944 <HAL_LPTIM_PWM_Start>
	else
		HAL_LPTIM_PWM_Stop(sp_hlptim);
}
 80006aa:	e004      	b.n	80006b6 <OV7670_XCLK+0x2a>
		HAL_LPTIM_PWM_Stop(sp_hlptim);
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <OV7670_XCLK+0x34>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f007 f994 	bl	80079de <HAL_LPTIM_PWM_Stop>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	240000d0 	.word	0x240000d0

080006c4 <OV7670_WriteSCCB>:

void OV7670_WriteSCCB(uint8_t regAddr, uint8_t val)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af02      	add	r7, sp, #8
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2]={regAddr, val};
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	733b      	strb	r3, [r7, #12]
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, (uint8_t *)txbuf, 2, OV7670_TIMEOUT);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <OV7670_WriteSCCB+0x38>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f107 020c 	add.w	r2, r7, #12
 80006e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2302      	movs	r3, #2
 80006ec:	2142      	movs	r1, #66	; 0x42
 80006ee:	f006 fb7f 	bl	8006df0 <HAL_I2C_Master_Transmit>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	240000cc 	.word	0x240000cc

08000700 <OV7670_ReadSCCB>:

void OV7670_ReadSCCB(uint8_t regAddr, uint8_t *data)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, OV7670_TIMEOUT);
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <OV7670_ReadSCCB+0x3c>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	1dfa      	adds	r2, r7, #7
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	2142      	movs	r1, #66	; 0x42
 800071c:	f006 fb68 	bl	8006df0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, OV7670_TIMEOUT);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <OV7670_ReadSCCB+0x3c>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	2142      	movs	r1, #66	; 0x42
 8000730:	f006 fc52 	bl	8006fd8 <HAL_I2C_Master_Receive>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	240000cc 	.word	0x240000cc

08000740 <OV7670_Start>:

void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <OV7670_Start+0x74>)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <OV7670_Start+0x78>)
 8000756:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <OV7670_Start+0x74>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d112      	bne.n	8000786 <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <OV7670_Start+0x7c>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <OV7670_Start+0x78>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <OV7670_Start+0x80>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <OV7670_Start+0x84>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	fb01 f303 	mul.w	r3, r1, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	da00      	bge.n	800077c <OV7670_Start+0x3c>
 800077a:	3301      	adds	r3, #1
 800077c:	105b      	asrs	r3, r3, #1
 800077e:	2102      	movs	r1, #2
 8000780:	f002 fbc4 	bl	8002f0c <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 8000784:	e011      	b.n	80007aa <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <OV7670_Start+0x7c>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <OV7670_Start+0x78>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <OV7670_Start+0x80>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <OV7670_Start+0x84>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	fb01 f303 	mul.w	r3, r1, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	da00      	bge.n	80007a2 <OV7670_Start+0x62>
 80007a0:	3301      	adds	r3, #1
 80007a2:	105b      	asrs	r3, r3, #1
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 fbb1 	bl	8002f0c <HAL_DCMI_Start_DMA>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	240000d4 	.word	0x240000d4
 80007b8:	240000d8 	.word	0x240000d8
 80007bc:	240000c4 	.word	0x240000c4
 80007c0:	24000000 	.word	0x24000000
 80007c4:	24000002 	.word	0x24000002

080007c8 <OV7670_ResetSW>:
{
	HAL_DCMI_Stop(sp_hdcmi);
}

void OV7670_ResetSW(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	OV7670_WriteSCCB(REG_COM7, 0x80);
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	2012      	movs	r0, #18
 80007d0:	f7ff ff78 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(30);
 80007d4:	201e      	movs	r0, #30
 80007d6:	f002 f963 	bl	8002aa0 <HAL_Delay>
	OV7670_Config(defaults);
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <OV7670_ResetSW+0x24>)
 80007dc:	f000 f808 	bl	80007f0 <OV7670_Config>
	HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f002 f95d 	bl	8002aa0 <HAL_Delay>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	0800d7a8 	.word	0x0800d7a8

080007f0 <OV7670_Config>:

void OV7670_Config(const uint8_t params[][2])
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e012      	b.n	8000824 <OV7670_Config+0x34>
	{
		OV7670_WriteSCCB(params[i][0], params[i][1]);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	7818      	ldrb	r0, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	4619      	mov	r1, r3
 8000814:	f7ff ff56 	bl	80006c4 <OV7670_WriteSCCB>
		HAL_Delay(1);
 8000818:	2001      	movs	r0, #1
 800081a:	f002 f941 	bl	8002aa0 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3301      	adds	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2bff      	cmp	r3, #255	; 0xff
 8000830:	d1e5      	bne.n	80007fe <OV7670_Config+0xe>
	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <OV7670_SetBrightness>:

void OV7670_SetBrightness(uint8_t brightness)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	if(brightness>=127)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b7e      	cmp	r3, #126	; 0x7e
 800084a:	d903      	bls.n	8000854 <OV7670_SetBrightness+0x18>
		brightness=brightness-127;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3b7f      	subs	r3, #127	; 0x7f
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e002      	b.n	800085a <OV7670_SetBrightness+0x1e>
	else
		brightness=255-brightness;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	43db      	mvns	r3, r3
 8000858:	71fb      	strb	r3, [r7, #7]

	OV7670_WriteSCCB(REG_BRIGHT, brightness);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4619      	mov	r1, r3
 800085e:	2055      	movs	r0, #85	; 0x55
 8000860:	f7ff ff30 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <OV7670_SetContrast>:

void OV7670_SetContrast(uint8_t contrast)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_CONTRAS, contrast);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4619      	mov	r1, r3
 800087a:	2056      	movs	r0, #86	; 0x56
 800087c:	f7ff ff22 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <OV7670_SetSaturation>:

void OV7670_SetSaturation(uint8_t saturation)//0-100, default 80
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	float temp=0.0f;
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	saturation+=20;
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	3314      	adds	r3, #20
 800089c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 800089e:	2300      	movs	r3, #0
 80008a0:	72fb      	strb	r3, [r7, #11]
 80008a2:	e03b      	b.n	800091c <OV7670_SetSaturation+0x94>
	{
		if(img_format==YUV422)temp=(float)mtx_yuv[i];
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <OV7670_SetSaturation+0xac>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <OV7670_SetSaturation+0x38>
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	4a22      	ldr	r2, [pc, #136]	; (8000938 <OV7670_SetSaturation+0xb0>)
 80008b0:	5cd3      	ldrb	r3, [r2, r3]
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80008be:	e008      	b.n	80008d2 <OV7670_SetSaturation+0x4a>
		else temp=(float)mtx_rgb[i];
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <OV7670_SetSaturation+0xb4>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ce:	edc7 7a03 	vstr	s15, [r7, #12]
		temp*=saturation;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	ee07 3a90 	vmov	s15, r3
 80008d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80008e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e4:	edc7 7a03 	vstr	s15, [r7, #12]
		temp/=100;
 80008e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80008ec:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000940 <OV7670_SetSaturation+0xb8>
 80008f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f4:	edc7 7a03 	vstr	s15, [r7, #12]
		OV7670_WriteSCCB(REG_MTX1+i, (uint8_t)temp);
 80008f8:	7afb      	ldrb	r3, [r7, #11]
 80008fa:	334f      	adds	r3, #79	; 0x4f
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000906:	edc7 7a00 	vstr	s15, [r7]
 800090a:	783a      	ldrb	r2, [r7, #0]
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fed7 	bl	80006c4 <OV7670_WriteSCCB>
	for(i=0;i<6;i++)
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	3301      	adds	r3, #1
 800091a:	72fb      	strb	r3, [r7, #11]
 800091c:	7afb      	ldrb	r3, [r7, #11]
 800091e:	2b05      	cmp	r3, #5
 8000920:	d9c0      	bls.n	80008a4 <OV7670_SetSaturation+0x1c>
	}
	OV7670_WriteSCCB(REG_MTX_SIGN, 0x9E);
 8000922:	219e      	movs	r1, #158	; 0x9e
 8000924:	2058      	movs	r0, #88	; 0x58
 8000926:	f7ff fecd 	bl	80006c4 <OV7670_WriteSCCB>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	240000dc 	.word	0x240000dc
 8000938:	24000004 	.word	0x24000004
 800093c:	2400000c 	.word	0x2400000c
 8000940:	42c80000 	.word	0x42c80000

08000944 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b06      	cmp	r3, #6
 8000952:	f200 808f 	bhi.w	8000a74 <OV7670_SetResolution+0x130>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <OV7670_SetResolution+0x18>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000979 	.word	0x08000979
 8000960:	0800099f 	.word	0x0800099f
 8000964:	080009c3 	.word	0x080009c3
 8000968:	080009e5 	.word	0x080009e5
 800096c:	08000a07 	.word	0x08000a07
 8000970:	08000a2d 	.word	0x08000a2d
 8000974:	08000a51 	.word	0x08000a51
	{
		case VGA:	//NOT TESTED
			OV7670_Config(RES_VGA);
 8000978:	4840      	ldr	r0, [pc, #256]	; (8000a7c <OV7670_SetResolution+0x138>)
 800097a:	f7ff ff39 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(158,14,10,490);
 800097e:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 8000982:	220a      	movs	r2, #10
 8000984:	210e      	movs	r1, #14
 8000986:	209e      	movs	r0, #158	; 0x9e
 8000988:	f000 fd2a 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=640;
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <OV7670_SetResolution+0x13c>)
 800098e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000992:	801a      	strh	r2, [r3, #0]
			img_height=480;
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000996:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800099a:	801a      	strh	r2, [r3, #0]
			break;
 800099c:	e06a      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 800099e:	483a      	ldr	r0, [pc, #232]	; (8000a88 <OV7670_SetResolution+0x144>)
 80009a0:	f7ff ff26 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 80009a4:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009a8:	220c      	movs	r2, #12
 80009aa:	2118      	movs	r1, #24
 80009ac:	20a8      	movs	r0, #168	; 0xa8
 80009ae:	f000 fd17 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=320;
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009b8:	801a      	strh	r2, [r3, #0]
			img_height=240;
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <OV7670_SetResolution+0x140>)
 80009bc:	22f0      	movs	r2, #240	; 0xf0
 80009be:	801a      	strh	r2, [r3, #0]
			break;
 80009c0:	e058      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 80009c2:	4832      	ldr	r0, [pc, #200]	; (8000a8c <OV7670_SetResolution+0x148>)
 80009c4:	f7ff ff14 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 80009c8:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009cc:	220c      	movs	r2, #12
 80009ce:	211e      	movs	r1, #30
 80009d0:	20ae      	movs	r0, #174	; 0xae
 80009d2:	f000 fd05 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=160;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009d8:	22a0      	movs	r2, #160	; 0xa0
 80009da:	801a      	strh	r2, [r3, #0]
			img_height=120;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <OV7670_SetResolution+0x140>)
 80009de:	2278      	movs	r2, #120	; 0x78
 80009e0:	801a      	strh	r2, [r3, #0]
			break;
 80009e2:	e047      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 80009e4:	482a      	ldr	r0, [pc, #168]	; (8000a90 <OV7670_SetResolution+0x14c>)
 80009e6:	f7ff ff03 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 80009ea:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80009ee:	220c      	movs	r2, #12
 80009f0:	2134      	movs	r1, #52	; 0x34
 80009f2:	20c4      	movs	r0, #196	; 0xc4
 80009f4:	f000 fcf4 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=80;
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <OV7670_SetResolution+0x13c>)
 80009fa:	2250      	movs	r2, #80	; 0x50
 80009fc:	801a      	strh	r2, [r3, #0]
			img_height=60;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a00:	223c      	movs	r2, #60	; 0x3c
 8000a02:	801a      	strh	r2, [r3, #0]
			break;
 8000a04:	e036      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <OV7670_SetResolution+0x150>)
 8000a08:	f7ff fef2 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 8000a0c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8000a10:	220c      	movs	r2, #12
 8000a12:	215e      	movs	r1, #94	; 0x5e
 8000a14:	20ae      	movs	r0, #174	; 0xae
 8000a16:	f000 fce3 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=352;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a1c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8000a20:	801a      	strh	r2, [r3, #0]
			img_height=288;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a24:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000a28:	801a      	strh	r2, [r3, #0]
			break;
 8000a2a:	e023      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 8000a2c:	481a      	ldr	r0, [pc, #104]	; (8000a98 <OV7670_SetResolution+0x154>)
 8000a2e:	f7ff fedf 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 8000a32:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000a36:	220c      	movs	r2, #12
 8000a38:	2116      	movs	r1, #22
 8000a3a:	f44f 70e3 	mov.w	r0, #454	; 0x1c6
 8000a3e:	f000 fccf 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=176;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a44:	22b0      	movs	r2, #176	; 0xb0
 8000a46:	801a      	strh	r2, [r3, #0]
			img_height=144;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a4a:	2290      	movs	r2, #144	; 0x90
 8000a4c:	801a      	strh	r2, [r3, #0]
			break;
 8000a4e:	e011      	b.n	8000a74 <OV7670_SetResolution+0x130>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <OV7670_SetResolution+0x158>)
 8000a52:	f7ff fecd 	bl	80007f0 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 8000a56:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	212a      	movs	r1, #42	; 0x2a
 8000a5e:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8000a62:	f000 fcbd 	bl	80013e0 <OV7670_SetFrameControl>
			img_width=88;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <OV7670_SetResolution+0x13c>)
 8000a68:	2258      	movs	r2, #88	; 0x58
 8000a6a:	801a      	strh	r2, [r3, #0]
			img_height=72;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <OV7670_SetResolution+0x140>)
 8000a6e:	2248      	movs	r2, #72	; 0x48
 8000a70:	801a      	strh	r2, [r3, #0]
			break;
 8000a72:	bf00      	nop
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800d738 	.word	0x0800d738
 8000a80:	24000000 	.word	0x24000000
 8000a84:	24000002 	.word	0x24000002
 8000a88:	0800d748 	.word	0x0800d748
 8000a8c:	0800d758 	.word	0x0800d758
 8000a90:	0800d768 	.word	0x0800d768
 8000a94:	0800d778 	.word	0x0800d778
 8000a98:	0800d788 	.word	0x0800d788
 8000a9c:	0800d798 	.word	0x0800d798

08000aa0 <OV7670_SetColorFormat>:

void OV7670_SetColorFormat(Camera_format format)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_ReadSCCB(REG_COM7, &temp[0]);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2012      	movs	r0, #18
 8000ab2:	f7ff fe25 	bl	8000700 <OV7670_ReadSCCB>
	temp[0]&=0b11111010;
 8000ab6:	7b3b      	ldrb	r3, [r7, #12]
 8000ab8:	f023 0305 	bic.w	r3, r3, #5
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	733b      	strb	r3, [r7, #12]
	OV7670_ReadSCCB(REG_COM15, &temp[1]);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2040      	movs	r0, #64	; 0x40
 8000aca:	f7ff fe19 	bl	8000700 <OV7670_ReadSCCB>
	temp[1]&=0b00001111;
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f001 ffe1 	bl	8002aa0 <HAL_Delay>
	switch(format)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <OV7670_SetColorFormat+0x4a>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d00e      	beq.n	8000b06 <OV7670_SetColorFormat+0x66>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
			//???
			img_format=RGB565;
			break;
	}
}
 8000ae8:	e021      	b.n	8000b2e <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x00);
 8000aea:	7b3b      	ldrb	r3, [r7, #12]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2012      	movs	r0, #18
 8000af0:	f7ff fde8 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x00);
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	4619      	mov	r1, r3
 8000af8:	2040      	movs	r0, #64	; 0x40
 8000afa:	f7ff fde3 	bl	80006c4 <OV7670_WriteSCCB>
			img_format=YUV422;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <OV7670_SetColorFormat+0x98>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
			break;
 8000b04:	e013      	b.n	8000b2e <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x04);//RGB
 8000b06:	7b3b      	ldrb	r3, [r7, #12]
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2012      	movs	r0, #18
 8000b12:	f7ff fdd7 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
 8000b16:	7b7b      	ldrb	r3, [r7, #13]
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2040      	movs	r0, #64	; 0x40
 8000b22:	f7ff fdcf 	bl	80006c4 <OV7670_WriteSCCB>
			img_format=RGB565;
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <OV7670_SetColorFormat+0x98>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
			break;
 8000b2c:	bf00      	nop
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240000dc 	.word	0x240000dc

08000b3c <OV7670_AutoExposureMode>:

void OV7670_AutoExposureMode(Camera_state en)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000b4a:	f107 030f 	add.w	r3, r7, #15
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2013      	movs	r0, #19
 8000b52:	f7ff fdd5 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d008      	beq.n	8000b6e <OV7670_AutoExposureMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x01);	//enable AEC
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4619      	mov	r1, r3
 8000b66:	2013      	movs	r0, #19
 8000b68:	f7ff fdac 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
}
 8000b6c:	e007      	b.n	8000b7e <OV7670_AutoExposureMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	2013      	movs	r0, #19
 8000b7a:	f7ff fda3 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <OV7670_SetAECAlgorithm>:

void OV7670_SetAECAlgorithm(Camera_algorithm algorithm)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_HAECC7, &temp);
 8000b94:	f107 030f 	add.w	r3, r7, #15
 8000b98:	4619      	mov	r1, r3
 8000b9a:	20aa      	movs	r0, #170	; 0xaa
 8000b9c:	f7ff fdb0 	bl	8000700 <OV7670_ReadSCCB>

	if(algorithm)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d008      	beq.n	8000bb8 <OV7670_SetAECAlgorithm+0x32>

		OV7670_WriteSCCB(REG_HAECC7, temp | 0x80);// Histogram-based
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	20aa      	movs	r0, #170	; 0xaa
 8000bb2:	f7ff fd87 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
}
 8000bb6:	e007      	b.n	8000bc8 <OV7670_SetAECAlgorithm+0x42>
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	20aa      	movs	r0, #170	; 0xaa
 8000bc4:	f7ff fd7e 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <OV7670_SetExposureTime>:

void OV7670_SetExposureTime(uint16_t time) //AEC must be off
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	OV7670_WriteSCCB(REG_AECHH, (time>>10) & 0x3F);
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	0a9b      	lsrs	r3, r3, #10
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2007      	movs	r0, #7
 8000bec:	f7ff fd6a 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_AECH, (time>>2) & 0xFF);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f7ff fd62 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_COM1, (time) & 0x03);
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f7ff fd59 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <OV7670_SetGainCeiling>:

void OV7670_SetGainCeiling(Camera_gain value)//value 0-6 [2x-128x]
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM9, &temp);
 8000c28:	f107 030f 	add.w	r3, r7, #15
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2014      	movs	r0, #20
 8000c30:	f7ff fd66 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0x8F;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_COM9, temp | (value<<4));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	b25a      	sxtb	r2, r3
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b25b      	sxtb	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2014      	movs	r0, #20
 8000c52:	f7ff fd37 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <OV7670_AutoGainMode>:

void OV7670_AutoGainMode(Camera_state en)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000c6c:	f107 030f 	add.w	r3, r7, #15
 8000c70:	4619      	mov	r1, r3
 8000c72:	2013      	movs	r0, #19
 8000c74:	f7ff fd44 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <OV7670_AutoGainMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x04); //enable AGC
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	2013      	movs	r0, #19
 8000c8a:	f7ff fd1b 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
}
 8000c8e:	e007      	b.n	8000ca0 <OV7670_AutoGainMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	f023 0304 	bic.w	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2013      	movs	r0, #19
 8000c9c:	f7ff fd12 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <OV7670_SetGain>:

void OV7670_SetGain(uint8_t gain)//value 0-7 [1x-128x], AGC must be off
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_VREF, &temp);
 8000cb6:	f107 030f 	add.w	r3, r7, #15
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f7ff fd1f 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0x3F;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]

	//According to OV7670/7171 implementation guide v1.0 - Table 4-1
	switch(gain)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b07      	cmp	r3, #7
 8000cd0:	d86b      	bhi.n	8000daa <OV7670_SetGain+0x102>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <OV7670_SetGain+0x30>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000cf9 	.word	0x08000cf9
 8000cdc:	08000d0d 	.word	0x08000d0d
 8000ce0:	08000d21 	.word	0x08000d21
 8000ce4:	08000d35 	.word	0x08000d35
 8000ce8:	08000d49 	.word	0x08000d49
 8000cec:	08000d5d 	.word	0x08000d5d
 8000cf0:	08000d77 	.word	0x08000d77
 8000cf4:	08000d91 	.word	0x08000d91
	{
		case 0: //1x
			OV7670_WriteSCCB(REG_GAIN, 0x00);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fce2 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4619      	mov	r1, r3
 8000d04:	2003      	movs	r0, #3
 8000d06:	f7ff fcdd 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d0a:	e04e      	b.n	8000daa <OV7670_SetGain+0x102>
		case 1: //2x
			OV7670_WriteSCCB(REG_GAIN, 0x10);
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fcd8 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f7ff fcd3 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d1e:	e044      	b.n	8000daa <OV7670_SetGain+0x102>
		case 2: //4x
			OV7670_WriteSCCB(REG_GAIN, 0x30);
 8000d20:	2130      	movs	r1, #48	; 0x30
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fcce 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fcc9 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d32:	e03a      	b.n	8000daa <OV7670_SetGain+0x102>
		case 3: //8x
			OV7670_WriteSCCB(REG_GAIN, 0x70);
 8000d34:	2170      	movs	r1, #112	; 0x70
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fcc4 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2003      	movs	r0, #3
 8000d42:	f7ff fcbf 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d46:	e030      	b.n	8000daa <OV7670_SetGain+0x102>
		case 4: //16x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d48:	21f0      	movs	r1, #240	; 0xf0
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fcba 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2003      	movs	r0, #3
 8000d56:	f7ff fcb5 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d5a:	e026      	b.n	8000daa <OV7670_SetGain+0x102>
		case 5: //32x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d5c:	21f0      	movs	r1, #240	; 0xf0
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fcb0 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x40);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff fca8 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d74:	e019      	b.n	8000daa <OV7670_SetGain+0x102>
		case 6: //64x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8000d76:	21f0      	movs	r1, #240	; 0xf0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fca3 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f7ff fc9b 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000d8e:	e00c      	b.n	8000daa <OV7670_SetGain+0x102>
		case 7: //~128x
			OV7670_WriteSCCB(REG_GAIN, 0xFF);
 8000d90:	21ff      	movs	r1, #255	; 0xff
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fc96 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
 8000da2:	2003      	movs	r0, #3
 8000da4:	f7ff fc8e 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8000da8:	bf00      	nop
	}
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop

08000db4 <OV7670_AutoWhiteBalanceMode>:

void OV7670_AutoWhiteBalanceMode(Camera_state en)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2013      	movs	r0, #19
 8000dca:	f7ff fc99 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <OV7670_AutoWhiteBalanceMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x02); //enable AWB
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2013      	movs	r0, #19
 8000de0:	f7ff fc70 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
}
 8000de4:	e007      	b.n	8000df6 <OV7670_AutoWhiteBalanceMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	f023 0302 	bic.w	r3, r3, #2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	2013      	movs	r0, #19
 8000df2:	f7ff fc67 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <OV7670_SetChannelsGain>:

void OV7670_SetChannelsGain(uint8_t r_ch, uint8_t g_ch, uint8_t b_ch) //AWB must be off
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	71bb      	strb	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
	OV7670_WriteSCCB(REG_RED, r_ch);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4619      	mov	r1, r3
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fc55 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_GGAIN, g_ch);
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	206a      	movs	r0, #106	; 0x6a
 8000e20:	f7ff fc50 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_BLUE, b_ch);
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	4619      	mov	r1, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fc4b 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <OV7670_ShowColorBar>:

void OV7670_ShowColorBar(Camera_state en)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b084      	sub	sp, #16
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM17, &temp);
 8000e44:	f107 030f 	add.w	r3, r7, #15
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2042      	movs	r0, #66	; 0x42
 8000e4c:	f7ff fc58 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d008      	beq.n	8000e68 <OV7670_ShowColorBar+0x32>
		OV7670_WriteSCCB(REG_COM17, temp | 0x08);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2042      	movs	r0, #66	; 0x42
 8000e62:	f7ff fc2f 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
}
 8000e66:	e007      	b.n	8000e78 <OV7670_ShowColorBar+0x42>
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	f023 0308 	bic.w	r3, r3, #8
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	2042      	movs	r0, #66	; 0x42
 8000e74:	f7ff fc26 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <OV7670_FlipHorizontal>:

void OV7670_FlipHorizontal(Camera_state flipH)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000e8e:	f107 030f 	add.w	r3, r7, #15
 8000e92:	4619      	mov	r1, r3
 8000e94:	201e      	movs	r0, #30
 8000e96:	f7ff fc33 	bl	8000700 <OV7670_ReadSCCB>

	if(flipH)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <OV7670_FlipHorizontal+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x20);
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	201e      	movs	r0, #30
 8000eac:	f7ff fc0a 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
}
 8000eb0:	e007      	b.n	8000ec2 <OV7670_FlipHorizontal+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f023 0320 	bic.w	r3, r3, #32
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	201e      	movs	r0, #30
 8000ebe:	f7ff fc01 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <OV7670_FlipVertical>:

void OV7670_FlipVertical(Camera_state flipV)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	4619      	mov	r1, r3
 8000ede:	201e      	movs	r0, #30
 8000ee0:	f7ff fc0e 	bl	8000700 <OV7670_ReadSCCB>

	if(flipV)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <OV7670_FlipVertical+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x10);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	201e      	movs	r0, #30
 8000ef6:	f7ff fbe5 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
}
 8000efa:	e007      	b.n	8000f0c <OV7670_FlipVertical+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f023 0310 	bic.w	r3, r3, #16
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	201e      	movs	r0, #30
 8000f08:	f7ff fbdc 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <OV7670_NightMode>:

void OV7670_NightMode(Camera_state en,	Camera_fps min_fps)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM11, &temp);
 8000f28:	f107 030f 	add.w	r3, r7, #15
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	203b      	movs	r0, #59	; 0x3b
 8000f30:	f7ff fbe6 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d011      	beq.n	8000f5e <OV7670_NightMode+0x4a>
	{
		temp|=(min_fps<<5);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	015b      	lsls	r3, r3, #5
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	73fb      	strb	r3, [r7, #15]
		OV7670_WriteSCCB(REG_COM11, temp | 0x80);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	203b      	movs	r0, #59	; 0x3b
 8000f58:	f7ff fbb4 	bl	80006c4 <OV7670_WriteSCCB>
	}
	else
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
}
 8000f5c:	e007      	b.n	8000f6e <OV7670_NightMode+0x5a>
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	203b      	movs	r0, #59	; 0x3b
 8000f6a:	f7ff fbab 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <OV7670_AutoSharpness>:

void OV7670_AutoSharpness(Camera_state en)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8000f84:	f107 030f 	add.w	r3, r7, #15
 8000f88:	4619      	mov	r1, r3
 8000f8a:	2041      	movs	r0, #65	; 0x41
 8000f8c:	f7ff fbb8 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <OV7670_AutoSharpness+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x20);// enable Auto Sharpness
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2041      	movs	r0, #65	; 0x41
 8000fa2:	f7ff fb8f 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
}
 8000fa6:	e007      	b.n	8000fb8 <OV7670_AutoSharpness+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f023 0320 	bic.w	r3, r3, #32
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2041      	movs	r0, #65	; 0x41
 8000fb4:	f7ff fb86 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <OV7670_SetSharpness>:

void OV7670_SetSharpness(uint8_t sharpness)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_EDGE, &temp);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	203f      	movs	r0, #63	; 0x3f
 8000fd6:	f7ff fb93 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0xE0;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	f023 031f 	bic.w	r3, r3, #31
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_EDGE, temp | sharpness);
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	203f      	movs	r0, #63	; 0x3f
 8000ff0:	f7ff fb68 	bl	80006c4 <OV7670_WriteSCCB>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <OV7670_AutoDeNoise>:

void OV7670_AutoDeNoise(Camera_state en)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 800100a:	f107 030f 	add.w	r3, r7, #15
 800100e:	4619      	mov	r1, r3
 8001010:	2041      	movs	r0, #65	; 0x41
 8001012:	f7ff fb75 	bl	8000700 <OV7670_ReadSCCB>

	if(en)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <OV7670_AutoDeNoise+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x10);// enable Auto Sharpness
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	2041      	movs	r0, #65	; 0x41
 8001028:	f7ff fb4c 	bl	80006c4 <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
}
 800102c:	e007      	b.n	800103e <OV7670_AutoDeNoise+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f023 0310 	bic.w	r3, r3, #16
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	2041      	movs	r0, #65	; 0x41
 800103a:	f7ff fb43 	bl	80006c4 <OV7670_WriteSCCB>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <OV7670_SetDeNoiseStrength>:

void OV7670_SetDeNoiseStrength(uint8_t strength)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_DNSTH, strength);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4619      	mov	r1, r3
 8001054:	204c      	movs	r0, #76	; 0x4c
 8001056:	f7ff fb35 	bl	80006c4 <OV7670_WriteSCCB>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <OV7670_BandingFilter>:

void OV7670_BandingFilter(Camera_state en, Camera_filter filter)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	460a      	mov	r2, r1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4613      	mov	r3, r2
 8001070:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001076:	f107 030f 	add.w	r3, r7, #15
 800107a:	4619      	mov	r1, r3
 800107c:	2013      	movs	r0, #19
 800107e:	f7ff fb3f 	bl	8000700 <OV7670_ReadSCCB>
	if(en)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d03f      	beq.n	8001108 <OV7670_BandingFilter+0xa6>
	{
		OV7670_WriteSCCB(REG_BD50ST, BF_50Hz_VALUE); //50Hz banding filter
 8001088:	21cc      	movs	r1, #204	; 0xcc
 800108a:	209d      	movs	r0, #157	; 0x9d
 800108c:	f7ff fb1a 	bl	80006c4 <OV7670_WriteSCCB>
		OV7670_WriteSCCB(REG_BD60ST, BF_60Hz_VALUE); //60Hz banding filter
 8001090:	21aa      	movs	r1, #170	; 0xaa
 8001092:	209e      	movs	r0, #158	; 0x9e
 8001094:	f7ff fb16 	bl	80006c4 <OV7670_WriteSCCB>

		OV7670_WriteSCCB(REG_COM8, temp | 0x20); //banding filter enable
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	2013      	movs	r0, #19
 80010a4:	f7ff fb0e 	bl	80006c4 <OV7670_WriteSCCB>

		OV7670_ReadSCCB(REG_COM11, &temp);
 80010a8:	f107 030f 	add.w	r3, r7, #15
 80010ac:	4619      	mov	r1, r3
 80010ae:	203b      	movs	r0, #59	; 0x3b
 80010b0:	f7ff fb26 	bl	8000700 <OV7670_ReadSCCB>
		temp&=0xE7;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	f023 0318 	bic.w	r3, r3, #24
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	73fb      	strb	r3, [r7, #15]
		switch(filter)
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d018      	beq.n	80010f6 <OV7670_BandingFilter+0x94>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	dc28      	bgt.n	800111a <OV7670_BandingFilter+0xb8>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <OV7670_BandingFilter+0x70>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d009      	beq.n	80010e4 <OV7670_BandingFilter+0x82>
				break;
		}
	}
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
}
 80010d0:	e023      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x0A);
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	f043 030a 	orr.w	r3, r3, #10
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	203b      	movs	r0, #59	; 0x3b
 80010de:	f7ff faf1 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 80010e2:	e01a      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x02);
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	203b      	movs	r0, #59	; 0x3b
 80010f0:	f7ff fae8 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 80010f4:	e011      	b.n	800111a <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x12);
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f043 0312 	orr.w	r3, r3, #18
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	203b      	movs	r0, #59	; 0x3b
 8001102:	f7ff fadf 	bl	80006c4 <OV7670_WriteSCCB>
				break;
 8001106:	e008      	b.n	800111a <OV7670_BandingFilter+0xb8>
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4619      	mov	r1, r3
 8001112:	2013      	movs	r0, #19
 8001114:	f7ff fad6 	bl	80006c4 <OV7670_WriteSCCB>
}
 8001118:	e7ff      	b.n	800111a <OV7670_BandingFilter+0xb8>
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <OV7670_SpecialEffect>:

void OV7670_SpecialEffect(Camera_effect effect)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_TSLB, &temp);
 8001132:	f107 030f 	add.w	r3, r7, #15
 8001136:	4619      	mov	r1, r3
 8001138:	203a      	movs	r0, #58	; 0x3a
 800113a:	f7ff fae1 	bl	8000700 <OV7670_ReadSCCB>
	temp&=0xCB;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f023 0334 	bic.w	r3, r3, #52	; 0x34
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73fb      	strb	r3, [r7, #15]

	switch(effect)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b07      	cmp	r3, #7
 800114c:	f200 808c 	bhi.w	8001268 <OV7670_SpecialEffect+0x144>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <OV7670_SpecialEffect+0x34>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001179 	.word	0x08001179
 800115c:	0800118b 	.word	0x0800118b
 8001160:	080011ad 	.word	0x080011ad
 8001164:	080011cf 	.word	0x080011cf
 8001168:	080011e1 	.word	0x080011e1
 800116c:	08001203 	.word	0x08001203
 8001170:	08001225 	.word	0x08001225
 8001174:	08001247 	.word	0x08001247
	{
		case NORMAL:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x04);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	203a      	movs	r0, #58	; 0x3a
 8001184:	f7ff fa9e 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001188:	e06e      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case ANTIQUE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0314 	orr.w	r3, r3, #20
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4619      	mov	r1, r3
 8001194:	203a      	movs	r0, #58	; 0x3a
 8001196:	f7ff fa95 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xA0);
 800119a:	21a0      	movs	r1, #160	; 0xa0
 800119c:	2067      	movs	r0, #103	; 0x67
 800119e:	f7ff fa91 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	2068      	movs	r0, #104	; 0x68
 80011a6:	f7ff fa8d 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011aa:	e05d      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BW:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f043 0314 	orr.w	r3, r3, #20
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	203a      	movs	r0, #58	; 0x3a
 80011b8:	f7ff fa84 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	2067      	movs	r0, #103	; 0x67
 80011c0:	f7ff fa80 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	2068      	movs	r0, #104	; 0x68
 80011c8:	f7ff fa7c 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011cc:	e04c      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x24);
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4619      	mov	r1, r3
 80011d8:	203a      	movs	r0, #58	; 0x3a
 80011da:	f7ff fa73 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 80011de:	e043      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BW_NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x34);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	203a      	movs	r0, #58	; 0x3a
 80011ec:	f7ff fa6a 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	2067      	movs	r0, #103	; 0x67
 80011f4:	f7ff fa66 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	2068      	movs	r0, #104	; 0x68
 80011fc:	f7ff fa62 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001200:	e032      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case BLUISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0314 	orr.w	r3, r3, #20
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	203a      	movs	r0, #58	; 0x3a
 800120e:	f7ff fa59 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	2067      	movs	r0, #103	; 0x67
 8001216:	f7ff fa55 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0xC0);
 800121a:	21c0      	movs	r1, #192	; 0xc0
 800121c:	2068      	movs	r0, #104	; 0x68
 800121e:	f7ff fa51 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001222:	e021      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case GREENISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f043 0314 	orr.w	r3, r3, #20
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	203a      	movs	r0, #58	; 0x3a
 8001230:	f7ff fa48 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x40);
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	2067      	movs	r0, #103	; 0x67
 8001238:	f7ff fa44 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	2068      	movs	r0, #104	; 0x68
 8001240:	f7ff fa40 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001244:	e010      	b.n	8001268 <OV7670_SpecialEffect+0x144>
		case REDDISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f043 0314 	orr.w	r3, r3, #20
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	203a      	movs	r0, #58	; 0x3a
 8001252:	f7ff fa37 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xC0);
 8001256:	21c0      	movs	r1, #192	; 0xc0
 8001258:	2067      	movs	r0, #103	; 0x67
 800125a:	f7ff fa33 	bl	80006c4 <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	2068      	movs	r0, #104	; 0x68
 8001262:	f7ff fa2f 	bl	80006c4 <OV7670_WriteSCCB>
			break;
 8001266:	bf00      	nop
	}
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <OV7670_SetFrameRate>:

void OV7670_SetFrameRate(uint8_t div, uint8_t mul)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
	OV7670_WriteSCCB(REG_CLKRC, 0x80 | div);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4619      	mov	r1, r3
 800128a:	2011      	movs	r0, #17
 800128c:	f7ff fa1a 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 fc05 	bl	8002aa0 <HAL_Delay>
	OV7670_WriteSCCB(REG_DBLV, 0x08 | mul);
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	206b      	movs	r0, #107	; 0x6b
 80012a2:	f7ff fa0f 	bl	80006c4 <OV7670_WriteSCCB>
	HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 fbfa 	bl	8002aa0 <HAL_Delay>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <OV7670_PowerUp>:
	OV7670_XCLK(OFF);
	OV7670_Power(OFF);
}

void OV7670_PowerUp(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	OV7670_Power(ON);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff f9b1 	bl	8000620 <OV7670_Power>
	OV7670_XCLK(ON);
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff f9e4 	bl	800068c <OV7670_XCLK>
	OV7670_ResetHW();
 80012c4:	f7ff f9ca 	bl	800065c <OV7670_ResetHW>
	OV7670_ResetSW();
 80012c8:	f7ff fa7e 	bl	80007c8 <OV7670_ResetSW>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <OV7670_UpdateSettings>:

void OV7670_UpdateSettings(Camera_settings OV7670)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	f107 0c08 	add.w	ip, r7, #8
 80012da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	OV7670_SetResolution(OV7670.resolution);
 80012de:	7a3b      	ldrb	r3, [r7, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fb2f 	bl	8000944 <OV7670_SetResolution>

	if(OV7670.format) OV7670_SetColorFormat(RGB565);
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <OV7670_UpdateSettings+0x24>
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fbd7 	bl	8000aa0 <OV7670_SetColorFormat>
 80012f2:	e002      	b.n	80012fa <OV7670_UpdateSettings+0x2a>
	else OV7670_SetColorFormat(YUV422);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fbd3 	bl	8000aa0 <OV7670_SetColorFormat>

	OV7670_SpecialEffect(OV7670.effect);
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff11 	bl	8001124 <OV7670_SpecialEffect>
	OV7670_AutoExposureMode(OV7670.AEC);
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc19 	bl	8000b3c <OV7670_AutoExposureMode>
	if(!OV7670.AEC) OV7670_SetExposureTime(OV7670.exposure);
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <OV7670_UpdateSettings+0x48>
 8001310:	8b3b      	ldrh	r3, [r7, #24]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fc5c 	bl	8000bd0 <OV7670_SetExposureTime>
	OV7670_SetAECAlgorithm(OV7670.algorithm);
 8001318:	7d7b      	ldrb	r3, [r7, #21]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc33 	bl	8000b86 <OV7670_SetAECAlgorithm>

	OV7670_AutoGainMode(OV7670.AGC);
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc9b 	bl	8000c5e <OV7670_AutoGainMode>
	if(!OV7670.AGC) OV7670_SetGain(OV7670.gain);
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <OV7670_UpdateSettings+0x66>
 800132e:	7ebb      	ldrb	r3, [r7, #26]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fcb9 	bl	8000ca8 <OV7670_SetGain>

	OV7670_AutoWhiteBalanceMode(OV7670.AWB);
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fd3b 	bl	8000db4 <OV7670_AutoWhiteBalanceMode>
	if(!OV7670.AWB) OV7670_SetChannelsGain(OV7670.rch_gain, OV7670.gch_gain, OV7670.bch_gain);
 800133e:	7b7b      	ldrb	r3, [r7, #13]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <OV7670_UpdateSettings+0x86>
 8001344:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001348:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800134c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fd54 	bl	8000dfe <OV7670_SetChannelsGain>

	OV7670_SetBrightness(OV7670.brightness);
 8001356:	7efb      	ldrb	r3, [r7, #27]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fa6f 	bl	800083c <OV7670_SetBrightness>
	OV7670_SetContrast(OV7670.contrast);
 800135e:	7f3b      	ldrb	r3, [r7, #28]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fa83 	bl	800086c <OV7670_SetContrast>
	OV7670_SetSaturation(OV7670.saturation);
 8001366:	7f7b      	ldrb	r3, [r7, #29]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa8d 	bl	8000888 <OV7670_SetSaturation>

	OV7670_AutoSharpness(OV7670.ASC);
 800136e:	7cbb      	ldrb	r3, [r7, #18]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe00 	bl	8000f76 <OV7670_AutoSharpness>
	if(!OV7670.ASC) OV7670_SetSharpness(OV7670.sharpness);
 8001376:	7cbb      	ldrb	r3, [r7, #18]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d103      	bne.n	8001384 <OV7670_UpdateSettings+0xb4>
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe1e 	bl	8000fc0 <OV7670_SetSharpness>

	OV7670_SetGainCeiling(OV7670.gain_ceiling);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc46 	bl	8000c1a <OV7670_SetGainCeiling>

	OV7670_FlipHorizontal(OV7670.h_flip);
 800138e:	7c3b      	ldrb	r3, [r7, #16]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fd75 	bl	8000e80 <OV7670_FlipHorizontal>
	OV7670_FlipVertical(OV7670.v_flip);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fd96 	bl	8000eca <OV7670_FlipVertical>
	OV7670_ShowColorBar(OV7670.cbar);
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fd48 	bl	8000e36 <OV7670_ShowColorBar>
	OV7670_NightMode(OV7670.night_mode, OV7670.night_mode_fps);
 80013a6:	7c7b      	ldrb	r3, [r7, #17]
 80013a8:	7dba      	ldrb	r2, [r7, #22]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fdb1 	bl	8000f14 <OV7670_NightMode>

	OV7670_AutoDeNoise(OV7670.ADN);
 80013b2:	7cfb      	ldrb	r3, [r7, #19]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe21 	bl	8000ffc <OV7670_AutoDeNoise>
	if(!OV7670.ADN)OV7670_SetDeNoiseStrength(OV7670.strength);
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <OV7670_UpdateSettings+0xf8>
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe3f 	bl	8001046 <OV7670_SetDeNoiseStrength>

	OV7670_BandingFilter(OV7670.BDF, OV7670.bd_filter_value);
 80013c8:	7d3b      	ldrb	r3, [r7, #20]
 80013ca:	7dfa      	ldrb	r2, [r7, #23]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fe47 	bl	8001062 <OV7670_BandingFilter>
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013dc:	b004      	add	sp, #16
 80013de:	4770      	bx	lr

080013e0 <OV7670_SetFrameControl>:

void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	4603      	mov	r3, r0
 80013f4:	80bb      	strh	r3, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	4613      	mov	r3, r2
 80013fc:	803b      	strh	r3, [r7, #0]
	OV7670_WriteSCCB(REG_HSTART, (hstart >> 3) & 0xff);
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	2017      	movs	r0, #23
 800140a:	f7ff f95b 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HSTOP, (hstop >> 3) & 0xff);
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	2018      	movs	r0, #24
 800141a:	f7ff f953 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001428:	b25a      	sxtb	r2, r3
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	2032      	movs	r0, #50	; 0x32
 800143e:	f7ff f941 	bl	80006c4 <OV7670_WriteSCCB>

	OV7670_WriteSCCB(REG_VSTART, (vstart >> 2) & 0xff);
 8001442:	887b      	ldrh	r3, [r7, #2]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2019      	movs	r0, #25
 800144e:	f7ff f939 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VSTOP, (vstop >> 2) & 0xff);
 8001452:	883b      	ldrh	r3, [r7, #0]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	201a      	movs	r0, #26
 800145e:	f7ff f931 	bl	80006c4 <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 8001462:	883b      	ldrh	r3, [r7, #0]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	b25b      	sxtb	r3, r3
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	b25a      	sxtb	r2, r3
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	b25b      	sxtb	r3, r3
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	2003      	movs	r0, #3
 8001482:	f7ff f91f 	bl	80006c4 <OV7670_WriteSCCB>
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
	...

08001490 <OV7670_getImageInfo>:
	*time_num=(int)(time);
	*time_fract=(int)((time-(*time_num))*10);
}

void OV7670_getImageInfo(uint16_t *width, uint16_t *height, uint8_t *format)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	*width=img_width;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <OV7670_getImageInfo+0x30>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	801a      	strh	r2, [r3, #0]
	*height=img_height;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <OV7670_getImageInfo+0x34>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	801a      	strh	r2, [r3, #0]
	*format=img_format;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <OV7670_getImageInfo+0x38>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	24000000 	.word	0x24000000
 80014c4:	24000002 	.word	0x24000002
 80014c8:	240000dc 	.word	0x240000dc

080014cc <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(capture_mode==CONTINUOUS)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_DCMI_FrameEventCallback+0x44>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d115      	bne.n	8001508 <HAL_DCMI_FrameEventCallback+0x3c>
		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3328      	adds	r3, #40	; 0x28
 80014e6:	461c      	mov	r4, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_DCMI_FrameEventCallback+0x48>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_DCMI_FrameEventCallback+0x4c>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_DCMI_FrameEventCallback+0x50>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da00      	bge.n	8001500 <HAL_DCMI_FrameEventCallback+0x34>
 80014fe:	3301      	adds	r3, #1
 8001500:	105b      	asrs	r3, r3, #1
 8001502:	4621      	mov	r1, r4
 8001504:	f002 fa70 	bl	80039e8 <HAL_DMA_Start_IT>

}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}
 8001510:	240000d4 	.word	0x240000d4
 8001514:	240000d8 	.word	0x240000d8
 8001518:	24000000 	.word	0x24000000
 800151c:	24000002 	.word	0x24000002

08001520 <_ZN15GaussianMixtureC1Ev>:
	double* sigma;
	double* beta;
	double* sigma_square;
	double* beta_square;
public:
	GaussianMixture()
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	{
		nChannels = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
		alpha = sigma = beta = sigma_square = beta_square = NULL;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	605a      	str	r2, [r3, #4]
	}
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_ZN15GaussianMixture5clearEv>:
		sigma = new double[nChannels];
		beta = new double[nChannels];
		sigma_square = new double[nChannels];
		beta_square = new double[nChannels];
	}
	void clear()
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	{
		if(!alpha)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <_ZN15GaussianMixture5clearEv+0x22>
			delete []alpha;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <_ZN15GaussianMixture5clearEv+0x22>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f00c f83c 	bl	800d5fc <_ZdaPv>
		if(!sigma)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d108      	bne.n	800159e <_ZN15GaussianMixture5clearEv+0x3c>
			delete []sigma;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <_ZN15GaussianMixture5clearEv+0x3c>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f00c f82f 	bl	800d5fc <_ZdaPv>
		if(!beta)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d108      	bne.n	80015b8 <_ZN15GaussianMixture5clearEv+0x56>
			delete []beta;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <_ZN15GaussianMixture5clearEv+0x56>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00c f822 	bl	800d5fc <_ZdaPv>
		if(!sigma_square)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d108      	bne.n	80015d2 <_ZN15GaussianMixture5clearEv+0x70>
			delete []sigma_square;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <_ZN15GaussianMixture5clearEv+0x70>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00c f815 	bl	800d5fc <_ZdaPv>
		if(!beta_square)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <_ZN15GaussianMixture5clearEv+0x8a>
			delete []beta_square;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <_ZN15GaussianMixture5clearEv+0x8a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00c f808 	bl	800d5fc <_ZdaPv>
		alpha = sigma = beta = sigma_square = beta_square = NULL;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	605a      	str	r2, [r3, #4]
	}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_ZN15GaussianMixtureD1Ev>:
		if(i==0)
			 return exp(-x/(2*sigma_square[k]))/(2*PI*sigma[k]);
		else
			return exp(-x/(2*beta_square[k]))/(2*PI*beta[k]);
	}
	~GaussianMixture()
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
	{
		clear();
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff9d 	bl	8001562 <_ZN15GaussianMixture5clearEv>
	}
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN6VectorIdEC1Ev>:
//		result += vect1[i]*vect2[i];
//	return result;
//}

template <class T>
Vector<T>::Vector(void)
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
{
	nDim=0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
	pData=NULL;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
}
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_ZN6VectorIdED1Ev>:
	pData=NULL;
	copyData(vect);
}

template <class T>
Vector<T>::~Vector(void)
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
{
	releaseData();
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f805 	bl	800166c <_ZN6VectorIdE11releaseDataEv>
}
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZN6VectorIdE11releaseDataEv>:

template <class T>
void Vector<T>::releaseData()
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
{
	if(pData!=NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <_ZN6VectorIdE11releaseDataEv+0x22>
		delete[] pData;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <_ZN6VectorIdE11releaseDataEv+0x22>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f00b ffb7 	bl	800d5fc <_ZdaPv>
	pData=NULL;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
	nDim=0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <_Z41__static_initialization_and_destruction_0ii>:
	for(int i = 0;i<flow.npixels(); i++)
		foo[i] = (flow[i]-Min)/(Max-Min)*255;
  // opencv support disabled. Can no longer write images.
	// foo.imwrite(filename);
  return false;
}
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10a      	bne.n	80016ca <_Z41__static_initialization_and_destruction_0ii+0x26>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d105      	bne.n	80016ca <_Z41__static_initialization_and_destruction_0ii+0x26>
GaussianMixture OpticalFlow::GMPara;
 80016be:	480c      	ldr	r0, [pc, #48]	; (80016f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80016c0:	f7ff ff2e 	bl	8001520 <_ZN15GaussianMixtureC1Ev>
Vector<double> OpticalFlow::LapPara;
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016c6:	f7ff ffb4 	bl	8001632 <_ZN6VectorIdEC1Ev>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d105      	bne.n	80016e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016dc:	f7ff ffba 	bl	8001654 <_ZN6VectorIdED1Ev>
GaussianMixture OpticalFlow::GMPara;
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80016e2:	f7ff ff9a 	bl	800161a <_ZN15GaussianMixtureD1Ev>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	240000e0 	.word	0x240000e0
 80016f4:	240000f8 	.word	0x240000f8

080016f8 <_GLOBAL__sub_I__ZN11OpticalFlow9IsDisplayE>:
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff ffcf 	bl	80016a4 <_Z41__static_initialization_and_destruction_0ii>
 8001706:	bd80      	pop	{r7, pc}

08001708 <_GLOBAL__sub_D__ZN11OpticalFlow9IsDisplayE>:
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
 800170c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ffc7 	bl	80016a4 <_Z41__static_initialization_and_destruction_0ii>
 8001716:	bd80      	pop	{r7, pc}

08001718 <YUVtoRGB888>:
#include "color_conversion.h"

#define LIMIT(x) (x > 255 ? 255 : (x < 0 ? 0 : x))

uint32_t YUVtoRGB888(int16_t Y, int16_t U, int16_t V)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	80bb      	strh	r3, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	807b      	strh	r3, [r7, #2]
	uint8_t R=0, G=0, B=0;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	2300      	movs	r3, #0
 8001734:	737b      	strb	r3, [r7, #13]
	R = LIMIT(Y + V + ((V * 103) >> 8));					//RED
 8001736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800173a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800173e:	441a      	add	r2, r3
 8001740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001744:	2167      	movs	r1, #103	; 0x67
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	121b      	asrs	r3, r3, #8
 800174c:	4413      	add	r3, r2
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	dc0f      	bgt.n	8001772 <YUVtoRGB888+0x5a>
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175a:	441a      	add	r2, r3
 800175c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001760:	2167      	movs	r1, #103	; 0x67
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	121b      	asrs	r3, r3, #8
 8001768:	4413      	add	r3, r2
 800176a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800176e:	b2db      	uxtb	r3, r3
 8001770:	e000      	b.n	8001774 <YUVtoRGB888+0x5c>
 8001772:	23ff      	movs	r3, #255	; 0xff
 8001774:	73fb      	strb	r3, [r7, #15]
	G = LIMIT(Y - ((U * 88) >> 8) - ((V * 183) >> 8));		//GREEN
 8001776:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800177a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800177e:	2158      	movs	r1, #88	; 0x58
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	121b      	asrs	r3, r3, #8
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800178c:	21b7      	movs	r1, #183	; 0xb7
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	121b      	asrs	r3, r3, #8
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	dc13      	bgt.n	80017c2 <YUVtoRGB888+0xaa>
 800179a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800179e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017a2:	2158      	movs	r1, #88	; 0x58
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	121b      	asrs	r3, r3, #8
 80017aa:	1ad2      	subs	r2, r2, r3
 80017ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017b0:	21b7      	movs	r1, #183	; 0xb7
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	121b      	asrs	r3, r3, #8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	e000      	b.n	80017c4 <YUVtoRGB888+0xac>
 80017c2:	23ff      	movs	r3, #255	; 0xff
 80017c4:	73bb      	strb	r3, [r7, #14]
	B = LIMIT(Y + U + ((U * 198) >> 8));					//BLUE
 80017c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ce:	441a      	add	r2, r3
 80017d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017d4:	21c6      	movs	r1, #198	; 0xc6
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	121b      	asrs	r3, r3, #8
 80017dc:	4413      	add	r3, r2
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	dc0f      	bgt.n	8001802 <YUVtoRGB888+0xea>
 80017e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ea:	441a      	add	r2, r3
 80017ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f0:	21c6      	movs	r1, #198	; 0xc6
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	121b      	asrs	r3, r3, #8
 80017f8:	4413      	add	r3, r2
 80017fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	e000      	b.n	8001804 <YUVtoRGB888+0xec>
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	431a      	orrs	r2, r3
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	4313      	orrs	r3, r2
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <RGB565toRGB888>:

    return (uint16_t)RGB;
}

uint32_t RGB565toRGB888(uint16_t RGB)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	uint8_t R=0, G=0, B=0;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	2300      	movs	r3, #0
 8001830:	73bb      	strb	r3, [r7, #14]
 8001832:	2300      	movs	r3, #0
 8001834:	737b      	strb	r3, [r7, #13]

	R = ((RGB >> 11) << 3);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	0adb      	lsrs	r3, r3, #11
 800183a:	b29b      	uxth	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	73fb      	strb	r3, [r7, #15]
	G = ((RGB >> 5) << 2);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	095b      	lsrs	r3, r3, #5
 8001846:	b29b      	uxth	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	73bb      	strb	r3, [r7, #14]
	B = ((RGB & 0x1F)<<3);
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	737b      	strb	r3, [r7, #13]

	return (uint32_t) ((R<<16) | (G<<8) | B);
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	041a      	lsls	r2, r3, #16
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	431a      	orrs	r2, r3
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	4313      	orrs	r3, r2
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e010      	b.n	80018a2 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001880:	2102      	movs	r1, #2
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <flash+0x48>)
 8001884:	f005 fa09 	bl	8006c9a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8001888:	2032      	movs	r0, #50	; 0x32
 800188a:	f001 f909 	bl	8002aa0 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800188e:	2102      	movs	r1, #2
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <flash+0x48>)
 8001892:	f005 fa02 	bl	8006c9a <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 8001896:	2032      	movs	r0, #50	; 0x32
 8001898:	f001 f902 	bl	8002aa0 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dbea      	blt.n	8001880 <flash+0x10>
  }

  HAL_Delay(100);
 80018aa:	2064      	movs	r0, #100	; 0x64
 80018ac:	f001 f8f8 	bl	8002aa0 <HAL_Delay>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58020000 	.word	0x58020000

080018bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80018c2:	f000 fae3 	bl	8001e8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c6:	f001 f859 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ca:	f000 f851 	bl	8001970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ce:	f000 fa45 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80018d2:	f000 fa23 	bl	8001d1c <MX_DMA_Init>
  MX_DCMI_Init();
 80018d6:	f000 f8c7 	bl	8001a68 <MX_DCMI_Init>
  MX_I2C1_Init();
 80018da:	f000 f8f9 	bl	8001ad0 <MX_I2C1_Init>
  MX_TIM6_Init();
 80018de:	f000 f963 	bl	8001ba8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80018e2:	f000 f9cf 	bl	8001c84 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 80018e6:	f000 f933 	bl	8001b50 <MX_LPTIM1_Init>
  MX_TIM7_Init();
 80018ea:	f000 f993 	bl	8001c14 <MX_TIM7_Init>
//  static double g_v2[4096];
//  static double g_warpI2[4096];
//  Coarse2FineFlowWrapper(g_v1, g_v2, g_warpI2, g_img0, g_img1,
//    0.0012, 0.75, 30, 2, 1, 1, 1, 64, 64, 1);

  flash(5);
 80018ee:	2005      	movs	r0, #5
 80018f0:	f7ff ffbe 	bl	8001870 <flash>

  OV7670_Power(DISABLE);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7fe fe93 	bl	8000620 <OV7670_Power>
  OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c1, &hlptim1);
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <main+0x94>)
 80018fc:	4a15      	ldr	r2, [pc, #84]	; (8001954 <main+0x98>)
 80018fe:	4916      	ldr	r1, [pc, #88]	; (8001958 <main+0x9c>)
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <main+0xa0>)
 8001902:	f7fe fe6b 	bl	80005dc <OV7670_Init>
  OV7670_PowerUp();
 8001906:	f7ff fcd5 	bl	80012b4 <OV7670_PowerUp>
  OV7670_UpdateSettings(OV7670_settings);
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <main+0xa4>)
 800190c:	466c      	mov	r4, sp
 800190e:	f103 0210 	add.w	r2, r3, #16
 8001912:	ca07      	ldmia	r2, {r0, r1, r2}
 8001914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001918:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191a:	f7ff fcd9 	bl	80012d0 <OV7670_UpdateSettings>
  OV7670_SetFrameRate(XCLK_DIV(1), PLL_x4);
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fca5 	bl	8001270 <OV7670_SetFrameRate>
  HAL_Delay(10);
 8001926:	200a      	movs	r0, #10
 8001928:	f001 f8ba 	bl	8002aa0 <HAL_Delay>
  OV7670_Start(CONTINUOUS, g_image_data);
 800192c:	490d      	ldr	r1, [pc, #52]	; (8001964 <main+0xa8>)
 800192e:	2000      	movs	r0, #0
 8001930:	f7fe ff06 	bl	8000740 <OV7670_Start>
  HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	; 0x64
 8001936:	f001 f8b3 	bl	8002aa0 <HAL_Delay>

  // 50hz timer
  HAL_TIM_Base_Start_IT(&htim6);
 800193a:	480b      	ldr	r0, [pc, #44]	; (8001968 <main+0xac>)
 800193c:	f008 fe32 	bl	800a5a4 <HAL_TIM_Base_Start_IT>

  // 5hz timer
  HAL_TIM_Base_Start_IT(&htim7);
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <main+0xb0>)
 8001942:	f008 fe2f 	bl	800a5a4 <HAL_TIM_Base_Start_IT>

  flash(5);
 8001946:	2005      	movs	r0, #5
 8001948:	f7ff ff92 	bl	8001870 <flash>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800194c:	e7fe      	b.n	800194c <main+0x90>
 800194e:	bf00      	nop
 8001950:	24000214 	.word	0x24000214
 8001954:	240001c8 	.word	0x240001c8
 8001958:	24000150 	.word	0x24000150
 800195c:	24000100 	.word	0x24000100
 8001960:	24000014 	.word	0x24000014
 8001964:	24000374 	.word	0x24000374
 8001968:	2400024c 	.word	0x2400024c
 800196c:	24000298 	.word	0x24000298

08001970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b09c      	sub	sp, #112	; 0x70
 8001974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	224c      	movs	r2, #76	; 0x4c
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f00b fe6c 	bl	800d65c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2220      	movs	r2, #32
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f00b fe66 	bl	800d65c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001990:	2002      	movs	r0, #2
 8001992:	f006 fa53 	bl	8007e3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <SystemClock_Config+0xf0>)
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <SystemClock_Config+0xf0>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <SystemClock_Config+0xf0>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <SystemClock_Config+0xf4>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <SystemClock_Config+0xf4>)
 80019ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <SystemClock_Config+0xf4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019cc:	bf00      	nop
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <SystemClock_Config+0xf4>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019da:	d1f8      	bne.n	80019ce <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	2302      	movs	r3, #2
 80019ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019ee:	2308      	movs	r3, #8
 80019f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 128;
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001a02:	2304      	movs	r3, #4
 8001a04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a12:	4618      	mov	r0, r3
 8001a14:	f006 fa4c 	bl	8007eb0 <HAL_RCC_OscConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a1e:	f000 fa61 	bl	8001ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a22:	233f      	movs	r3, #63	; 0x3f
 8001a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a26:	2303      	movs	r3, #3
 8001a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8001a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f006 fe5f 	bl	800870c <HAL_RCC_ClockConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001a54:	f000 fa46 	bl	8001ee4 <Error_Handler>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3770      	adds	r7, #112	; 0x70
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58000400 	.word	0x58000400
 8001a64:	58024800 	.word	0x58024800

08001a68 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <MX_DCMI_Init+0x64>)
 8001a70:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_DCMI_Init+0x60>)
 8001ab6:	f001 f9af 	bl	8002e18 <HAL_DCMI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001ac0:	f000 fa10 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	24000100 	.word	0x24000100
 8001acc:	48020000 	.word	0x48020000

08001ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <MX_I2C1_Init+0x78>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <MX_I2C1_Init+0x7c>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0a:	480e      	ldr	r0, [pc, #56]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001b0c:	f005 f8e0 	bl	8006cd0 <HAL_I2C_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b16:	f000 f9e5 	bl	8001ee4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4809      	ldr	r0, [pc, #36]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001b1e:	f005 fdc9 	bl	80076b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b28:	f000 f9dc 	bl	8001ee4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_I2C1_Init+0x74>)
 8001b30:	f005 fe0b 	bl	800774a <HAL_I2CEx_ConfigDigitalFilter>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b3a:	f000 f9d3 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	240001c8 	.word	0x240001c8
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	00c0eaff 	.word	0x00c0eaff

08001b50 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <MX_LPTIM1_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_LPTIM1_Init+0x50>)
 8001b8e:	f005 fe29 	bl	80077e4 <HAL_LPTIM_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 f9a4 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24000214 	.word	0x24000214
 8001ba4:	40002400 	.word	0x40002400

08001ba8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bc0:	2232      	movs	r2, #50	; 0x32
 8001bc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bcc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bd0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bda:	f008 fc8b 	bl	800a4f4 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001be4:	f000 f97e 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_TIM6_Init+0x64>)
 8001bf6:	f008 ff39 	bl	800aa6c <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c00:	f000 f970 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2400024c 	.word	0x2400024c
 8001c10:	40001000 	.word	0x40001000

08001c14 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <MX_TIM7_Init+0x6c>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c2c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001c30:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c48:	f008 fc54 	bl	800a4f4 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001c52:	f000 f947 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM7_Init+0x68>)
 8001c64:	f008 ff02 	bl	800aa6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001c6e:	f000 f939 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	24000298 	.word	0x24000298
 8001c80:	40001400 	.word	0x40001400

08001c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c88:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <MX_USART1_UART_Init+0x94>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ccc:	4811      	ldr	r0, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cce:	f008 ff79 	bl	800abc4 <HAL_UART_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cd8:	f000 f904 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001ce0:	f00b fbc1 	bl	800d466 <HAL_UARTEx_SetTxFifoThreshold>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001cea:	f000 f8fb 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4808      	ldr	r0, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001cf2:	f00b fbf6 	bl	800d4e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001cfc:	f000 f8f2 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	; (8001d14 <MX_USART1_UART_Init+0x90>)
 8001d02:	f00b fb77 	bl	800d3f4 <HAL_UARTEx_DisableFifoMode>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d0c:	f000 f8ea 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	240002e4 	.word	0x240002e4
 8001d18:	40011000 	.word	0x40011000

08001d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_DMA_Init+0x3c>)
 8001d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <MX_DMA_Init+0x3c>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_DMA_Init+0x3c>)
 8001d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	200b      	movs	r0, #11
 8001d46:	f000 ffb6 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d4a:	200b      	movs	r0, #11
 8001d4c:	f000 ffcd 	bl	8002cea <HAL_NVIC_EnableIRQ>

}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58024400 	.word	0x58024400

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	4a41      	ldr	r2, [pc, #260]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db4:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dbe:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dcc:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd2:	4a2b      	ldr	r2, [pc, #172]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df0:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_GPIO_Init+0x124>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_GPIO_Init+0x128>)
 8001e2c:	f004 ff1c 	bl	8006c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001e38:	f004 ff16 	bl	8006c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4619      	mov	r1, r3
 8001e52:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_GPIO_Init+0x128>)
 8001e54:	f004 fd58 	bl	8006908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001e58:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001e72:	f004 fd49 	bl	8006908 <HAL_GPIO_Init>

}
 8001e76:	bf00      	nop
 8001e78:	3730      	adds	r7, #48	; 0x30
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020000 	.word	0x58020000
 8001e88:	58020c00 	.word	0x58020c00

08001e8c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001e9e:	f000 ff3f 	bl	8002d20 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001eae:	231f      	movs	r3, #31
 8001eb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001eb2:	2387      	movs	r3, #135	; 0x87
 8001eb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 ff5d 	bl	8002d90 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	f000 ff3a 	bl	8002d50 <HAL_MPU_Enable>

}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>
	...

08001ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_MspInit+0x30>)
 8001ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x30>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x30>)
 8001f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	58024400 	.word	0x58024400

08001f24 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a74      	ldr	r2, [pc, #464]	; (8002114 <HAL_DCMI_MspInit+0x1f0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f040 80e2 	bne.w	800210c <HAL_DCMI_MspInit+0x1e8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f4e:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a6a      	ldr	r2, [pc, #424]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b64      	ldr	r3, [pc, #400]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	4a63      	ldr	r2, [pc, #396]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f94:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	4a5b      	ldr	r2, [pc, #364]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb2:	4b59      	ldr	r3, [pc, #356]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc0:	4b55      	ldr	r3, [pc, #340]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd0:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_DCMI_MspInit+0x1f4>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ffc:	2370      	movs	r3, #112	; 0x70
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002004:	2302      	movs	r3, #2
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800200c:	230d      	movs	r3, #13
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	4619      	mov	r1, r3
 8002016:	4841      	ldr	r0, [pc, #260]	; (800211c <HAL_DCMI_MspInit+0x1f8>)
 8002018:	f004 fc76 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800201c:	2350      	movs	r3, #80	; 0x50
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002024:	2302      	movs	r3, #2
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800202c:	230d      	movs	r3, #13
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	4619      	mov	r1, r3
 8002036:	483a      	ldr	r0, [pc, #232]	; (8002120 <HAL_DCMI_MspInit+0x1fc>)
 8002038:	f004 fc66 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800203c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002046:	2302      	movs	r3, #2
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800204e:	230d      	movs	r3, #13
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4832      	ldr	r0, [pc, #200]	; (8002124 <HAL_DCMI_MspInit+0x200>)
 800205a:	f004 fc55 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800205e:	2308      	movs	r3, #8
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002066:	2302      	movs	r3, #2
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800206e:	230d      	movs	r3, #13
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	482b      	ldr	r0, [pc, #172]	; (8002128 <HAL_DCMI_MspInit+0x204>)
 800207a:	f004 fc45 	bl	8006908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002086:	2302      	movs	r3, #2
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800208e:	230d      	movs	r3, #13
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	4619      	mov	r1, r3
 8002098:	4824      	ldr	r0, [pc, #144]	; (800212c <HAL_DCMI_MspInit+0x208>)
 800209a:	f004 fc35 	bl	8006908 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_DCMI_MspInit+0x210>)
 80020a2:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020a6:	224b      	movs	r2, #75	; 0x4b
 80020a8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020bc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80020e0:	4813      	ldr	r0, [pc, #76]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020e2:	f001 f925 	bl	8003330 <HAL_DMA_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_DCMI_MspInit+0x1cc>
    {
      Error_Handler();
 80020ec:	f7ff fefa 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020f4:	649a      	str	r2, [r3, #72]	; 0x48
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_DCMI_MspInit+0x20c>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	204e      	movs	r0, #78	; 0x4e
 8002102:	f000 fdd8 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002106:	204e      	movs	r0, #78	; 0x4e
 8002108:	f000 fdef 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800210c:	bf00      	nop
 800210e:	3738      	adds	r7, #56	; 0x38
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	48020000 	.word	0x48020000
 8002118:	58024400 	.word	0x58024400
 800211c:	58021000 	.word	0x58021000
 8002120:	58020000 	.word	0x58020000
 8002124:	58020800 	.word	0x58020800
 8002128:	58020c00 	.word	0x58020c00
 800212c:	58020400 	.word	0x58020400
 8002130:	24000150 	.word	0x24000150
 8002134:	40020010 	.word	0x40020010

08002138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0b8      	sub	sp, #224	; 0xe0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	22bc      	movs	r2, #188	; 0xbc
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f00b fa7f 	bl	800d65c <memset>
  if(hi2c->Instance==I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <HAL_I2C_MspInit+0xc0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d142      	bne.n	80021ee <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002168:	2308      	movs	r3, #8
 800216a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f006 fe54 	bl	8008e24 <HAL_RCCEx_PeriphCLKConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002182:	f7ff feaf 	bl	8001ee4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80021a4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ac:	2312      	movs	r3, #18
 80021ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021be:	2304      	movs	r3, #4
 80021c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021c8:	4619      	mov	r1, r3
 80021ca:	480d      	ldr	r0, [pc, #52]	; (8002200 <HAL_I2C_MspInit+0xc8>)
 80021cc:	f004 fb9c 	bl	8006908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 80021d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 80021d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_I2C_MspInit+0xc4>)
 80021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	37e0      	adds	r7, #224	; 0xe0
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40005400 	.word	0x40005400
 80021fc:	58024400 	.word	0x58024400
 8002200:	58020400 	.word	0x58020400

08002204 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0b8      	sub	sp, #224	; 0xe0
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	22bc      	movs	r2, #188	; 0xbc
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00b fa19 	bl	800d65c <memset>
  if(hlptim->Instance==LPTIM1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_LPTIM_MspInit+0xc0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d142      	bne.n	80022ba <HAL_LPTIM_MspInit+0xb6>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002234:	2320      	movs	r3, #32
 8002236:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f006 fdee 	bl	8008e24 <HAL_RCCEx_PeriphCLKConfig>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 800224e:	f7ff fe49 	bl	8001ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 8002254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002258:	4a1b      	ldr	r2, [pc, #108]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 8002264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_LPTIM_MspInit+0xc4>)
 8002282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800228e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_LPTIM_MspInit+0xc8>)
 80022b6:	f004 fb27 	bl	8006908 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	37e0      	adds	r7, #224	; 0xe0
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40002400 	.word	0x40002400
 80022c8:	58024400 	.word	0x58024400
 80022cc:	58020c00 	.word	0x58020c00

080022d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_TIM_Base_MspInit+0x84>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d117      	bne.n	8002312 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 80022e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 80022f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f000 fcd6 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f000 fced 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002310:	e01b      	b.n	800234a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_TIM_Base_MspInit+0x8c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d116      	bne.n	800234a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 800231e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_Base_MspInit+0x88>)
 800232e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2037      	movs	r0, #55	; 0x37
 8002340:	f000 fcb9 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002344:	2037      	movs	r0, #55	; 0x37
 8002346:	f000 fcd0 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40001000 	.word	0x40001000
 8002358:	58024400 	.word	0x58024400
 800235c:	40001400 	.word	0x40001400

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b8      	sub	sp, #224	; 0xe0
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	22bc      	movs	r2, #188	; 0xbc
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f00b f96b 	bl	800d65c <memset>
  if(huart->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <HAL_UART_MspInit+0xd0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d14a      	bne.n	8002426 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 fd40 	bl	8008e24 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023aa:	f7ff fd9b 	bl	8001ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_UART_MspInit+0xd4>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002404:	2304      	movs	r3, #4
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800240e:	4619      	mov	r1, r3
 8002410:	4809      	ldr	r0, [pc, #36]	; (8002438 <HAL_UART_MspInit+0xd8>)
 8002412:	f004 fa79 	bl	8006908 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2025      	movs	r0, #37	; 0x25
 800241c:	f000 fc4b 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002420:	2025      	movs	r0, #37	; 0x25
 8002422:	f000 fc62 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	37e0      	adds	r7, #224	; 0xe0
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40011000 	.word	0x40011000
 8002434:	58024400 	.word	0x58024400
 8002438:	58020400 	.word	0x58020400

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002488:	f000 faea 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002496:	f002 fa75 	bl	8004984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	24000150 	.word	0x24000150

080024a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <USART1_IRQHandler+0x10>)
 80024aa:	f008 fcd9 	bl	800ae60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	240002e4 	.word	0x240002e4

080024b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  schedule_50hz();
 80024bc:	f000 f830 	bl	8002520 <schedule_50hz>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM6_DAC_IRQHandler+0x14>)
 80024c2:	f008 f8e7 	bl	800a694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2400024c 	.word	0x2400024c

080024d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  schedule_5hz();
 80024d4:	f000 f82c 	bl	8002530 <schedule_5hz>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <TIM7_IRQHandler+0x14>)
 80024da:	f008 f8db 	bl	800a694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	24000298 	.word	0x24000298

080024e8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DCMI_IRQHandler+0x10>)
 80024ee:	f000 fdcf 	bl	8003090 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24000100 	.word	0x24000100

080024fc <log_data>:

void log_string(const char *str) {
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
}

void log_data(const uint8_t *data, uint16_t size) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)data, (uint16_t)size);
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	461a      	mov	r2, r3
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4803      	ldr	r0, [pc, #12]	; (800251c <log_data+0x20>)
 8002510:	f008 fba8 	bl	800ac64 <HAL_UART_Transmit_IT>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	240002e4 	.word	0x240002e4

08002520 <schedule_50hz>:

void schedule_50hz(void) {
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <schedule_5hz>:

void schedule_5hz(void) {
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  update_image();
 8002534:	f000 f80e 	bl	8002554 <update_image>
  update_flow();
 8002538:	f000 f924 	bl	8002784 <update_flow>
  HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 800253c:	2201      	movs	r2, #1
 800253e:	4903      	ldr	r1, [pc, #12]	; (800254c <schedule_5hz+0x1c>)
 8002540:	4803      	ldr	r0, [pc, #12]	; (8002550 <schedule_5hz+0x20>)
 8002542:	f008 fc37 	bl	800adb4 <HAL_UART_Receive_IT>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	24031b74 	.word	0x24031b74
 8002550:	240002e4 	.word	0x240002e4

08002554 <update_image>:

void update_image(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	; 0x38
 8002558:	af00      	add	r7, sp, #0
  static uint8_t format;
  OV7670_getImageInfo(&g_width, &g_height, &format);
 800255a:	4a82      	ldr	r2, [pc, #520]	; (8002764 <update_image+0x210>)
 800255c:	4982      	ldr	r1, [pc, #520]	; (8002768 <update_image+0x214>)
 800255e:	4883      	ldr	r0, [pc, #524]	; (800276c <update_image+0x218>)
 8002560:	f7fe ff96 	bl	8001490 <OV7670_getImageInfo>

  double *img_ptr = g_prev_img == 0 ? g_img1 : g_img0;
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <update_image+0x21c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <update_image+0x1c>
 800256c:	4b81      	ldr	r3, [pc, #516]	; (8002774 <update_image+0x220>)
 800256e:	e000      	b.n	8002572 <update_image+0x1e>
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <update_image+0x224>)
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c

  for (int i = 0; i < g_height; i += 1) {
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
 8002578:	e0de      	b.n	8002738 <update_image+0x1e4>
    for (int j = 0; j < (int)g_width/2; j += 1) {
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	e0cf      	b.n	8002720 <update_image+0x1cc>
      int idx = i*(g_width/2) + j;
 8002580:	4b7a      	ldr	r3, [pc, #488]	; (800276c <update_image+0x218>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002592:	4413      	add	r3, r2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t temp = g_image_data[idx];
 8002596:	4a79      	ldr	r2, [pc, #484]	; (800277c <update_image+0x228>)
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
      if (format == YUV422) {
 80025a0:	4b70      	ldr	r3, [pc, #448]	; (8002764 <update_image+0x210>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d168      	bne.n	800267a <update_image+0x126>
        int16_t Y2 = (temp >> 24) & 0x00FF;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	0e1b      	lsrs	r3, r3, #24
 80025ac:	827b      	strh	r3, [r7, #18]
        int16_t U = ((temp >> 16) & 0x00FF) - 128;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b80      	subs	r3, #128	; 0x80
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	823b      	strh	r3, [r7, #16]
        int16_t Y1 = (temp >> 8) & 0x00FF;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b21b      	sxth	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	81fb      	strh	r3, [r7, #14]
        int16_t V = (temp & 0x00FF) - 128;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b80      	subs	r3, #128	; 0x80
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	81bb      	strh	r3, [r7, #12]
        uint32_t pix = YUVtoRGB888(Y1, U, V);
 80025d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025da:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80025de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f898 	bl	8001718 <YUVtoRGB888>
 80025e8:	60b8      	str	r0, [r7, #8]
        uint32_t next_pix = YUVtoRGB888(Y2, U, V);
 80025ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025ee:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80025f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f88e 	bl	8001718 <YUVtoRGB888>
 80025fc:	6078      	str	r0, [r7, #4]

        uint8_t r = (pix >> (0)) & 0xff;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	70fb      	strb	r3, [r7, #3]
        uint8_t g = (pix >> (8)) & 0xff;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	70bb      	strb	r3, [r7, #2]
        uint8_t b = (pix >> (16)) & 0xff;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	0c1b      	lsrs	r3, r3, #16
 800260c:	707b      	strb	r3, [r7, #1]
        uint8_t rgb = ((r + g + b)/3);
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	78bb      	ldrb	r3, [r7, #2]
 8002612:	441a      	add	r2, r3
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	4413      	add	r3, r2
 8002618:	4a59      	ldr	r2, [pc, #356]	; (8002780 <update_image+0x22c>)
 800261a:	fb82 1203 	smull	r1, r2, r2, r3
 800261e:	17db      	asrs	r3, r3, #31
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	703b      	strb	r3, [r7, #0]
        img_ptr[2*idx] = rgb;
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	4413      	add	r3, r2
 800262c:	783a      	ldrb	r2, [r7, #0]
 800262e:	ee07 2a90 	vmov	s15, r2
 8002632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002636:	ed83 7b00 	vstr	d7, [r3]

        r = (next_pix >> (0)) & 0xff;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	70fb      	strb	r3, [r7, #3]
        g = (next_pix >> (8)) & 0xff;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	70bb      	strb	r3, [r7, #2]
        b = (next_pix >> (16)) & 0xff;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0c1b      	lsrs	r3, r3, #16
 8002648:	707b      	strb	r3, [r7, #1]
        rgb = ((r + g + b)/3);
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	78bb      	ldrb	r3, [r7, #2]
 800264e:	441a      	add	r2, r3
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	4413      	add	r3, r2
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <update_image+0x22c>)
 8002656:	fb82 1203 	smull	r1, r2, r2, r3
 800265a:	17db      	asrs	r3, r3, #31
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	703b      	strb	r3, [r7, #0]
        img_ptr[2*idx + 1] = rgb;
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3308      	adds	r3, #8
 8002666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002668:	4413      	add	r3, r2
 800266a:	783a      	ldrb	r2, [r7, #0]
 800266c:	ee07 2a90 	vmov	s15, r2
 8002670:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002674:	ed83 7b00 	vstr	d7, [r3]
 8002678:	e04f      	b.n	800271a <update_image+0x1c6>
      }
      else {
        uint16_t rbg1 = (temp >> 0) & 0x00FF;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	b29b      	uxth	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t rbg2 = (temp >> 16) & 0x00FF;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	b29b      	uxth	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	843b      	strh	r3, [r7, #32]
        uint32_t pix = RGB565toRGB888(rbg1);
 800268c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f8c6 	bl	8001820 <RGB565toRGB888>
 8002694:	61f8      	str	r0, [r7, #28]
        uint32_t next_pix = RGB565toRGB888(rbg2);
 8002696:	8c3b      	ldrh	r3, [r7, #32]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f8c1 	bl	8001820 <RGB565toRGB888>
 800269e:	61b8      	str	r0, [r7, #24]

        uint8_t r = (pix >> (0)) & 0xff;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	75fb      	strb	r3, [r7, #23]
        uint8_t g = (pix >> (8)) & 0xff;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	75bb      	strb	r3, [r7, #22]
        uint8_t b = (pix >> (16)) & 0xff;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	757b      	strb	r3, [r7, #21]
        uint8_t rgb = ((r + g + b)/3);
 80026b0:	7dfa      	ldrb	r2, [r7, #23]
 80026b2:	7dbb      	ldrb	r3, [r7, #22]
 80026b4:	441a      	add	r2, r3
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	4413      	add	r3, r2
 80026ba:	4a31      	ldr	r2, [pc, #196]	; (8002780 <update_image+0x22c>)
 80026bc:	fb82 1203 	smull	r1, r2, r2, r3
 80026c0:	17db      	asrs	r3, r3, #31
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	753b      	strb	r3, [r7, #20]
        img_ptr[2*idx] = rgb;
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	4413      	add	r3, r2
 80026ce:	7d3a      	ldrb	r2, [r7, #20]
 80026d0:	ee07 2a90 	vmov	s15, r2
 80026d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80026d8:	ed83 7b00 	vstr	d7, [r3]

        r = (next_pix >> (0)) & 0xff;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	75fb      	strb	r3, [r7, #23]
        g = (next_pix >> (8)) & 0xff;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	75bb      	strb	r3, [r7, #22]
        b = (next_pix >> (16)) & 0xff;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	757b      	strb	r3, [r7, #21]
        rgb = ((r + g + b)/3);
 80026ec:	7dfa      	ldrb	r2, [r7, #23]
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	441a      	add	r2, r3
 80026f2:	7d7b      	ldrb	r3, [r7, #21]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <update_image+0x22c>)
 80026f8:	fb82 1203 	smull	r1, r2, r2, r3
 80026fc:	17db      	asrs	r3, r3, #31
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	753b      	strb	r3, [r7, #20]
        img_ptr[2*idx + 1] = rgb;
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	3308      	adds	r3, #8
 8002708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270a:	4413      	add	r3, r2
 800270c:	7d3a      	ldrb	r2, [r7, #20]
 800270e:	ee07 2a90 	vmov	s15, r2
 8002712:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002716:	ed83 7b00 	vstr	d7, [r3]
    for (int j = 0; j < (int)g_width/2; j += 1) {
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	3301      	adds	r3, #1
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <update_image+0x218>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	4293      	cmp	r3, r2
 800272e:	f6ff af27 	blt.w	8002580 <update_image+0x2c>
  for (int i = 0; i < g_height; i += 1) {
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	3301      	adds	r3, #1
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <update_image+0x214>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	4293      	cmp	r3, r2
 8002742:	f6ff af1a 	blt.w	800257a <update_image+0x26>
      }
    }
  }

  g_prev_img = g_prev_img == 0 ? 1 : 0;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <update_image+0x21c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <update_image+0x21c>)
 8002758:	701a      	strb	r2, [r3, #0]
}
 800275a:	bf00      	nop
 800275c:	3738      	adds	r7, #56	; 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	24044780 	.word	0x24044780
 8002768:	24031b76 	.word	0x24031b76
 800276c:	24031b78 	.word	0x24031b78
 8002770:	24031b75 	.word	0x24031b75
 8002774:	2403b180 	.word	0x2403b180
 8002778:	24031b80 	.word	0x24031b80
 800277c:	24000374 	.word	0x24000374
 8002780:	55555556 	.word	0x55555556

08002784 <update_flow>:

void update_flow(void) {
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
//  Coarse2FineFlowWrapper(g_v1, g_v2, g_warpI2, g_img0, g_img1,
//      0.0012, 3/4, 30, 2, 1, 1, 1, 60, 80, 1);
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800279c:	2102      	movs	r1, #2
 800279e:	4819      	ldr	r0, [pc, #100]	; (8002804 <HAL_UART_RxCpltCallback+0x70>)
 80027a0:	f004 fa7b 	bl	8006c9a <HAL_GPIO_TogglePin>
  static uint8_t img[4800];
  for (int i = 0; i < g_height*g_width; i +=1)
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e013      	b.n	80027d2 <HAL_UART_RxCpltCallback+0x3e>
    img[i] = (uint8_t)g_img0[i];
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_UART_RxCpltCallback+0x74>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	ed93 7b00 	vldr	d7, [r3]
 80027b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80027ba:	edc7 7a00 	vstr	s15, [r7]
 80027be:	783b      	ldrb	r3, [r7, #0]
 80027c0:	b2d9      	uxtb	r1, r3
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_UART_RxCpltCallback+0x78>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	460a      	mov	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < g_height*g_width; i +=1)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3301      	adds	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_UART_RxCpltCallback+0x7c>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_UART_RxCpltCallback+0x80>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbe1      	blt.n	80027aa <HAL_UART_RxCpltCallback+0x16>

  log_data(img, g_height*g_width);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_UART_RxCpltCallback+0x7c>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_UART_RxCpltCallback+0x80>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	fb12 f303 	smulbb	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_UART_RxCpltCallback+0x78>)
 80027f8:	f7ff fe80 	bl	80024fc <log_data>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	58020000 	.word	0x58020000
 8002808:	24031b80 	.word	0x24031b80
 800280c:	24044784 	.word	0x24044784
 8002810:	24031b76 	.word	0x24031b76
 8002814:	24031b78 	.word	0x24031b78

08002818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <SystemInit+0xe4>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4a36      	ldr	r2, [pc, #216]	; (80028fc <SystemInit+0xe4>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800282c:	4b34      	ldr	r3, [pc, #208]	; (8002900 <SystemInit+0xe8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	2b06      	cmp	r3, #6
 8002836:	d807      	bhi.n	8002848 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <SystemInit+0xe8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 030f 	bic.w	r3, r3, #15
 8002840:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <SystemInit+0xe8>)
 8002842:	f043 0307 	orr.w	r3, r3, #7
 8002846:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <SystemInit+0xec>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <SystemInit+0xec>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <SystemInit+0xec>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800285a:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <SystemInit+0xec>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4929      	ldr	r1, [pc, #164]	; (8002904 <SystemInit+0xec>)
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <SystemInit+0xf0>)
 8002862:	4013      	ands	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002866:	4b26      	ldr	r3, [pc, #152]	; (8002900 <SystemInit+0xe8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <SystemInit+0xe8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 030f 	bic.w	r3, r3, #15
 800287a:	4a21      	ldr	r2, [pc, #132]	; (8002900 <SystemInit+0xe8>)
 800287c:	f043 0307 	orr.w	r3, r3, #7
 8002880:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <SystemInit+0xec>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <SystemInit+0xec>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <SystemInit+0xec>)
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <SystemInit+0xec>)
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <SystemInit+0xf4>)
 8002898:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <SystemInit+0xec>)
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <SystemInit+0xf8>)
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <SystemInit+0xec>)
 80028a2:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <SystemInit+0xfc>)
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <SystemInit+0xec>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <SystemInit+0xec>)
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <SystemInit+0xfc>)
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <SystemInit+0xec>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <SystemInit+0xec>)
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <SystemInit+0xfc>)
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <SystemInit+0xec>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <SystemInit+0xec>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <SystemInit+0xec>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <SystemInit+0xec>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <SystemInit+0x100>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <SystemInit+0x104>)
 80028dc:	4013      	ands	r3, r2
 80028de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e2:	d202      	bcs.n	80028ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <SystemInit+0x108>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <SystemInit+0x10c>)
 80028ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00
 8002900:	52002000 	.word	0x52002000
 8002904:	58024400 	.word	0x58024400
 8002908:	eaf6ed7f 	.word	0xeaf6ed7f
 800290c:	02020200 	.word	0x02020200
 8002910:	01ff0000 	.word	0x01ff0000
 8002914:	01010280 	.word	0x01010280
 8002918:	5c001000 	.word	0x5c001000
 800291c:	ffff0000 	.word	0xffff0000
 8002920:	51008108 	.word	0x51008108
 8002924:	52004000 	.word	0x52004000

08002928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800292c:	f7ff ff74 	bl	8002818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002930:	480c      	ldr	r0, [pc, #48]	; (8002964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002932:	490d      	ldr	r1, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002948:	4c0a      	ldr	r4, [pc, #40]	; (8002974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002956:	f00a fe55 	bl	800d604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295a:	f7fe ffaf 	bl	80018bc <main>
  bx  lr
 800295e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002960:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002964:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002968:	240000a4 	.word	0x240000a4
  ldr r2, =_sidata
 800296c:	0800d874 	.word	0x0800d874
  ldr r2, =_sbss
 8002970:	240000a8 	.word	0x240000a8
  ldr r4, =_ebss
 8002974:	24045a50 	.word	0x24045a50

08002978 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC3_IRQHandler>
	...

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002982:	2003      	movs	r0, #3
 8002984:	f000 f98c 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002988:	f006 f876 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_Init+0x68>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	4913      	ldr	r1, [pc, #76]	; (80029e8 <HAL_Init+0x6c>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_Init+0x68>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <HAL_Init+0x6c>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <HAL_Init+0x70>)
 80029be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <HAL_Init+0x74>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029c6:	200f      	movs	r0, #15
 80029c8:	f000 f814 	bl	80029f4 <HAL_InitTick>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e002      	b.n	80029dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029d6:	f7ff fa8b 	bl	8001ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	58024400 	.word	0x58024400
 80029e8:	0800d7bc 	.word	0x0800d7bc
 80029ec:	24000034 	.word	0x24000034
 80029f0:	24000030 	.word	0x24000030

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029fc:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_InitTick+0x60>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e021      	b.n	8002a4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_InitTick+0x64>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_InitTick+0x60>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f971 	bl	8002d06 <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a3c:	f000 f93b 	bl	8002cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <HAL_InitTick+0x68>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	2400003c 	.word	0x2400003c
 8002a58:	24000030 	.word	0x24000030
 8002a5c:	24000038 	.word	0x24000038

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2400003c 	.word	0x2400003c
 8002a84:	24045a44 	.word	0x24045a44

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	24045a44 	.word	0x24045a44

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_Delay+0x44>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2400003c 	.word	0x2400003c

08002ae8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetREVID+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	0c1b      	lsrs	r3, r3, #16
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	5c001000 	.word	0x5c001000

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	05fa0000 	.word	0x05fa0000

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff29 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff40 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff90 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5f 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff33 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffa4 	bl	8002c5c <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d24:	f3bf 8f5f 	dmb	sy
}
 8002d28:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <HAL_MPU_Disable+0x28>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_MPU_Disable+0x28>)
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_MPU_Disable+0x2c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00
 8002d4c:	e000ed90 	.word	0xe000ed90

08002d50 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d58:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <HAL_MPU_Enable+0x38>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_MPU_Enable+0x3c>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_MPU_Enable+0x3c>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d6e:	f3bf 8f4f 	dsb	sy
}
 8002d72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d74:	f3bf 8f6f 	isb	sy
}
 8002d78:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed90 	.word	0xe000ed90
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	785a      	ldrb	r2, [r3, #1]
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_MPU_ConfigRegion+0x84>)
 8002d9e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d029      	beq.n	8002dfc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002da8:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <HAL_MPU_ConfigRegion+0x84>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7b1b      	ldrb	r3, [r3, #12]
 8002db4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7adb      	ldrb	r3, [r3, #11]
 8002dba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7a9b      	ldrb	r3, [r3, #10]
 8002dc2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7b5b      	ldrb	r3, [r3, #13]
 8002dca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7b9b      	ldrb	r3, [r3, #14]
 8002dd2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7bdb      	ldrb	r3, [r3, #15]
 8002dda:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ddc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7a5b      	ldrb	r3, [r3, #9]
 8002de2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002de4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7a1b      	ldrb	r3, [r3, #8]
 8002dea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002df6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002df8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002dfa:	e005      	b.n	8002e08 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_MPU_ConfigRegion+0x84>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002e02:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <HAL_MPU_ConfigRegion+0x84>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed90 	.word	0xe000ed90

08002e18 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e069      	b.n	8002efe <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff f874 	bl	8001f24 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_DCMI_Init+0xf0>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002e76:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002e82:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002e8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002e9a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002ea6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d112      	bne.n	8002ede <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7f1b      	ldrb	r3, [r3, #28]
 8002ebc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7f5b      	ldrb	r3, [r3, #29]
 8002ec2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ec4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7f9b      	ldrb	r3, [r3, #30]
 8002eca:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002ecc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7fdb      	ldrb	r3, [r3, #31]
 8002ed4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002eda:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002edc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 021e 	orr.w	r2, r2, #30
 8002eec:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	ffe0f007 	.word	0xffe0f007

08002f0c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_DCMI_Start_DMA+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e0ab      	b.n	8003080 <HAL_DCMI_Start_DMA+0x174>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0202 	bic.w	r2, r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6c:	4a46      	ldr	r2, [pc, #280]	; (8003088 <HAL_DCMI_Start_DMA+0x17c>)
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	4a45      	ldr	r2, [pc, #276]	; (800308c <HAL_DCMI_Start_DMA+0x180>)
 8002f76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9e:	d219      	bcs.n	8002fd4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3328      	adds	r3, #40	; 0x28
 8002faa:	4619      	mov	r1, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	f000 fd1a 	bl	80039e8 <HAL_DMA_Start_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d055      	beq.n	8003066 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e055      	b.n	8003080 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DCMI_Start_DMA+0x17c>)
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002fee:	e009      	b.n	8003004 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	085a      	lsrs	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	005a      	lsls	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d2f0      	bcs.n	8002ff0 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	1e9a      	subs	r2, r3, #2
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3328      	adds	r3, #40	; 0x28
 8003036:	4619      	mov	r1, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	f002 ffb1 	bl	8005fa8 <HAL_DMAEx_MultiBufferStart_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00c      	b.n	8003080 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	080031d1 	.word	0x080031d1
 800308c:	080032f7 	.word	0x080032f7

08003090 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2204      	movs	r2, #4
 80030b0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_DCMI_IRQHandler+0x100>)
 80030cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 fa10 	bl	80044f8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	4a23      	ldr	r2, [pc, #140]	; (8003190 <HAL_DCMI_IRQHandler+0x100>)
 8003104:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f9f4 	bl	80044f8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f840 	bl	80031a8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2208      	movs	r2, #8
 8003138:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f83e 	bl	80031bc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01d      	beq.n	8003186 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d107      	bne.n	8003168 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 021e 	bic.w	r2, r2, #30
 8003166:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fe f9a3 	bl	80014cc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	080032f7 	.word	0x080032f7

08003194 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d043      	beq.n	800326e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d118      	bne.n	8003232 <DCMI_DMAXferCplt+0x62>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d015      	beq.n	8003232 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	00da      	lsls	r2, r3, #3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4413      	add	r3, r2
 800321e:	2200      	movs	r2, #0
 8003220:	4619      	mov	r1, r3
 8003222:	f003 fa1f 	bl	8006664 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	1e5a      	subs	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
 8003230:	e044      	b.n	80032bc <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d13c      	bne.n	80032bc <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	00da      	lsls	r2, r3, #3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	2201      	movs	r2, #1
 800325c:	4619      	mov	r1, r3
 800325e:	f003 fa01 	bl	8006664 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	1e5a      	subs	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
 800326c:	e026      	b.n	80032bc <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e017      	b.n	80032bc <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10f      	bne.n	80032bc <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	440a      	add	r2, r1
 80032b2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d112      	bne.n	80032ee <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	2b02      	cmp	r3, #2
 800330c:	d009      	beq.n	8003322 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff ff36 	bl	8003194 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff fba6 	bl	8002a88 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e316      	b.n	8003976 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_DMA_Init+0x1b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d04a      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a65      	ldr	r2, [pc, #404]	; (80034ec <HAL_DMA_Init+0x1bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d045      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a63      	ldr	r2, [pc, #396]	; (80034f0 <HAL_DMA_Init+0x1c0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d040      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a62      	ldr	r2, [pc, #392]	; (80034f4 <HAL_DMA_Init+0x1c4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d03b      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a60      	ldr	r2, [pc, #384]	; (80034f8 <HAL_DMA_Init+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d036      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a5f      	ldr	r2, [pc, #380]	; (80034fc <HAL_DMA_Init+0x1cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d031      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_DMA_Init+0x1d0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02c      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_DMA_Init+0x1d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d027      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_DMA_Init+0x1d8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a59      	ldr	r2, [pc, #356]	; (800350c <HAL_DMA_Init+0x1dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01d      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_DMA_Init+0x1e0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d018      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_DMA_Init+0x1e4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_DMA_Init+0x1e8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a53      	ldr	r2, [pc, #332]	; (800351c <HAL_DMA_Init+0x1ec>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_DMA_Init+0x1f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_DMA_Init+0xb8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_DMA_Init+0x1f4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d101      	bne.n	80033ec <HAL_DMA_Init+0xbc>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_DMA_Init+0xbe>
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 813b 	beq.w	800366a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <HAL_DMA_Init+0x1b8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d04a      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a36      	ldr	r2, [pc, #216]	; (80034ec <HAL_DMA_Init+0x1bc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d045      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_DMA_Init+0x1c0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d040      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a33      	ldr	r2, [pc, #204]	; (80034f4 <HAL_DMA_Init+0x1c4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d03b      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_DMA_Init+0x1c8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d036      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a30      	ldr	r2, [pc, #192]	; (80034fc <HAL_DMA_Init+0x1cc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d031      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2e      	ldr	r2, [pc, #184]	; (8003500 <HAL_DMA_Init+0x1d0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d02c      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2d      	ldr	r2, [pc, #180]	; (8003504 <HAL_DMA_Init+0x1d4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d027      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <HAL_DMA_Init+0x1d8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2a      	ldr	r2, [pc, #168]	; (800350c <HAL_DMA_Init+0x1dc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01d      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a28      	ldr	r2, [pc, #160]	; (8003510 <HAL_DMA_Init+0x1e0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_DMA_Init+0x1e4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <HAL_DMA_Init+0x1e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_DMA_Init+0x1ec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <HAL_DMA_Init+0x1f0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_Init+0x174>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a21      	ldr	r2, [pc, #132]	; (8003524 <HAL_DMA_Init+0x1f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <HAL_DMA_Init+0x186>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e007      	b.n	80034c6 <HAL_DMA_Init+0x196>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034c6:	e02f      	b.n	8003528 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c8:	f7ff fade 	bl	8002a88 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d928      	bls.n	8003528 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e246      	b.n	8003976 <HAL_DMA_Init+0x646>
 80034e8:	40020010 	.word	0x40020010
 80034ec:	40020028 	.word	0x40020028
 80034f0:	40020040 	.word	0x40020040
 80034f4:	40020058 	.word	0x40020058
 80034f8:	40020070 	.word	0x40020070
 80034fc:	40020088 	.word	0x40020088
 8003500:	400200a0 	.word	0x400200a0
 8003504:	400200b8 	.word	0x400200b8
 8003508:	40020410 	.word	0x40020410
 800350c:	40020428 	.word	0x40020428
 8003510:	40020440 	.word	0x40020440
 8003514:	40020458 	.word	0x40020458
 8003518:	40020470 	.word	0x40020470
 800351c:	40020488 	.word	0x40020488
 8003520:	400204a0 	.word	0x400204a0
 8003524:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1c8      	bne.n	80034c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_DMA_Init+0x420>)
 8003542:	4013      	ands	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800354e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	4313      	orrs	r3, r2
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800358c:	4b71      	ldr	r3, [pc, #452]	; (8003754 <HAL_DMA_Init+0x424>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <HAL_DMA_Init+0x428>)
 8003592:	4013      	ands	r3, r2
 8003594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003598:	d328      	bcc.n	80035ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b28      	cmp	r3, #40	; 0x28
 80035a0:	d903      	bls.n	80035aa <HAL_DMA_Init+0x27a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b2e      	cmp	r3, #46	; 0x2e
 80035a8:	d917      	bls.n	80035da <HAL_DMA_Init+0x2aa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b3e      	cmp	r3, #62	; 0x3e
 80035b0:	d903      	bls.n	80035ba <HAL_DMA_Init+0x28a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b42      	cmp	r3, #66	; 0x42
 80035b8:	d90f      	bls.n	80035da <HAL_DMA_Init+0x2aa>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b46      	cmp	r3, #70	; 0x46
 80035c0:	d903      	bls.n	80035ca <HAL_DMA_Init+0x29a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b48      	cmp	r3, #72	; 0x48
 80035c8:	d907      	bls.n	80035da <HAL_DMA_Init+0x2aa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b4e      	cmp	r3, #78	; 0x4e
 80035d0:	d905      	bls.n	80035de <HAL_DMA_Init+0x2ae>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b52      	cmp	r3, #82	; 0x52
 80035d8:	d801      	bhi.n	80035de <HAL_DMA_Init+0x2ae>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_DMA_Init+0x2b0>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b04      	cmp	r3, #4
 8003614:	d117      	bne.n	8003646 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f002 fb33 	bl	8005c94 <DMA_CheckFifoParam>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e197      	b.n	8003976 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f002 fa6e 	bl	8005b30 <DMA_CalcBaseAndBitshift>
 8003654:	4603      	mov	r3, r0
 8003656:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	223f      	movs	r2, #63	; 0x3f
 8003662:	409a      	lsls	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e0cd      	b.n	8003806 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_DMA_Init+0x42c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a39      	ldr	r2, [pc, #228]	; (8003760 <HAL_DMA_Init+0x430>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a38      	ldr	r2, [pc, #224]	; (8003764 <HAL_DMA_Init+0x434>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a36      	ldr	r2, [pc, #216]	; (8003768 <HAL_DMA_Init+0x438>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_DMA_Init+0x43c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a33      	ldr	r2, [pc, #204]	; (8003770 <HAL_DMA_Init+0x440>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_DMA_Init+0x444>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_Init+0x38a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a30      	ldr	r2, [pc, #192]	; (8003778 <HAL_DMA_Init+0x448>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_DMA_Init+0x38e>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_DMA_Init+0x390>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8097 	beq.w	80037f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a24      	ldr	r2, [pc, #144]	; (800375c <HAL_DMA_Init+0x42c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d021      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_DMA_Init+0x430>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01c      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a21      	ldr	r2, [pc, #132]	; (8003764 <HAL_DMA_Init+0x434>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d017      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_DMA_Init+0x438>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d012      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1e      	ldr	r2, [pc, #120]	; (800376c <HAL_DMA_Init+0x43c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00d      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <HAL_DMA_Init+0x440>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d008      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <HAL_DMA_Init+0x444>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <HAL_DMA_Init+0x3e4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_DMA_Init+0x448>)
 8003712:	4293      	cmp	r3, r2
 8003714:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_DMA_Init+0x44c>)
 8003732:	4013      	ands	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d020      	beq.n	8003780 <HAL_DMA_Init+0x450>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b80      	cmp	r3, #128	; 0x80
 8003744:	d102      	bne.n	800374c <HAL_DMA_Init+0x41c>
 8003746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800374a:	e01a      	b.n	8003782 <HAL_DMA_Init+0x452>
 800374c:	2300      	movs	r3, #0
 800374e:	e018      	b.n	8003782 <HAL_DMA_Init+0x452>
 8003750:	fe10803f 	.word	0xfe10803f
 8003754:	5c001000 	.word	0x5c001000
 8003758:	ffff0000 	.word	0xffff0000
 800375c:	58025408 	.word	0x58025408
 8003760:	5802541c 	.word	0x5802541c
 8003764:	58025430 	.word	0x58025430
 8003768:	58025444 	.word	0x58025444
 800376c:	58025458 	.word	0x58025458
 8003770:	5802546c 	.word	0x5802546c
 8003774:	58025480 	.word	0x58025480
 8003778:	58025494 	.word	0x58025494
 800377c:	fffe000f 	.word	0xfffe000f
 8003780:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68d2      	ldr	r2, [r2, #12]
 8003786:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b6e      	ldr	r3, [pc, #440]	; (8003980 <HAL_DMA_Init+0x650>)
 80037c8:	4413      	add	r3, r2
 80037ca:	4a6e      	ldr	r2, [pc, #440]	; (8003984 <HAL_DMA_Init+0x654>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f002 f9a9 	bl	8005b30 <DMA_CalcBaseAndBitshift>
 80037de:	4603      	mov	r3, r0
 80037e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2201      	movs	r2, #1
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e008      	b.n	8003806 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2203      	movs	r2, #3
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0b7      	b.n	8003976 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5f      	ldr	r2, [pc, #380]	; (8003988 <HAL_DMA_Init+0x658>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d072      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a5d      	ldr	r2, [pc, #372]	; (800398c <HAL_DMA_Init+0x65c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d06d      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5c      	ldr	r2, [pc, #368]	; (8003990 <HAL_DMA_Init+0x660>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d068      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5a      	ldr	r2, [pc, #360]	; (8003994 <HAL_DMA_Init+0x664>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d063      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a59      	ldr	r2, [pc, #356]	; (8003998 <HAL_DMA_Init+0x668>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d05e      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_DMA_Init+0x66c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d059      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_DMA_Init+0x670>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d054      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_DMA_Init+0x674>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d04f      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a53      	ldr	r2, [pc, #332]	; (80039a8 <HAL_DMA_Init+0x678>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d04a      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a51      	ldr	r2, [pc, #324]	; (80039ac <HAL_DMA_Init+0x67c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d045      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a50      	ldr	r2, [pc, #320]	; (80039b0 <HAL_DMA_Init+0x680>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d040      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4e      	ldr	r2, [pc, #312]	; (80039b4 <HAL_DMA_Init+0x684>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d03b      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a4d      	ldr	r2, [pc, #308]	; (80039b8 <HAL_DMA_Init+0x688>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d036      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a4b      	ldr	r2, [pc, #300]	; (80039bc <HAL_DMA_Init+0x68c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d031      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <HAL_DMA_Init+0x690>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d02c      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <HAL_DMA_Init+0x694>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d027      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <HAL_DMA_Init+0x698>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a45      	ldr	r2, [pc, #276]	; (80039cc <HAL_DMA_Init+0x69c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a44      	ldr	r2, [pc, #272]	; (80039d0 <HAL_DMA_Init+0x6a0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a42      	ldr	r2, [pc, #264]	; (80039d4 <HAL_DMA_Init+0x6a4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a41      	ldr	r2, [pc, #260]	; (80039d8 <HAL_DMA_Init+0x6a8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <HAL_DMA_Init+0x6ac>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3e      	ldr	r2, [pc, #248]	; (80039e0 <HAL_DMA_Init+0x6b0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_DMA_Init+0x5c6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <HAL_DMA_Init+0x6b4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_Init+0x5ca>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_DMA_Init+0x5cc>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d032      	beq.n	8003966 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f002 fa43 	bl	8005d8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d102      	bne.n	8003914 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003928:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_DMA_Init+0x624>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d80c      	bhi.n	8003954 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f002 fac0 	bl	8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e008      	b.n	8003966 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	a7fdabf8 	.word	0xa7fdabf8
 8003984:	cccccccd 	.word	0xcccccccd
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8
 80039c8:	58025408 	.word	0x58025408
 80039cc:	5802541c 	.word	0x5802541c
 80039d0:	58025430 	.word	0x58025430
 80039d4:	58025444 	.word	0x58025444
 80039d8:	58025458 	.word	0x58025458
 80039dc:	5802546c 	.word	0x5802546c
 80039e0:	58025480 	.word	0x58025480
 80039e4:	58025494 	.word	0x58025494

080039e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e226      	b.n	8003e52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Start_IT+0x2a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e21f      	b.n	8003e52 <HAL_DMA_Start_IT+0x46a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	f040 820a 	bne.w	8003e3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a68      	ldr	r2, [pc, #416]	; (8003bdc <HAL_DMA_Start_IT+0x1f4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04a      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_DMA_Start_IT+0x1f8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d045      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <HAL_DMA_Start_IT+0x1fc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d040      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_DMA_Start_IT+0x200>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a62      	ldr	r2, [pc, #392]	; (8003bec <HAL_DMA_Start_IT+0x204>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d036      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_DMA_Start_IT+0x208>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5f      	ldr	r2, [pc, #380]	; (8003bf4 <HAL_DMA_Start_IT+0x20c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d02c      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a5d      	ldr	r2, [pc, #372]	; (8003bf8 <HAL_DMA_Start_IT+0x210>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d027      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5c      	ldr	r2, [pc, #368]	; (8003bfc <HAL_DMA_Start_IT+0x214>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_DMA_Start_IT+0x218>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01d      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a59      	ldr	r2, [pc, #356]	; (8003c04 <HAL_DMA_Start_IT+0x21c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a57      	ldr	r2, [pc, #348]	; (8003c08 <HAL_DMA_Start_IT+0x220>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a56      	ldr	r2, [pc, #344]	; (8003c0c <HAL_DMA_Start_IT+0x224>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a54      	ldr	r2, [pc, #336]	; (8003c10 <HAL_DMA_Start_IT+0x228>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a53      	ldr	r2, [pc, #332]	; (8003c14 <HAL_DMA_Start_IT+0x22c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_Start_IT+0xee>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_DMA_Start_IT+0x230>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_Start_IT+0x100>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e007      	b.n	8003af8 <HAL_DMA_Start_IT+0x110>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f001 fe6a 	bl	80057d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <HAL_DMA_Start_IT+0x1f4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <HAL_DMA_Start_IT+0x1f8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a31      	ldr	r2, [pc, #196]	; (8003be4 <HAL_DMA_Start_IT+0x1fc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_DMA_Start_IT+0x200>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <HAL_DMA_Start_IT+0x204>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_DMA_Start_IT+0x208>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <HAL_DMA_Start_IT+0x20c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <HAL_DMA_Start_IT+0x210>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_DMA_Start_IT+0x214>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <HAL_DMA_Start_IT+0x218>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <HAL_DMA_Start_IT+0x21c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_DMA_Start_IT+0x220>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_DMA_Start_IT+0x224>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_DMA_Start_IT+0x228>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_DMA_Start_IT+0x22c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_DMA_Start_IT+0x230>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_DMA_Start_IT+0x1c0>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_DMA_Start_IT+0x1c2>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d036      	beq.n	8003c1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 021e 	bic.w	r2, r3, #30
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0216 	orr.w	r2, r2, #22
 8003bc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03e      	beq.n	8003c48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0208 	orr.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e035      	b.n	8003c48 <HAL_DMA_Start_IT+0x260>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 020e 	bic.w	r2, r3, #14
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 020a 	orr.w	r2, r2, #10
 8003c2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0204 	orr.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a83      	ldr	r2, [pc, #524]	; (8003e5c <HAL_DMA_Start_IT+0x474>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d072      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a82      	ldr	r2, [pc, #520]	; (8003e60 <HAL_DMA_Start_IT+0x478>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d06d      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a80      	ldr	r2, [pc, #512]	; (8003e64 <HAL_DMA_Start_IT+0x47c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d068      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7f      	ldr	r2, [pc, #508]	; (8003e68 <HAL_DMA_Start_IT+0x480>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d063      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7d      	ldr	r2, [pc, #500]	; (8003e6c <HAL_DMA_Start_IT+0x484>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d05e      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	; (8003e70 <HAL_DMA_Start_IT+0x488>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d059      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7a      	ldr	r2, [pc, #488]	; (8003e74 <HAL_DMA_Start_IT+0x48c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d054      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a79      	ldr	r2, [pc, #484]	; (8003e78 <HAL_DMA_Start_IT+0x490>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04f      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_DMA_Start_IT+0x494>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d04a      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_DMA_Start_IT+0x498>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d045      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	; (8003e84 <HAL_DMA_Start_IT+0x49c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d040      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	; (8003e88 <HAL_DMA_Start_IT+0x4a0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d03b      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_DMA_Start_IT+0x4a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d036      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_DMA_Start_IT+0x4a8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d031      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_DMA_Start_IT+0x4ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02c      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_DMA_Start_IT+0x4b0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d027      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	; (8003e9c <HAL_DMA_Start_IT+0x4b4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d022      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_DMA_Start_IT+0x4b8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d01d      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <HAL_DMA_Start_IT+0x4bc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d018      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a67      	ldr	r2, [pc, #412]	; (8003ea8 <HAL_DMA_Start_IT+0x4c0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a65      	ldr	r2, [pc, #404]	; (8003eac <HAL_DMA_Start_IT+0x4c4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a64      	ldr	r2, [pc, #400]	; (8003eb0 <HAL_DMA_Start_IT+0x4c8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d009      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a62      	ldr	r2, [pc, #392]	; (8003eb4 <HAL_DMA_Start_IT+0x4cc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <HAL_DMA_Start_IT+0x4d0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_DMA_Start_IT+0x354>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_DMA_Start_IT+0x356>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <HAL_DMA_Start_IT+0x474>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d04a      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <HAL_DMA_Start_IT+0x478>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d045      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <HAL_DMA_Start_IT+0x47c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d040      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <HAL_DMA_Start_IT+0x480>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d03b      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_DMA_Start_IT+0x484>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d036      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_DMA_Start_IT+0x488>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d031      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2e      	ldr	r2, [pc, #184]	; (8003e74 <HAL_DMA_Start_IT+0x48c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02c      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <HAL_DMA_Start_IT+0x490>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d027      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <HAL_DMA_Start_IT+0x494>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2a      	ldr	r2, [pc, #168]	; (8003e80 <HAL_DMA_Start_IT+0x498>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d01d      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_DMA_Start_IT+0x49c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <HAL_DMA_Start_IT+0x4a0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a25      	ldr	r2, [pc, #148]	; (8003e8c <HAL_DMA_Start_IT+0x4a4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <HAL_DMA_Start_IT+0x4a8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <HAL_DMA_Start_IT+0x4ac>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_DMA_Start_IT+0x430>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_DMA_Start_IT+0x4b0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <HAL_DMA_Start_IT+0x442>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e012      	b.n	8003e50 <HAL_DMA_Start_IT+0x468>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e009      	b.n	8003e50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8
 8003e9c:	58025408 	.word	0x58025408
 8003ea0:	5802541c 	.word	0x5802541c
 8003ea4:	58025430 	.word	0x58025430
 8003ea8:	58025444 	.word	0x58025444
 8003eac:	58025458 	.word	0x58025458
 8003eb0:	5802546c 	.word	0x5802546c
 8003eb4:	58025480 	.word	0x58025480
 8003eb8:	58025494 	.word	0x58025494

08003ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7fe fde0 	bl	8002a88 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e2dc      	b.n	800448e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d008      	beq.n	8003ef2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e2cd      	b.n	800448e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a76      	ldr	r2, [pc, #472]	; (80040d0 <HAL_DMA_Abort+0x214>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d04a      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_DMA_Abort+0x218>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d045      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a73      	ldr	r2, [pc, #460]	; (80040d8 <HAL_DMA_Abort+0x21c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d040      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_DMA_Abort+0x220>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d03b      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_DMA_Abort+0x224>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d036      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_DMA_Abort+0x228>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d031      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6d      	ldr	r2, [pc, #436]	; (80040e8 <HAL_DMA_Abort+0x22c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d02c      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6b      	ldr	r2, [pc, #428]	; (80040ec <HAL_DMA_Abort+0x230>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d027      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <HAL_DMA_Abort+0x234>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a68      	ldr	r2, [pc, #416]	; (80040f4 <HAL_DMA_Abort+0x238>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_DMA_Abort+0x23c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d018      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_DMA_Abort+0x240>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d013      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a64      	ldr	r2, [pc, #400]	; (8004100 <HAL_DMA_Abort+0x244>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a62      	ldr	r2, [pc, #392]	; (8004104 <HAL_DMA_Abort+0x248>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a61      	ldr	r2, [pc, #388]	; (8004108 <HAL_DMA_Abort+0x24c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_DMA_Abort+0xd6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a5f      	ldr	r2, [pc, #380]	; (800410c <HAL_DMA_Abort+0x250>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_DMA_Abort+0xda>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_DMA_Abort+0xdc>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 021e 	bic.w	r2, r2, #30
 8003faa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e00a      	b.n	8003fda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 020e 	bic.w	r2, r2, #14
 8003fd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <HAL_DMA_Abort+0x214>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d072      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a3a      	ldr	r2, [pc, #232]	; (80040d4 <HAL_DMA_Abort+0x218>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d06d      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a39      	ldr	r2, [pc, #228]	; (80040d8 <HAL_DMA_Abort+0x21c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d068      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a37      	ldr	r2, [pc, #220]	; (80040dc <HAL_DMA_Abort+0x220>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d063      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a36      	ldr	r2, [pc, #216]	; (80040e0 <HAL_DMA_Abort+0x224>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d05e      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a34      	ldr	r2, [pc, #208]	; (80040e4 <HAL_DMA_Abort+0x228>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d059      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a33      	ldr	r2, [pc, #204]	; (80040e8 <HAL_DMA_Abort+0x22c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d054      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a31      	ldr	r2, [pc, #196]	; (80040ec <HAL_DMA_Abort+0x230>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d04f      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_DMA_Abort+0x234>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d04a      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a2e      	ldr	r2, [pc, #184]	; (80040f4 <HAL_DMA_Abort+0x238>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d045      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <HAL_DMA_Abort+0x23c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d040      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <HAL_DMA_Abort+0x240>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d03b      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <HAL_DMA_Abort+0x244>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d036      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <HAL_DMA_Abort+0x248>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d031      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a27      	ldr	r2, [pc, #156]	; (8004108 <HAL_DMA_Abort+0x24c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d02c      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <HAL_DMA_Abort+0x250>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d027      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a24      	ldr	r2, [pc, #144]	; (8004110 <HAL_DMA_Abort+0x254>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a22      	ldr	r2, [pc, #136]	; (8004114 <HAL_DMA_Abort+0x258>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01d      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a21      	ldr	r2, [pc, #132]	; (8004118 <HAL_DMA_Abort+0x25c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d018      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_DMA_Abort+0x260>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_DMA_Abort+0x264>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_DMA_Abort+0x268>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_DMA_Abort+0x26c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_DMA_Abort+0x20e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_DMA_Abort+0x270>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d132      	bne.n	8004130 <HAL_DMA_Abort+0x274>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e031      	b.n	8004132 <HAL_DMA_Abort+0x276>
 80040ce:	bf00      	nop
 80040d0:	40020010 	.word	0x40020010
 80040d4:	40020028 	.word	0x40020028
 80040d8:	40020040 	.word	0x40020040
 80040dc:	40020058 	.word	0x40020058
 80040e0:	40020070 	.word	0x40020070
 80040e4:	40020088 	.word	0x40020088
 80040e8:	400200a0 	.word	0x400200a0
 80040ec:	400200b8 	.word	0x400200b8
 80040f0:	40020410 	.word	0x40020410
 80040f4:	40020428 	.word	0x40020428
 80040f8:	40020440 	.word	0x40020440
 80040fc:	40020458 	.word	0x40020458
 8004100:	40020470 	.word	0x40020470
 8004104:	40020488 	.word	0x40020488
 8004108:	400204a0 	.word	0x400204a0
 800410c:	400204b8 	.word	0x400204b8
 8004110:	58025408 	.word	0x58025408
 8004114:	5802541c 	.word	0x5802541c
 8004118:	58025430 	.word	0x58025430
 800411c:	58025444 	.word	0x58025444
 8004120:	58025458 	.word	0x58025458
 8004124:	5802546c 	.word	0x5802546c
 8004128:	58025480 	.word	0x58025480
 800412c:	58025494 	.word	0x58025494
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004144:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6d      	ldr	r2, [pc, #436]	; (8004300 <HAL_DMA_Abort+0x444>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04a      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	; (8004304 <HAL_DMA_Abort+0x448>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d045      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6a      	ldr	r2, [pc, #424]	; (8004308 <HAL_DMA_Abort+0x44c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d040      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a68      	ldr	r2, [pc, #416]	; (800430c <HAL_DMA_Abort+0x450>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a67      	ldr	r2, [pc, #412]	; (8004310 <HAL_DMA_Abort+0x454>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d036      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a65      	ldr	r2, [pc, #404]	; (8004314 <HAL_DMA_Abort+0x458>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a64      	ldr	r2, [pc, #400]	; (8004318 <HAL_DMA_Abort+0x45c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d02c      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a62      	ldr	r2, [pc, #392]	; (800431c <HAL_DMA_Abort+0x460>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d027      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a61      	ldr	r2, [pc, #388]	; (8004320 <HAL_DMA_Abort+0x464>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5f      	ldr	r2, [pc, #380]	; (8004324 <HAL_DMA_Abort+0x468>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5e      	ldr	r2, [pc, #376]	; (8004328 <HAL_DMA_Abort+0x46c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5c      	ldr	r2, [pc, #368]	; (800432c <HAL_DMA_Abort+0x470>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a5b      	ldr	r2, [pc, #364]	; (8004330 <HAL_DMA_Abort+0x474>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a59      	ldr	r2, [pc, #356]	; (8004334 <HAL_DMA_Abort+0x478>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a58      	ldr	r2, [pc, #352]	; (8004338 <HAL_DMA_Abort+0x47c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_DMA_Abort+0x32a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a56      	ldr	r2, [pc, #344]	; (800433c <HAL_DMA_Abort+0x480>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <HAL_DMA_Abort+0x33c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <HAL_DMA_Abort+0x34c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004208:	e013      	b.n	8004232 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800420a:	f7fe fc3d 	bl	8002a88 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b05      	cmp	r3, #5
 8004216:	d90c      	bls.n	8004232 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2203      	movs	r2, #3
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e12d      	b.n	800448e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <HAL_DMA_Abort+0x444>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d04a      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <HAL_DMA_Abort+0x448>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d045      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <HAL_DMA_Abort+0x44c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d040      	beq.n	80042de <HAL_DMA_Abort+0x422>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <HAL_DMA_Abort+0x450>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d03b      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a29      	ldr	r2, [pc, #164]	; (8004310 <HAL_DMA_Abort+0x454>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d036      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a27      	ldr	r2, [pc, #156]	; (8004314 <HAL_DMA_Abort+0x458>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d031      	beq.n	80042de <HAL_DMA_Abort+0x422>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <HAL_DMA_Abort+0x45c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d02c      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <HAL_DMA_Abort+0x460>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d027      	beq.n	80042de <HAL_DMA_Abort+0x422>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a23      	ldr	r2, [pc, #140]	; (8004320 <HAL_DMA_Abort+0x464>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d022      	beq.n	80042de <HAL_DMA_Abort+0x422>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a21      	ldr	r2, [pc, #132]	; (8004324 <HAL_DMA_Abort+0x468>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01d      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a20      	ldr	r2, [pc, #128]	; (8004328 <HAL_DMA_Abort+0x46c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d018      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_DMA_Abort+0x470>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d013      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_DMA_Abort+0x474>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00e      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_DMA_Abort+0x478>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_DMA_Abort+0x47c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d004      	beq.n	80042de <HAL_DMA_Abort+0x422>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_DMA_Abort+0x480>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_DMA_Abort+0x426>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_DMA_Abort+0x428>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02b      	beq.n	8004340 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	223f      	movs	r2, #63	; 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	e02a      	b.n	8004356 <HAL_DMA_Abort+0x49a>
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2201      	movs	r2, #1
 8004350:	409a      	lsls	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a4f      	ldr	r2, [pc, #316]	; (8004498 <HAL_DMA_Abort+0x5dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d072      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a4d      	ldr	r2, [pc, #308]	; (800449c <HAL_DMA_Abort+0x5e0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d06d      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a4c      	ldr	r2, [pc, #304]	; (80044a0 <HAL_DMA_Abort+0x5e4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d068      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4a      	ldr	r2, [pc, #296]	; (80044a4 <HAL_DMA_Abort+0x5e8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d063      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a49      	ldr	r2, [pc, #292]	; (80044a8 <HAL_DMA_Abort+0x5ec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d05e      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a47      	ldr	r2, [pc, #284]	; (80044ac <HAL_DMA_Abort+0x5f0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d059      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a46      	ldr	r2, [pc, #280]	; (80044b0 <HAL_DMA_Abort+0x5f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d054      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <HAL_DMA_Abort+0x5f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04f      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a43      	ldr	r2, [pc, #268]	; (80044b8 <HAL_DMA_Abort+0x5fc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d04a      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a41      	ldr	r2, [pc, #260]	; (80044bc <HAL_DMA_Abort+0x600>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d045      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a40      	ldr	r2, [pc, #256]	; (80044c0 <HAL_DMA_Abort+0x604>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d040      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <HAL_DMA_Abort+0x608>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d03b      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <HAL_DMA_Abort+0x60c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d036      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3b      	ldr	r2, [pc, #236]	; (80044cc <HAL_DMA_Abort+0x610>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d031      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3a      	ldr	r2, [pc, #232]	; (80044d0 <HAL_DMA_Abort+0x614>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d02c      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <HAL_DMA_Abort+0x618>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d027      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a37      	ldr	r2, [pc, #220]	; (80044d8 <HAL_DMA_Abort+0x61c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a35      	ldr	r2, [pc, #212]	; (80044dc <HAL_DMA_Abort+0x620>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a34      	ldr	r2, [pc, #208]	; (80044e0 <HAL_DMA_Abort+0x624>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <HAL_DMA_Abort+0x628>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <HAL_DMA_Abort+0x62c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <HAL_DMA_Abort+0x630>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2e      	ldr	r2, [pc, #184]	; (80044f0 <HAL_DMA_Abort+0x634>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_Abort+0x58a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <HAL_DMA_Abort+0x638>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_DMA_Abort+0x58e>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_DMA_Abort+0x590>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004458:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004470:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800447a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494

080044f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e237      	b.n	800497a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d004      	beq.n	8004520 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e22c      	b.n	800497a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <HAL_DMA_Abort_IT+0x1a0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d04a      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5b      	ldr	r2, [pc, #364]	; (800469c <HAL_DMA_Abort_IT+0x1a4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d045      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a59      	ldr	r2, [pc, #356]	; (80046a0 <HAL_DMA_Abort_IT+0x1a8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d040      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_DMA_Abort_IT+0x1ac>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d03b      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <HAL_DMA_Abort_IT+0x1b0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d036      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a55      	ldr	r2, [pc, #340]	; (80046ac <HAL_DMA_Abort_IT+0x1b4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d031      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a53      	ldr	r2, [pc, #332]	; (80046b0 <HAL_DMA_Abort_IT+0x1b8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02c      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_DMA_Abort_IT+0x1bc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d027      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a50      	ldr	r2, [pc, #320]	; (80046b8 <HAL_DMA_Abort_IT+0x1c0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d022      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4f      	ldr	r2, [pc, #316]	; (80046bc <HAL_DMA_Abort_IT+0x1c4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d01d      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a4d      	ldr	r2, [pc, #308]	; (80046c0 <HAL_DMA_Abort_IT+0x1c8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d018      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4c      	ldr	r2, [pc, #304]	; (80046c4 <HAL_DMA_Abort_IT+0x1cc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d013      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a4a      	ldr	r2, [pc, #296]	; (80046c8 <HAL_DMA_Abort_IT+0x1d0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00e      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a49      	ldr	r2, [pc, #292]	; (80046cc <HAL_DMA_Abort_IT+0x1d4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a47      	ldr	r2, [pc, #284]	; (80046d0 <HAL_DMA_Abort_IT+0x1d8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d004      	beq.n	80045c0 <HAL_DMA_Abort_IT+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a46      	ldr	r2, [pc, #280]	; (80046d4 <HAL_DMA_Abort_IT+0x1dc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_DMA_Abort_IT+0xcc>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <HAL_DMA_Abort_IT+0xce>
 80045c4:	2300      	movs	r3, #0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8086 	beq.w	80046d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2204      	movs	r2, #4
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <HAL_DMA_Abort_IT+0x1a0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d04a      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2e      	ldr	r2, [pc, #184]	; (800469c <HAL_DMA_Abort_IT+0x1a4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d045      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <HAL_DMA_Abort_IT+0x1a8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d040      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <HAL_DMA_Abort_IT+0x1ac>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d03b      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_DMA_Abort_IT+0x1b0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d036      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a28      	ldr	r2, [pc, #160]	; (80046ac <HAL_DMA_Abort_IT+0x1b4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d031      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <HAL_DMA_Abort_IT+0x1b8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d02c      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <HAL_DMA_Abort_IT+0x1bc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d027      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_DMA_Abort_IT+0x1c0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a22      	ldr	r2, [pc, #136]	; (80046bc <HAL_DMA_Abort_IT+0x1c4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d01d      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_DMA_Abort_IT+0x1c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <HAL_DMA_Abort_IT+0x1cc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <HAL_DMA_Abort_IT+0x1d0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <HAL_DMA_Abort_IT+0x1d4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <HAL_DMA_Abort_IT+0x1d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_DMA_Abort_IT+0x17c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	; (80046d4 <HAL_DMA_Abort_IT+0x1dc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <HAL_DMA_Abort_IT+0x18e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	e178      	b.n	8004978 <HAL_DMA_Abort_IT+0x480>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e16f      	b.n	8004978 <HAL_DMA_Abort_IT+0x480>
 8004698:	40020010 	.word	0x40020010
 800469c:	40020028 	.word	0x40020028
 80046a0:	40020040 	.word	0x40020040
 80046a4:	40020058 	.word	0x40020058
 80046a8:	40020070 	.word	0x40020070
 80046ac:	40020088 	.word	0x40020088
 80046b0:	400200a0 	.word	0x400200a0
 80046b4:	400200b8 	.word	0x400200b8
 80046b8:	40020410 	.word	0x40020410
 80046bc:	40020428 	.word	0x40020428
 80046c0:	40020440 	.word	0x40020440
 80046c4:	40020458 	.word	0x40020458
 80046c8:	40020470 	.word	0x40020470
 80046cc:	40020488 	.word	0x40020488
 80046d0:	400204a0 	.word	0x400204a0
 80046d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 020e 	bic.w	r2, r2, #14
 80046e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <HAL_DMA_Abort_IT+0x3a8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a6b      	ldr	r2, [pc, #428]	; (80048a4 <HAL_DMA_Abort_IT+0x3ac>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a69      	ldr	r2, [pc, #420]	; (80048a8 <HAL_DMA_Abort_IT+0x3b0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_DMA_Abort_IT+0x3b4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a66      	ldr	r2, [pc, #408]	; (80048b0 <HAL_DMA_Abort_IT+0x3b8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <HAL_DMA_Abort_IT+0x3bc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a63      	ldr	r2, [pc, #396]	; (80048b8 <HAL_DMA_Abort_IT+0x3c0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a62      	ldr	r2, [pc, #392]	; (80048bc <HAL_DMA_Abort_IT+0x3c4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a60      	ldr	r2, [pc, #384]	; (80048c0 <HAL_DMA_Abort_IT+0x3c8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a5f      	ldr	r2, [pc, #380]	; (80048c4 <HAL_DMA_Abort_IT+0x3cc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5d      	ldr	r2, [pc, #372]	; (80048c8 <HAL_DMA_Abort_IT+0x3d0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5c      	ldr	r2, [pc, #368]	; (80048cc <HAL_DMA_Abort_IT+0x3d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5a      	ldr	r2, [pc, #360]	; (80048d0 <HAL_DMA_Abort_IT+0x3d8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a59      	ldr	r2, [pc, #356]	; (80048d4 <HAL_DMA_Abort_IT+0x3dc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a57      	ldr	r2, [pc, #348]	; (80048d8 <HAL_DMA_Abort_IT+0x3e0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_DMA_Abort_IT+0x290>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a56      	ldr	r2, [pc, #344]	; (80048dc <HAL_DMA_Abort_IT+0x3e4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <HAL_DMA_Abort_IT+0x2a2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_DMA_Abort_IT+0x2b2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3c      	ldr	r2, [pc, #240]	; (80048a0 <HAL_DMA_Abort_IT+0x3a8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d072      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_DMA_Abort_IT+0x3ac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d06d      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a39      	ldr	r2, [pc, #228]	; (80048a8 <HAL_DMA_Abort_IT+0x3b0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d068      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a37      	ldr	r2, [pc, #220]	; (80048ac <HAL_DMA_Abort_IT+0x3b4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d063      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <HAL_DMA_Abort_IT+0x3b8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d05e      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_DMA_Abort_IT+0x3bc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d059      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a33      	ldr	r2, [pc, #204]	; (80048b8 <HAL_DMA_Abort_IT+0x3c0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d054      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_DMA_Abort_IT+0x3c4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04f      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <HAL_DMA_Abort_IT+0x3c8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d04a      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2e      	ldr	r2, [pc, #184]	; (80048c4 <HAL_DMA_Abort_IT+0x3cc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d045      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <HAL_DMA_Abort_IT+0x3d0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d040      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <HAL_DMA_Abort_IT+0x3d4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d03b      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <HAL_DMA_Abort_IT+0x3d8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d036      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a28      	ldr	r2, [pc, #160]	; (80048d4 <HAL_DMA_Abort_IT+0x3dc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d031      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a27      	ldr	r2, [pc, #156]	; (80048d8 <HAL_DMA_Abort_IT+0x3e0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d02c      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <HAL_DMA_Abort_IT+0x3e4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d027      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_DMA_Abort_IT+0x3e8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <HAL_DMA_Abort_IT+0x3ec>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01d      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <HAL_DMA_Abort_IT+0x3f0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <HAL_DMA_Abort_IT+0x3f4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_DMA_Abort_IT+0x3f8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <HAL_DMA_Abort_IT+0x3fc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <HAL_DMA_Abort_IT+0x400>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_DMA_Abort_IT+0x3a2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_DMA_Abort_IT+0x404>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d132      	bne.n	8004900 <HAL_DMA_Abort_IT+0x408>
 800489a:	2301      	movs	r3, #1
 800489c:	e031      	b.n	8004902 <HAL_DMA_Abort_IT+0x40a>
 800489e:	bf00      	nop
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8
 80048e0:	58025408 	.word	0x58025408
 80048e4:	5802541c 	.word	0x5802541c
 80048e8:	58025430 	.word	0x58025430
 80048ec:	58025444 	.word	0x58025444
 80048f0:	58025458 	.word	0x58025458
 80048f4:	5802546c 	.word	0x5802546c
 80048f8:	58025480 	.word	0x58025480
 80048fc:	58025494 	.word	0x58025494
 8004900:	2300      	movs	r3, #0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d028      	beq.n	8004958 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004934:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800494c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004956:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop

08004984 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004990:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <HAL_DMA_IRQHandler+0x1ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a67      	ldr	r2, [pc, #412]	; (8004b34 <HAL_DMA_IRQHandler+0x1b0>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	0a9b      	lsrs	r3, r3, #10
 800499c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5f      	ldr	r2, [pc, #380]	; (8004b38 <HAL_DMA_IRQHandler+0x1b4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5d      	ldr	r2, [pc, #372]	; (8004b3c <HAL_DMA_IRQHandler+0x1b8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5c      	ldr	r2, [pc, #368]	; (8004b40 <HAL_DMA_IRQHandler+0x1bc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <HAL_DMA_IRQHandler+0x1c0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a59      	ldr	r2, [pc, #356]	; (8004b48 <HAL_DMA_IRQHandler+0x1c4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a57      	ldr	r2, [pc, #348]	; (8004b4c <HAL_DMA_IRQHandler+0x1c8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a56      	ldr	r2, [pc, #344]	; (8004b50 <HAL_DMA_IRQHandler+0x1cc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a54      	ldr	r2, [pc, #336]	; (8004b54 <HAL_DMA_IRQHandler+0x1d0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a53      	ldr	r2, [pc, #332]	; (8004b58 <HAL_DMA_IRQHandler+0x1d4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_DMA_IRQHandler+0x1d8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a50      	ldr	r2, [pc, #320]	; (8004b60 <HAL_DMA_IRQHandler+0x1dc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4e      	ldr	r2, [pc, #312]	; (8004b64 <HAL_DMA_IRQHandler+0x1e0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4d      	ldr	r2, [pc, #308]	; (8004b68 <HAL_DMA_IRQHandler+0x1e4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <HAL_DMA_IRQHandler+0x1e8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a4a      	ldr	r2, [pc, #296]	; (8004b70 <HAL_DMA_IRQHandler+0x1ec>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xd2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a48      	ldr	r2, [pc, #288]	; (8004b74 <HAL_DMA_IRQHandler+0x1f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_DMA_IRQHandler+0xd6>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_DMA_IRQHandler+0xd8>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 842b 	beq.w	80052b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2208      	movs	r2, #8
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a2 	beq.w	8004bbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2e      	ldr	r2, [pc, #184]	; (8004b38 <HAL_DMA_IRQHandler+0x1b4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d04a      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <HAL_DMA_IRQHandler+0x1b8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d045      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_DMA_IRQHandler+0x1bc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d040      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <HAL_DMA_IRQHandler+0x1c0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d03b      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_DMA_IRQHandler+0x1c4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d036      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_DMA_IRQHandler+0x1c8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d031      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_DMA_IRQHandler+0x1cc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02c      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <HAL_DMA_IRQHandler+0x1d0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d027      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_DMA_IRQHandler+0x1d4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d022      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_DMA_IRQHandler+0x1d8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d01d      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <HAL_DMA_IRQHandler+0x1dc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d018      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <HAL_DMA_IRQHandler+0x1e0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_DMA_IRQHandler+0x1e4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1b      	ldr	r2, [pc, #108]	; (8004b6c <HAL_DMA_IRQHandler+0x1e8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <HAL_DMA_IRQHandler+0x1ec>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x194>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_DMA_IRQHandler+0x1f0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d12f      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x1f4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e02e      	b.n	8004b8c <HAL_DMA_IRQHandler+0x208>
 8004b2e:	bf00      	nop
 8004b30:	24000030 	.word	0x24000030
 8004b34:	1b4e81b5 	.word	0x1b4e81b5
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0204 	bic.w	r2, r2, #4
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2208      	movs	r2, #8
 8004baa:	409a      	lsls	r2, r3
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f043 0201 	orr.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d06e      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a69      	ldr	r2, [pc, #420]	; (8004d7c <HAL_DMA_IRQHandler+0x3f8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04a      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <HAL_DMA_IRQHandler+0x3fc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d045      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_DMA_IRQHandler+0x400>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d040      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <HAL_DMA_IRQHandler+0x404>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d03b      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a63      	ldr	r2, [pc, #396]	; (8004d8c <HAL_DMA_IRQHandler+0x408>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d036      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a61      	ldr	r2, [pc, #388]	; (8004d90 <HAL_DMA_IRQHandler+0x40c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_DMA_IRQHandler+0x410>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d02c      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5e      	ldr	r2, [pc, #376]	; (8004d98 <HAL_DMA_IRQHandler+0x414>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_DMA_IRQHandler+0x418>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5b      	ldr	r2, [pc, #364]	; (8004da0 <HAL_DMA_IRQHandler+0x41c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a5a      	ldr	r2, [pc, #360]	; (8004da4 <HAL_DMA_IRQHandler+0x420>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a58      	ldr	r2, [pc, #352]	; (8004da8 <HAL_DMA_IRQHandler+0x424>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a57      	ldr	r2, [pc, #348]	; (8004dac <HAL_DMA_IRQHandler+0x428>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a55      	ldr	r2, [pc, #340]	; (8004db0 <HAL_DMA_IRQHandler+0x42c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a54      	ldr	r2, [pc, #336]	; (8004db4 <HAL_DMA_IRQHandler+0x430>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x2ee>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_DMA_IRQHandler+0x434>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10a      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x304>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e003      	b.n	8004c90 <HAL_DMA_IRQHandler+0x30c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	2204      	movs	r2, #4
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808f 	beq.w	8004de4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2c      	ldr	r2, [pc, #176]	; (8004d7c <HAL_DMA_IRQHandler+0x3f8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d04a      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <HAL_DMA_IRQHandler+0x3fc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d045      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <HAL_DMA_IRQHandler+0x400>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d040      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a27      	ldr	r2, [pc, #156]	; (8004d88 <HAL_DMA_IRQHandler+0x404>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d03b      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <HAL_DMA_IRQHandler+0x408>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d036      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	; (8004d90 <HAL_DMA_IRQHandler+0x40c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d031      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <HAL_DMA_IRQHandler+0x410>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d02c      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_DMA_IRQHandler+0x414>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d027      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_DMA_IRQHandler+0x418>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d022      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <HAL_DMA_IRQHandler+0x41c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01d      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_DMA_IRQHandler+0x420>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d018      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_DMA_IRQHandler+0x424>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <HAL_DMA_IRQHandler+0x428>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <HAL_DMA_IRQHandler+0x42c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_DMA_IRQHandler+0x430>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x3e2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <HAL_DMA_IRQHandler+0x434>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d12a      	bne.n	8004dbc <HAL_DMA_IRQHandler+0x438>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf14      	ite	ne
 8004d74:	2301      	movne	r3, #1
 8004d76:	2300      	moveq	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e023      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x440>
 8004d7c:	40020010 	.word	0x40020010
 8004d80:	40020028 	.word	0x40020028
 8004d84:	40020040 	.word	0x40020040
 8004d88:	40020058 	.word	0x40020058
 8004d8c:	40020070 	.word	0x40020070
 8004d90:	40020088 	.word	0x40020088
 8004d94:	400200a0 	.word	0x400200a0
 8004d98:	400200b8 	.word	0x400200b8
 8004d9c:	40020410 	.word	0x40020410
 8004da0:	40020428 	.word	0x40020428
 8004da4:	40020440 	.word	0x40020440
 8004da8:	40020458 	.word	0x40020458
 8004dac:	40020470 	.word	0x40020470
 8004db0:	40020488 	.word	0x40020488
 8004db4:	400204a0 	.word	0x400204a0
 8004db8:	400204b8 	.word	0x400204b8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	f043 0204 	orr.w	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	2210      	movs	r2, #16
 8004dee:	409a      	lsls	r2, r3
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a6 	beq.w	8004f46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a85      	ldr	r2, [pc, #532]	; (8005014 <HAL_DMA_IRQHandler+0x690>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d04a      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a83      	ldr	r2, [pc, #524]	; (8005018 <HAL_DMA_IRQHandler+0x694>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d045      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a82      	ldr	r2, [pc, #520]	; (800501c <HAL_DMA_IRQHandler+0x698>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d040      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a80      	ldr	r2, [pc, #512]	; (8005020 <HAL_DMA_IRQHandler+0x69c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d03b      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7f      	ldr	r2, [pc, #508]	; (8005024 <HAL_DMA_IRQHandler+0x6a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d036      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7d      	ldr	r2, [pc, #500]	; (8005028 <HAL_DMA_IRQHandler+0x6a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d031      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	; (800502c <HAL_DMA_IRQHandler+0x6a8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d02c      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7a      	ldr	r2, [pc, #488]	; (8005030 <HAL_DMA_IRQHandler+0x6ac>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d027      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a79      	ldr	r2, [pc, #484]	; (8005034 <HAL_DMA_IRQHandler+0x6b0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d022      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a77      	ldr	r2, [pc, #476]	; (8005038 <HAL_DMA_IRQHandler+0x6b4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d01d      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a76      	ldr	r2, [pc, #472]	; (800503c <HAL_DMA_IRQHandler+0x6b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d018      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a74      	ldr	r2, [pc, #464]	; (8005040 <HAL_DMA_IRQHandler+0x6bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d013      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a73      	ldr	r2, [pc, #460]	; (8005044 <HAL_DMA_IRQHandler+0x6c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00e      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a71      	ldr	r2, [pc, #452]	; (8005048 <HAL_DMA_IRQHandler+0x6c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a70      	ldr	r2, [pc, #448]	; (800504c <HAL_DMA_IRQHandler+0x6c8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x516>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a6e      	ldr	r2, [pc, #440]	; (8005050 <HAL_DMA_IRQHandler+0x6cc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10a      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x52c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	e009      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x540>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d03e      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d018      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d108      	bne.n	8004f06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d024      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
 8004f04:	e01f      	b.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01b      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	4798      	blx	r3
 8004f16:	e016      	b.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0208 	bic.w	r2, r2, #8
 8004f34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	f003 031f 	and.w	r3, r3, #31
 8004f4e:	2220      	movs	r2, #32
 8004f50:	409a      	lsls	r2, r3
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8110 	beq.w	800517c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <HAL_DMA_IRQHandler+0x690>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d04a      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <HAL_DMA_IRQHandler+0x694>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d045      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <HAL_DMA_IRQHandler+0x698>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d040      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a28      	ldr	r2, [pc, #160]	; (8005020 <HAL_DMA_IRQHandler+0x69c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d03b      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <HAL_DMA_IRQHandler+0x6a0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d036      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a25      	ldr	r2, [pc, #148]	; (8005028 <HAL_DMA_IRQHandler+0x6a4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d031      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a23      	ldr	r2, [pc, #140]	; (800502c <HAL_DMA_IRQHandler+0x6a8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02c      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a22      	ldr	r2, [pc, #136]	; (8005030 <HAL_DMA_IRQHandler+0x6ac>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d027      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_DMA_IRQHandler+0x6b0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d022      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_DMA_IRQHandler+0x6b4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d01d      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1d      	ldr	r2, [pc, #116]	; (800503c <HAL_DMA_IRQHandler+0x6b8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_DMA_IRQHandler+0x6bc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1a      	ldr	r2, [pc, #104]	; (8005044 <HAL_DMA_IRQHandler+0x6c0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_DMA_IRQHandler+0x6c4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_DMA_IRQHandler+0x6c8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x678>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_DMA_IRQHandler+0x6cc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d12b      	bne.n	8005054 <HAL_DMA_IRQHandler+0x6d0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e02a      	b.n	8005068 <HAL_DMA_IRQHandler+0x6e4>
 8005012:	bf00      	nop
 8005014:	40020010 	.word	0x40020010
 8005018:	40020028 	.word	0x40020028
 800501c:	40020040 	.word	0x40020040
 8005020:	40020058 	.word	0x40020058
 8005024:	40020070 	.word	0x40020070
 8005028:	40020088 	.word	0x40020088
 800502c:	400200a0 	.word	0x400200a0
 8005030:	400200b8 	.word	0x400200b8
 8005034:	40020410 	.word	0x40020410
 8005038:	40020428 	.word	0x40020428
 800503c:	40020440 	.word	0x40020440
 8005040:	40020458 	.word	0x40020458
 8005044:	40020470 	.word	0x40020470
 8005048:	40020488 	.word	0x40020488
 800504c:	400204a0 	.word	0x400204a0
 8005050:	400204b8 	.word	0x400204b8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8087 	beq.w	800517c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2220      	movs	r2, #32
 8005078:	409a      	lsls	r2, r3
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b04      	cmp	r3, #4
 8005088:	d139      	bne.n	80050fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0216 	bic.w	r2, r2, #22
 8005098:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <HAL_DMA_IRQHandler+0x736>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0208 	bic.w	r2, r2, #8
 80050c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	223f      	movs	r2, #63	; 0x3f
 80050d4:	409a      	lsls	r2, r3
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 834a 	beq.w	8005788 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
          }
          return;
 80050fc:	e344      	b.n	8005788 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d018      	beq.n	800513e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	2b00      	cmp	r3, #0
 8005120:	d02c      	beq.n	800517c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	4798      	blx	r3
 800512a:	e027      	b.n	800517c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d023      	beq.n	800517c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
 800513c:	e01e      	b.n	800517c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10f      	bne.n	800516c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0210 	bic.w	r2, r2, #16
 800515a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8306 	beq.w	8005792 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 8088 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2204      	movs	r2, #4
 8005198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a7a      	ldr	r2, [pc, #488]	; (800538c <HAL_DMA_IRQHandler+0xa08>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d04a      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a79      	ldr	r2, [pc, #484]	; (8005390 <HAL_DMA_IRQHandler+0xa0c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d045      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a77      	ldr	r2, [pc, #476]	; (8005394 <HAL_DMA_IRQHandler+0xa10>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d040      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a76      	ldr	r2, [pc, #472]	; (8005398 <HAL_DMA_IRQHandler+0xa14>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d03b      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a74      	ldr	r2, [pc, #464]	; (800539c <HAL_DMA_IRQHandler+0xa18>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d036      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a73      	ldr	r2, [pc, #460]	; (80053a0 <HAL_DMA_IRQHandler+0xa1c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d031      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a71      	ldr	r2, [pc, #452]	; (80053a4 <HAL_DMA_IRQHandler+0xa20>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d02c      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a70      	ldr	r2, [pc, #448]	; (80053a8 <HAL_DMA_IRQHandler+0xa24>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d027      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <HAL_DMA_IRQHandler+0xa28>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6d      	ldr	r2, [pc, #436]	; (80053b0 <HAL_DMA_IRQHandler+0xa2c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d01d      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a6b      	ldr	r2, [pc, #428]	; (80053b4 <HAL_DMA_IRQHandler+0xa30>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a6a      	ldr	r2, [pc, #424]	; (80053b8 <HAL_DMA_IRQHandler+0xa34>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a68      	ldr	r2, [pc, #416]	; (80053bc <HAL_DMA_IRQHandler+0xa38>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a67      	ldr	r2, [pc, #412]	; (80053c0 <HAL_DMA_IRQHandler+0xa3c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	; (80053c4 <HAL_DMA_IRQHandler+0xa40>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_DMA_IRQHandler+0x8b8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a64      	ldr	r2, [pc, #400]	; (80053c8 <HAL_DMA_IRQHandler+0xa44>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <HAL_DMA_IRQHandler+0x8ca>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e007      	b.n	800525e <HAL_DMA_IRQHandler+0x8da>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	429a      	cmp	r2, r3
 8005268:	d307      	bcc.n	800527a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f2      	bne.n	800525e <HAL_DMA_IRQHandler+0x8da>
 8005278:	e000      	b.n	800527c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800527a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2203      	movs	r2, #3
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005292:	e003      	b.n	800529c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8272 	beq.w	8005792 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
 80052b6:	e26c      	b.n	8005792 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a43      	ldr	r2, [pc, #268]	; (80053cc <HAL_DMA_IRQHandler+0xa48>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a42      	ldr	r2, [pc, #264]	; (80053d0 <HAL_DMA_IRQHandler+0xa4c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a40      	ldr	r2, [pc, #256]	; (80053d4 <HAL_DMA_IRQHandler+0xa50>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3f      	ldr	r2, [pc, #252]	; (80053d8 <HAL_DMA_IRQHandler+0xa54>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3d      	ldr	r2, [pc, #244]	; (80053dc <HAL_DMA_IRQHandler+0xa58>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <HAL_DMA_IRQHandler+0xa5c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3a      	ldr	r2, [pc, #232]	; (80053e4 <HAL_DMA_IRQHandler+0xa60>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_IRQHandler+0x984>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a39      	ldr	r2, [pc, #228]	; (80053e8 <HAL_DMA_IRQHandler+0xa64>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_DMA_IRQHandler+0x988>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_DMA_IRQHandler+0x98a>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 823f 	beq.w	8005792 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	2204      	movs	r2, #4
 8005326:	409a      	lsls	r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80cd 	beq.w	80054cc <HAL_DMA_IRQHandler+0xb48>
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80c7 	beq.w	80054cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2204      	movs	r2, #4
 8005348:	409a      	lsls	r2, r3
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d049      	beq.n	80053ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8210 	beq.w	800578c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005374:	e20a      	b.n	800578c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8206 	beq.w	800578c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	e200      	b.n	800578c <HAL_DMA_IRQHandler+0xe08>
 800538a:	bf00      	nop
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	58025408 	.word	0x58025408
 80053d0:	5802541c 	.word	0x5802541c
 80053d4:	58025430 	.word	0x58025430
 80053d8:	58025444 	.word	0x58025444
 80053dc:	58025458 	.word	0x58025458
 80053e0:	5802546c 	.word	0x5802546c
 80053e4:	58025480 	.word	0x58025480
 80053e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d160      	bne.n	80054b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a7f      	ldr	r2, [pc, #508]	; (80055f8 <HAL_DMA_IRQHandler+0xc74>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7d      	ldr	r2, [pc, #500]	; (80055fc <HAL_DMA_IRQHandler+0xc78>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a7c      	ldr	r2, [pc, #496]	; (8005600 <HAL_DMA_IRQHandler+0xc7c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7a      	ldr	r2, [pc, #488]	; (8005604 <HAL_DMA_IRQHandler+0xc80>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a79      	ldr	r2, [pc, #484]	; (8005608 <HAL_DMA_IRQHandler+0xc84>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a77      	ldr	r2, [pc, #476]	; (800560c <HAL_DMA_IRQHandler+0xc88>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a76      	ldr	r2, [pc, #472]	; (8005610 <HAL_DMA_IRQHandler+0xc8c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a74      	ldr	r2, [pc, #464]	; (8005614 <HAL_DMA_IRQHandler+0xc90>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a73      	ldr	r2, [pc, #460]	; (8005618 <HAL_DMA_IRQHandler+0xc94>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a71      	ldr	r2, [pc, #452]	; (800561c <HAL_DMA_IRQHandler+0xc98>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a70      	ldr	r2, [pc, #448]	; (8005620 <HAL_DMA_IRQHandler+0xc9c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6e      	ldr	r2, [pc, #440]	; (8005624 <HAL_DMA_IRQHandler+0xca0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6d      	ldr	r2, [pc, #436]	; (8005628 <HAL_DMA_IRQHandler+0xca4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a6b      	ldr	r2, [pc, #428]	; (800562c <HAL_DMA_IRQHandler+0xca8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6a      	ldr	r2, [pc, #424]	; (8005630 <HAL_DMA_IRQHandler+0xcac>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_IRQHandler+0xb12>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a68      	ldr	r2, [pc, #416]	; (8005634 <HAL_DMA_IRQHandler+0xcb0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <HAL_DMA_IRQHandler+0xb24>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0208 	bic.w	r2, r2, #8
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e007      	b.n	80054b8 <HAL_DMA_IRQHandler+0xb34>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0204 	bic.w	r2, r2, #4
 80054b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8165 	beq.w	800578c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ca:	e15f      	b.n	800578c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2202      	movs	r2, #2
 80054d6:	409a      	lsls	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80c5 	beq.w	800566c <HAL_DMA_IRQHandler+0xce8>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80bf 	beq.w	800566c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2202      	movs	r2, #2
 80054f8:	409a      	lsls	r2, r3
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d018      	beq.n	800553a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 813a 	beq.w	8005790 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005524:	e134      	b.n	8005790 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8130 	beq.w	8005790 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005538:	e12a      	b.n	8005790 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 8089 	bne.w	8005658 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_DMA_IRQHandler+0xc74>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a29      	ldr	r2, [pc, #164]	; (80055fc <HAL_DMA_IRQHandler+0xc78>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a28      	ldr	r2, [pc, #160]	; (8005600 <HAL_DMA_IRQHandler+0xc7c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a26      	ldr	r2, [pc, #152]	; (8005604 <HAL_DMA_IRQHandler+0xc80>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_DMA_IRQHandler+0xc84>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a23      	ldr	r2, [pc, #140]	; (800560c <HAL_DMA_IRQHandler+0xc88>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_DMA_IRQHandler+0xc8c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a20      	ldr	r2, [pc, #128]	; (8005614 <HAL_DMA_IRQHandler+0xc90>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <HAL_DMA_IRQHandler+0xc94>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_DMA_IRQHandler+0xc98>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <HAL_DMA_IRQHandler+0xc9c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <HAL_DMA_IRQHandler+0xca0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a19      	ldr	r2, [pc, #100]	; (8005628 <HAL_DMA_IRQHandler+0xca4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_DMA_IRQHandler+0xca8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a16      	ldr	r2, [pc, #88]	; (8005630 <HAL_DMA_IRQHandler+0xcac>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xc62>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a14      	ldr	r2, [pc, #80]	; (8005634 <HAL_DMA_IRQHandler+0xcb0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d128      	bne.n	8005638 <HAL_DMA_IRQHandler+0xcb4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0214 	bic.w	r2, r2, #20
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e027      	b.n	8005648 <HAL_DMA_IRQHandler+0xcc4>
 80055f8:	40020010 	.word	0x40020010
 80055fc:	40020028 	.word	0x40020028
 8005600:	40020040 	.word	0x40020040
 8005604:	40020058 	.word	0x40020058
 8005608:	40020070 	.word	0x40020070
 800560c:	40020088 	.word	0x40020088
 8005610:	400200a0 	.word	0x400200a0
 8005614:	400200b8 	.word	0x400200b8
 8005618:	40020410 	.word	0x40020410
 800561c:	40020428 	.word	0x40020428
 8005620:	40020440 	.word	0x40020440
 8005624:	40020458 	.word	0x40020458
 8005628:	40020470 	.word	0x40020470
 800562c:	40020488 	.word	0x40020488
 8005630:	400204a0 	.word	0x400204a0
 8005634:	400204b8 	.word	0x400204b8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 020a 	bic.w	r2, r2, #10
 8005646:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8097 	beq.w	8005790 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800566a:	e091      	b.n	8005790 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2208      	movs	r2, #8
 8005676:	409a      	lsls	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8088 	beq.w	8005792 <HAL_DMA_IRQHandler+0xe0e>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8082 	beq.w	8005792 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a41      	ldr	r2, [pc, #260]	; (8005798 <HAL_DMA_IRQHandler+0xe14>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d04a      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3f      	ldr	r2, [pc, #252]	; (800579c <HAL_DMA_IRQHandler+0xe18>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d045      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3e      	ldr	r2, [pc, #248]	; (80057a0 <HAL_DMA_IRQHandler+0xe1c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d040      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <HAL_DMA_IRQHandler+0xe20>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d03b      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <HAL_DMA_IRQHandler+0xe24>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d036      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a39      	ldr	r2, [pc, #228]	; (80057ac <HAL_DMA_IRQHandler+0xe28>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d031      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a38      	ldr	r2, [pc, #224]	; (80057b0 <HAL_DMA_IRQHandler+0xe2c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d02c      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a36      	ldr	r2, [pc, #216]	; (80057b4 <HAL_DMA_IRQHandler+0xe30>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d027      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a35      	ldr	r2, [pc, #212]	; (80057b8 <HAL_DMA_IRQHandler+0xe34>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d022      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a33      	ldr	r2, [pc, #204]	; (80057bc <HAL_DMA_IRQHandler+0xe38>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01d      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a32      	ldr	r2, [pc, #200]	; (80057c0 <HAL_DMA_IRQHandler+0xe3c>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d018      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a30      	ldr	r2, [pc, #192]	; (80057c4 <HAL_DMA_IRQHandler+0xe40>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2f      	ldr	r2, [pc, #188]	; (80057c8 <HAL_DMA_IRQHandler+0xe44>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2d      	ldr	r2, [pc, #180]	; (80057cc <HAL_DMA_IRQHandler+0xe48>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <HAL_DMA_IRQHandler+0xe4c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_DMA_IRQHandler+0xdaa>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <HAL_DMA_IRQHandler+0xe50>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <HAL_DMA_IRQHandler+0xdbc>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 021c 	bic.w	r2, r2, #28
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e007      	b.n	8005750 <HAL_DMA_IRQHandler+0xdcc>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 020e 	bic.w	r2, r2, #14
 800574e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2201      	movs	r2, #1
 800575a:	409a      	lsls	r2, r3
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
 8005786:	e004      	b.n	8005792 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005788:	bf00      	nop
 800578a:	e002      	b.n	8005792 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800578c:	bf00      	nop
 800578e:	e000      	b.n	8005792 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005790:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005792:	3728      	adds	r7, #40	; 0x28
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40020010 	.word	0x40020010
 800579c:	40020028 	.word	0x40020028
 80057a0:	40020040 	.word	0x40020040
 80057a4:	40020058 	.word	0x40020058
 80057a8:	40020070 	.word	0x40020070
 80057ac:	40020088 	.word	0x40020088
 80057b0:	400200a0 	.word	0x400200a0
 80057b4:	400200b8 	.word	0x400200b8
 80057b8:	40020410 	.word	0x40020410
 80057bc:	40020428 	.word	0x40020428
 80057c0:	40020440 	.word	0x40020440
 80057c4:	40020458 	.word	0x40020458
 80057c8:	40020470 	.word	0x40020470
 80057cc:	40020488 	.word	0x40020488
 80057d0:	400204a0 	.word	0x400204a0
 80057d4:	400204b8 	.word	0x400204b8

080057d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7f      	ldr	r2, [pc, #508]	; (80059f4 <DMA_SetConfig+0x21c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d072      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7d      	ldr	r2, [pc, #500]	; (80059f8 <DMA_SetConfig+0x220>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d06d      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7c      	ldr	r2, [pc, #496]	; (80059fc <DMA_SetConfig+0x224>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d068      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a7a      	ldr	r2, [pc, #488]	; (8005a00 <DMA_SetConfig+0x228>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d063      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a79      	ldr	r2, [pc, #484]	; (8005a04 <DMA_SetConfig+0x22c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d05e      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a77      	ldr	r2, [pc, #476]	; (8005a08 <DMA_SetConfig+0x230>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d059      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a76      	ldr	r2, [pc, #472]	; (8005a0c <DMA_SetConfig+0x234>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d054      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a74      	ldr	r2, [pc, #464]	; (8005a10 <DMA_SetConfig+0x238>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d04f      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a73      	ldr	r2, [pc, #460]	; (8005a14 <DMA_SetConfig+0x23c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d04a      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a71      	ldr	r2, [pc, #452]	; (8005a18 <DMA_SetConfig+0x240>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d045      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a70      	ldr	r2, [pc, #448]	; (8005a1c <DMA_SetConfig+0x244>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d040      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6e      	ldr	r2, [pc, #440]	; (8005a20 <DMA_SetConfig+0x248>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d03b      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6d      	ldr	r2, [pc, #436]	; (8005a24 <DMA_SetConfig+0x24c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d036      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a6b      	ldr	r2, [pc, #428]	; (8005a28 <DMA_SetConfig+0x250>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d031      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6a      	ldr	r2, [pc, #424]	; (8005a2c <DMA_SetConfig+0x254>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d02c      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a68      	ldr	r2, [pc, #416]	; (8005a30 <DMA_SetConfig+0x258>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d027      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a67      	ldr	r2, [pc, #412]	; (8005a34 <DMA_SetConfig+0x25c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a65      	ldr	r2, [pc, #404]	; (8005a38 <DMA_SetConfig+0x260>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <DMA_SetConfig+0x264>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d018      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a62      	ldr	r2, [pc, #392]	; (8005a40 <DMA_SetConfig+0x268>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a61      	ldr	r2, [pc, #388]	; (8005a44 <DMA_SetConfig+0x26c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5f      	ldr	r2, [pc, #380]	; (8005a48 <DMA_SetConfig+0x270>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5e      	ldr	r2, [pc, #376]	; (8005a4c <DMA_SetConfig+0x274>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <DMA_SetConfig+0x10a>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5c      	ldr	r2, [pc, #368]	; (8005a50 <DMA_SetConfig+0x278>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <DMA_SetConfig+0x10e>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <DMA_SetConfig+0x110>
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005906:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a39      	ldr	r2, [pc, #228]	; (80059f4 <DMA_SetConfig+0x21c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d04a      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a38      	ldr	r2, [pc, #224]	; (80059f8 <DMA_SetConfig+0x220>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d045      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a36      	ldr	r2, [pc, #216]	; (80059fc <DMA_SetConfig+0x224>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d040      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <DMA_SetConfig+0x228>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d03b      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <DMA_SetConfig+0x22c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d036      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a32      	ldr	r2, [pc, #200]	; (8005a08 <DMA_SetConfig+0x230>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d031      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <DMA_SetConfig+0x234>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02c      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	; (8005a10 <DMA_SetConfig+0x238>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d027      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <DMA_SetConfig+0x23c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d022      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <DMA_SetConfig+0x240>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d01d      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <DMA_SetConfig+0x244>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d018      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <DMA_SetConfig+0x248>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <DMA_SetConfig+0x24c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00e      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a26      	ldr	r2, [pc, #152]	; (8005a28 <DMA_SetConfig+0x250>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <DMA_SetConfig+0x254>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <DMA_SetConfig+0x1d0>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <DMA_SetConfig+0x258>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d101      	bne.n	80059ac <DMA_SetConfig+0x1d4>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <DMA_SetConfig+0x1d6>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d059      	beq.n	8005a66 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	223f      	movs	r2, #63	; 0x3f
 80059bc:	409a      	lsls	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d138      	bne.n	8005a54 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059f2:	e086      	b.n	8005b02 <DMA_SetConfig+0x32a>
 80059f4:	40020010 	.word	0x40020010
 80059f8:	40020028 	.word	0x40020028
 80059fc:	40020040 	.word	0x40020040
 8005a00:	40020058 	.word	0x40020058
 8005a04:	40020070 	.word	0x40020070
 8005a08:	40020088 	.word	0x40020088
 8005a0c:	400200a0 	.word	0x400200a0
 8005a10:	400200b8 	.word	0x400200b8
 8005a14:	40020410 	.word	0x40020410
 8005a18:	40020428 	.word	0x40020428
 8005a1c:	40020440 	.word	0x40020440
 8005a20:	40020458 	.word	0x40020458
 8005a24:	40020470 	.word	0x40020470
 8005a28:	40020488 	.word	0x40020488
 8005a2c:	400204a0 	.word	0x400204a0
 8005a30:	400204b8 	.word	0x400204b8
 8005a34:	58025408 	.word	0x58025408
 8005a38:	5802541c 	.word	0x5802541c
 8005a3c:	58025430 	.word	0x58025430
 8005a40:	58025444 	.word	0x58025444
 8005a44:	58025458 	.word	0x58025458
 8005a48:	5802546c 	.word	0x5802546c
 8005a4c:	58025480 	.word	0x58025480
 8005a50:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
}
 8005a64:	e04d      	b.n	8005b02 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <DMA_SetConfig+0x338>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <DMA_SetConfig+0x33c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a26      	ldr	r2, [pc, #152]	; (8005b18 <DMA_SetConfig+0x340>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a24      	ldr	r2, [pc, #144]	; (8005b1c <DMA_SetConfig+0x344>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a23      	ldr	r2, [pc, #140]	; (8005b20 <DMA_SetConfig+0x348>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <DMA_SetConfig+0x34c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <DMA_SetConfig+0x350>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <DMA_SetConfig+0x2de>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <DMA_SetConfig+0x354>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <DMA_SetConfig+0x2e2>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <DMA_SetConfig+0x2e4>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d020      	beq.n	8005b02 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d108      	bne.n	8005af2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	60da      	str	r2, [r3, #12]
}
 8005af0:	e007      	b.n	8005b02 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	60da      	str	r2, [r3, #12]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	58025408 	.word	0x58025408
 8005b14:	5802541c 	.word	0x5802541c
 8005b18:	58025430 	.word	0x58025430
 8005b1c:	58025444 	.word	0x58025444
 8005b20:	58025458 	.word	0x58025458
 8005b24:	5802546c 	.word	0x5802546c
 8005b28:	58025480 	.word	0x58025480
 8005b2c:	58025494 	.word	0x58025494

08005b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a42      	ldr	r2, [pc, #264]	; (8005c48 <DMA_CalcBaseAndBitshift+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d04a      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a41      	ldr	r2, [pc, #260]	; (8005c4c <DMA_CalcBaseAndBitshift+0x11c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d045      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a3f      	ldr	r2, [pc, #252]	; (8005c50 <DMA_CalcBaseAndBitshift+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d040      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3e      	ldr	r2, [pc, #248]	; (8005c54 <DMA_CalcBaseAndBitshift+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d03b      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <DMA_CalcBaseAndBitshift+0x128>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d036      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a3b      	ldr	r2, [pc, #236]	; (8005c5c <DMA_CalcBaseAndBitshift+0x12c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d031      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a39      	ldr	r2, [pc, #228]	; (8005c60 <DMA_CalcBaseAndBitshift+0x130>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d02c      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <DMA_CalcBaseAndBitshift+0x134>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d027      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a36      	ldr	r2, [pc, #216]	; (8005c68 <DMA_CalcBaseAndBitshift+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d022      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <DMA_CalcBaseAndBitshift+0x13c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d01d      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <DMA_CalcBaseAndBitshift+0x140>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d018      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <DMA_CalcBaseAndBitshift+0x144>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a30      	ldr	r2, [pc, #192]	; (8005c78 <DMA_CalcBaseAndBitshift+0x148>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00e      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <DMA_CalcBaseAndBitshift+0x14c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <DMA_CalcBaseAndBitshift+0x150>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <DMA_CalcBaseAndBitshift+0x154>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d101      	bne.n	8005bdc <DMA_CalcBaseAndBitshift+0xac>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <DMA_CalcBaseAndBitshift+0xae>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d024      	beq.n	8005c2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3b10      	subs	r3, #16
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <DMA_CalcBaseAndBitshift+0x158>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	4a24      	ldr	r2, [pc, #144]	; (8005c8c <DMA_CalcBaseAndBitshift+0x15c>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d908      	bls.n	8005c1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <DMA_CalcBaseAndBitshift+0x160>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	659a      	str	r2, [r3, #88]	; 0x58
 8005c1a:	e00d      	b.n	8005c38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <DMA_CalcBaseAndBitshift+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6593      	str	r3, [r2, #88]	; 0x58
 8005c2a:	e005      	b.n	8005c38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	aaaaaaab 	.word	0xaaaaaaab
 8005c8c:	0800d7cc 	.word	0x0800d7cc
 8005c90:	fffffc00 	.word	0xfffffc00

08005c94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d120      	bne.n	8005cea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d858      	bhi.n	8005d62 <DMA_CheckFifoParam+0xce>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <DMA_CheckFifoParam+0x24>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cdb 	.word	0x08005cdb
 8005cc0:	08005cc9 	.word	0x08005cc9
 8005cc4:	08005d63 	.word	0x08005d63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d048      	beq.n	8005d66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cd8:	e045      	b.n	8005d66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ce2:	d142      	bne.n	8005d6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ce8:	e03f      	b.n	8005d6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf2:	d123      	bne.n	8005d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d838      	bhi.n	8005d6e <DMA_CheckFifoParam+0xda>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <DMA_CheckFifoParam+0x70>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d1b 	.word	0x08005d1b
 8005d0c:	08005d15 	.word	0x08005d15
 8005d10:	08005d2d 	.word	0x08005d2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
        break;
 8005d18:	e030      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d025      	beq.n	8005d72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d2a:	e022      	b.n	8005d72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d34:	d11f      	bne.n	8005d76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d3a:	e01c      	b.n	8005d76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d902      	bls.n	8005d4a <DMA_CheckFifoParam+0xb6>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d003      	beq.n	8005d50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d48:	e018      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4e:	e015      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005d60:	e00b      	b.n	8005d7a <DMA_CheckFifoParam+0xe6>
        break;
 8005d62:	bf00      	nop
 8005d64:	e00a      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d66:	bf00      	nop
 8005d68:	e008      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e006      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e004      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
        break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <DMA_CheckFifoParam+0xe8>
    break;
 8005d7a:	bf00      	nop
    }
  }

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop

08005d8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a38      	ldr	r2, [pc, #224]	; (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a36      	ldr	r2, [pc, #216]	; (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01d      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a33      	ldr	r2, [pc, #204]	; (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a32      	ldr	r2, [pc, #200]	; (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dee:	2300      	movs	r3, #0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01a      	beq.n	8005e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	3b08      	subs	r3, #8
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	2201      	movs	r2, #1
 8005e22:	409a      	lsls	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e28:	e024      	b.n	8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	3b10      	subs	r3, #16
 8005e32:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d806      	bhi.n	8005e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d902      	bls.n	8005e52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	58025408 	.word	0x58025408
 8005e84:	5802541c 	.word	0x5802541c
 8005e88:	58025430 	.word	0x58025430
 8005e8c:	58025444 	.word	0x58025444
 8005e90:	58025458 	.word	0x58025458
 8005e94:	5802546c 	.word	0x5802546c
 8005e98:	58025480 	.word	0x58025480
 8005e9c:	58025494 	.word	0x58025494
 8005ea0:	cccccccd 	.word	0xcccccccd
 8005ea4:	16009600 	.word	0x16009600
 8005ea8:	58025880 	.word	0x58025880
 8005eac:	aaaaaaab 	.word	0xaaaaaaab
 8005eb0:	400204b8 	.word	0x400204b8
 8005eb4:	4002040f 	.word	0x4002040f
 8005eb8:	10008200 	.word	0x10008200
 8005ebc:	40020880 	.word	0x40020880

08005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04a      	beq.n	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d847      	bhi.n	8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d022      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d01d      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00e      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a15      	ldr	r2, [pc, #84]	; (8005f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f48:	671a      	str	r2, [r3, #112]	; 0x70
 8005f4a:	e009      	b.n	8005f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	461a      	mov	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f5e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	2201      	movs	r2, #1
 8005f66:	409a      	lsls	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	58025408 	.word	0x58025408
 8005f7c:	5802541c 	.word	0x5802541c
 8005f80:	58025430 	.word	0x58025430
 8005f84:	58025444 	.word	0x58025444
 8005f88:	58025458 	.word	0x58025458
 8005f8c:	5802546c 	.word	0x5802546c
 8005f90:	58025480 	.word	0x58025480
 8005f94:	58025494 	.word	0x58025494
 8005f98:	1600963f 	.word	0x1600963f
 8005f9c:	58025940 	.word	0x58025940
 8005fa0:	1000823f 	.word	0x1000823f
 8005fa4:	40020940 	.word	0x40020940

08005fa8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d105      	bne.n	8005fce <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e315      	b.n	80065fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e30e      	b.n	80065fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	f040 82fd 	bne.w	80065ec <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a82      	ldr	r2, [pc, #520]	; (8006210 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d04a      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a81      	ldr	r2, [pc, #516]	; (8006214 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d045      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a7f      	ldr	r2, [pc, #508]	; (8006218 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d040      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a7e      	ldr	r2, [pc, #504]	; (800621c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d03b      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a7c      	ldr	r2, [pc, #496]	; (8006220 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d036      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a7b      	ldr	r2, [pc, #492]	; (8006224 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d031      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a79      	ldr	r2, [pc, #484]	; (8006228 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02c      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a78      	ldr	r2, [pc, #480]	; (800622c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d027      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a76      	ldr	r2, [pc, #472]	; (8006230 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d022      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a75      	ldr	r2, [pc, #468]	; (8006234 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01d      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a73      	ldr	r2, [pc, #460]	; (8006238 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a72      	ldr	r2, [pc, #456]	; (800623c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a70      	ldr	r2, [pc, #448]	; (8006240 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a6f      	ldr	r2, [pc, #444]	; (8006244 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a6d      	ldr	r2, [pc, #436]	; (8006248 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a6c      	ldr	r2, [pc, #432]	; (800624c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d018      	beq.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80060b8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	3308      	adds	r3, #8
 80060c8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	223f      	movs	r2, #63	; 0x3f
 80060d4:	409a      	lsls	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e018      	b.n	800610e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	f248 0320 	movw	r3, #32800	; 0x8020
 80060ea:	430b      	orrs	r3, r1
 80060ec:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	3304      	adds	r3, #4
 80060fc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	2201      	movs	r2, #1
 8006108:	409a      	lsls	r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb41 	bl	800679c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d072      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d06d      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a39      	ldr	r2, [pc, #228]	; (8006218 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d068      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a37      	ldr	r2, [pc, #220]	; (800621c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d063      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a36      	ldr	r2, [pc, #216]	; (8006220 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d05e      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a34      	ldr	r2, [pc, #208]	; (8006224 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d059      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a33      	ldr	r2, [pc, #204]	; (8006228 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d054      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a31      	ldr	r2, [pc, #196]	; (800622c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04f      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a30      	ldr	r2, [pc, #192]	; (8006230 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2e      	ldr	r2, [pc, #184]	; (8006234 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2d      	ldr	r2, [pc, #180]	; (8006238 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2b      	ldr	r2, [pc, #172]	; (800623c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a28      	ldr	r2, [pc, #160]	; (8006244 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a27      	ldr	r2, [pc, #156]	; (8006248 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a25      	ldr	r2, [pc, #148]	; (800624c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a24      	ldr	r2, [pc, #144]	; (8006250 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a22      	ldr	r2, [pc, #136]	; (8006254 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1f      	ldr	r2, [pc, #124]	; (800625c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1b      	ldr	r2, [pc, #108]	; (8006268 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a19      	ldr	r2, [pc, #100]	; (800626c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d132      	bne.n	8006270 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800620a:	2301      	movs	r3, #1
 800620c:	e031      	b.n	8006272 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800620e:	bf00      	nop
 8006210:	40020010 	.word	0x40020010
 8006214:	40020028 	.word	0x40020028
 8006218:	40020040 	.word	0x40020040
 800621c:	40020058 	.word	0x40020058
 8006220:	40020070 	.word	0x40020070
 8006224:	40020088 	.word	0x40020088
 8006228:	400200a0 	.word	0x400200a0
 800622c:	400200b8 	.word	0x400200b8
 8006230:	40020410 	.word	0x40020410
 8006234:	40020428 	.word	0x40020428
 8006238:	40020440 	.word	0x40020440
 800623c:	40020458 	.word	0x40020458
 8006240:	40020470 	.word	0x40020470
 8006244:	40020488 	.word	0x40020488
 8006248:	400204a0 	.word	0x400204a0
 800624c:	400204b8 	.word	0x400204b8
 8006250:	58025408 	.word	0x58025408
 8006254:	5802541c 	.word	0x5802541c
 8006258:	58025430 	.word	0x58025430
 800625c:	58025444 	.word	0x58025444
 8006260:	58025458 	.word	0x58025458
 8006264:	5802546c 	.word	0x5802546c
 8006268:	58025480 	.word	0x58025480
 800626c:	58025494 	.word	0x58025494
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800627e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006290:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3b      	ldr	r2, [pc, #236]	; (8006384 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d04a      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a39      	ldr	r2, [pc, #228]	; (8006388 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d045      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a38      	ldr	r2, [pc, #224]	; (800638c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d040      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a36      	ldr	r2, [pc, #216]	; (8006390 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d03b      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a35      	ldr	r2, [pc, #212]	; (8006394 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d036      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a33      	ldr	r2, [pc, #204]	; (8006398 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d031      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a32      	ldr	r2, [pc, #200]	; (800639c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d02c      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a30      	ldr	r2, [pc, #192]	; (80063a0 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d027      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a2d      	ldr	r2, [pc, #180]	; (80063a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01d      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2c      	ldr	r2, [pc, #176]	; (80063ac <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a29      	ldr	r2, [pc, #164]	; (80063b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a26      	ldr	r2, [pc, #152]	; (80063bc <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a24      	ldr	r2, [pc, #144]	; (80063c0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d043      	beq.n	80063c4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 021e 	bic.w	r2, r3, #30
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0216 	orr.w	r2, r2, #22
 800634e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800635e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636c:	2b00      	cmp	r3, #0
 800636e:	d043      	beq.n	80063f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0208 	orr.w	r2, r2, #8
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e03a      	b.n	80063f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006382:	bf00      	nop
 8006384:	40020010 	.word	0x40020010
 8006388:	40020028 	.word	0x40020028
 800638c:	40020040 	.word	0x40020040
 8006390:	40020058 	.word	0x40020058
 8006394:	40020070 	.word	0x40020070
 8006398:	40020088 	.word	0x40020088
 800639c:	400200a0 	.word	0x400200a0
 80063a0:	400200b8 	.word	0x400200b8
 80063a4:	40020410 	.word	0x40020410
 80063a8:	40020428 	.word	0x40020428
 80063ac:	40020440 	.word	0x40020440
 80063b0:	40020458 	.word	0x40020458
 80063b4:	40020470 	.word	0x40020470
 80063b8:	40020488 	.word	0x40020488
 80063bc:	400204a0 	.word	0x400204a0
 80063c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f023 020e 	bic.w	r2, r3, #14
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 020a 	orr.w	r2, r2, #10
 80063d6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0204 	orr.w	r2, r2, #4
 80063f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a81      	ldr	r2, [pc, #516]	; (8006604 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d072      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a80      	ldr	r2, [pc, #512]	; (8006608 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d06d      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a7e      	ldr	r2, [pc, #504]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d068      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7d      	ldr	r2, [pc, #500]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d063      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7b      	ldr	r2, [pc, #492]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d05e      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a7a      	ldr	r2, [pc, #488]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d059      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a78      	ldr	r2, [pc, #480]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d054      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a77      	ldr	r2, [pc, #476]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d04f      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a75      	ldr	r2, [pc, #468]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d04a      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a74      	ldr	r2, [pc, #464]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d045      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a72      	ldr	r2, [pc, #456]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d040      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a71      	ldr	r2, [pc, #452]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d03b      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a6f      	ldr	r2, [pc, #444]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d036      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a6e      	ldr	r2, [pc, #440]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d031      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6c      	ldr	r2, [pc, #432]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02c      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a6b      	ldr	r2, [pc, #428]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d027      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a69      	ldr	r2, [pc, #420]	; (8006644 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a68      	ldr	r2, [pc, #416]	; (8006648 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d01d      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a66      	ldr	r2, [pc, #408]	; (800664c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a65      	ldr	r2, [pc, #404]	; (8006650 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a63      	ldr	r2, [pc, #396]	; (8006654 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a62      	ldr	r2, [pc, #392]	; (8006658 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a60      	ldr	r2, [pc, #384]	; (800665c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a5f      	ldr	r2, [pc, #380]	; (8006660 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d101      	bne.n	80064ec <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80064ec:	2300      	movs	r3, #0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01a      	beq.n	8006528 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800650a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006526:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a35      	ldr	r2, [pc, #212]	; (8006604 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04a      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a34      	ldr	r2, [pc, #208]	; (8006608 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d045      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a32      	ldr	r2, [pc, #200]	; (800660c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d040      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a31      	ldr	r2, [pc, #196]	; (8006610 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d03b      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2f      	ldr	r2, [pc, #188]	; (8006614 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d036      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d031      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02c      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d027      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a29      	ldr	r2, [pc, #164]	; (8006624 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a28      	ldr	r2, [pc, #160]	; (8006628 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a26      	ldr	r2, [pc, #152]	; (800662c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a25      	ldr	r2, [pc, #148]	; (8006630 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a23      	ldr	r2, [pc, #140]	; (8006634 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a22      	ldr	r2, [pc, #136]	; (8006638 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e00e      	b.n	80065f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e005      	b.n	80065f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40020010 	.word	0x40020010
 8006608:	40020028 	.word	0x40020028
 800660c:	40020040 	.word	0x40020040
 8006610:	40020058 	.word	0x40020058
 8006614:	40020070 	.word	0x40020070
 8006618:	40020088 	.word	0x40020088
 800661c:	400200a0 	.word	0x400200a0
 8006620:	400200b8 	.word	0x400200b8
 8006624:	40020410 	.word	0x40020410
 8006628:	40020428 	.word	0x40020428
 800662c:	40020440 	.word	0x40020440
 8006630:	40020458 	.word	0x40020458
 8006634:	40020470 	.word	0x40020470
 8006638:	40020488 	.word	0x40020488
 800663c:	400204a0 	.word	0x400204a0
 8006640:	400204b8 	.word	0x400204b8
 8006644:	58025408 	.word	0x58025408
 8006648:	5802541c 	.word	0x5802541c
 800664c:	58025430 	.word	0x58025430
 8006650:	58025444 	.word	0x58025444
 8006654:	58025458 	.word	0x58025458
 8006658:	5802546c 	.word	0x5802546c
 800665c:	58025480 	.word	0x58025480
 8006660:	58025494 	.word	0x58025494

08006664 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a39      	ldr	r2, [pc, #228]	; (800675c <HAL_DMAEx_ChangeMemory+0xf8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d04a      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a37      	ldr	r2, [pc, #220]	; (8006760 <HAL_DMAEx_ChangeMemory+0xfc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d045      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a36      	ldr	r2, [pc, #216]	; (8006764 <HAL_DMAEx_ChangeMemory+0x100>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d040      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a34      	ldr	r2, [pc, #208]	; (8006768 <HAL_DMAEx_ChangeMemory+0x104>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d03b      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a33      	ldr	r2, [pc, #204]	; (800676c <HAL_DMAEx_ChangeMemory+0x108>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d036      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a31      	ldr	r2, [pc, #196]	; (8006770 <HAL_DMAEx_ChangeMemory+0x10c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d031      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a30      	ldr	r2, [pc, #192]	; (8006774 <HAL_DMAEx_ChangeMemory+0x110>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d02c      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a2e      	ldr	r2, [pc, #184]	; (8006778 <HAL_DMAEx_ChangeMemory+0x114>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d027      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a2d      	ldr	r2, [pc, #180]	; (800677c <HAL_DMAEx_ChangeMemory+0x118>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d022      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <HAL_DMAEx_ChangeMemory+0x11c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01d      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <HAL_DMAEx_ChangeMemory+0x120>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d018      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <HAL_DMAEx_ChangeMemory+0x124>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <HAL_DMAEx_ChangeMemory+0x128>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00e      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a25      	ldr	r2, [pc, #148]	; (8006790 <HAL_DMAEx_ChangeMemory+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d009      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a24      	ldr	r2, [pc, #144]	; (8006794 <HAL_DMAEx_ChangeMemory+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d004      	beq.n	8006712 <HAL_DMAEx_ChangeMemory+0xae>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <HAL_DMAEx_ChangeMemory+0x134>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d101      	bne.n	8006716 <HAL_DMAEx_ChangeMemory+0xb2>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <HAL_DMAEx_ChangeMemory+0xb4>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	60da      	str	r2, [r3, #12]
 800672a:	e010      	b.n	800674e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	611a      	str	r2, [r3, #16]
 8006734:	e00b      	b.n	800674e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	e003      	b.n	800674e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40020010 	.word	0x40020010
 8006760:	40020028 	.word	0x40020028
 8006764:	40020040 	.word	0x40020040
 8006768:	40020058 	.word	0x40020058
 800676c:	40020070 	.word	0x40020070
 8006770:	40020088 	.word	0x40020088
 8006774:	400200a0 	.word	0x400200a0
 8006778:	400200b8 	.word	0x400200b8
 800677c:	40020410 	.word	0x40020410
 8006780:	40020428 	.word	0x40020428
 8006784:	40020440 	.word	0x40020440
 8006788:	40020458 	.word	0x40020458
 800678c:	40020470 	.word	0x40020470
 8006790:	40020488 	.word	0x40020488
 8006794:	400204a0 	.word	0x400204a0
 8006798:	400204b8 	.word	0x400204b8

0800679c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a46      	ldr	r2, [pc, #280]	; (80068c8 <DMA_MultiBufferSetConfig+0x12c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d04a      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a44      	ldr	r2, [pc, #272]	; (80068cc <DMA_MultiBufferSetConfig+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a43      	ldr	r2, [pc, #268]	; (80068d0 <DMA_MultiBufferSetConfig+0x134>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d040      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a41      	ldr	r2, [pc, #260]	; (80068d4 <DMA_MultiBufferSetConfig+0x138>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d03b      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a40      	ldr	r2, [pc, #256]	; (80068d8 <DMA_MultiBufferSetConfig+0x13c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d036      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a3e      	ldr	r2, [pc, #248]	; (80068dc <DMA_MultiBufferSetConfig+0x140>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d031      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3d      	ldr	r2, [pc, #244]	; (80068e0 <DMA_MultiBufferSetConfig+0x144>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02c      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3b      	ldr	r2, [pc, #236]	; (80068e4 <DMA_MultiBufferSetConfig+0x148>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d027      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a3a      	ldr	r2, [pc, #232]	; (80068e8 <DMA_MultiBufferSetConfig+0x14c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a38      	ldr	r2, [pc, #224]	; (80068ec <DMA_MultiBufferSetConfig+0x150>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a37      	ldr	r2, [pc, #220]	; (80068f0 <DMA_MultiBufferSetConfig+0x154>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a35      	ldr	r2, [pc, #212]	; (80068f4 <DMA_MultiBufferSetConfig+0x158>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <DMA_MultiBufferSetConfig+0x15c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a32      	ldr	r2, [pc, #200]	; (80068fc <DMA_MultiBufferSetConfig+0x160>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a31      	ldr	r2, [pc, #196]	; (8006900 <DMA_MultiBufferSetConfig+0x164>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <DMA_MultiBufferSetConfig+0xae>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2f      	ldr	r2, [pc, #188]	; (8006904 <DMA_MultiBufferSetConfig+0x168>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <DMA_MultiBufferSetConfig+0xb2>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <DMA_MultiBufferSetConfig+0xb4>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d019      	beq.n	8006888 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d108      	bne.n	8006876 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006874:	e021      	b.n	80068ba <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	60da      	str	r2, [r3, #12]
}
 8006886:	e018      	b.n	80068ba <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d108      	bne.n	80068aa <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	60da      	str	r2, [r3, #12]
}
 80068a8:	e007      	b.n	80068ba <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	60da      	str	r2, [r3, #12]
}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40020010 	.word	0x40020010
 80068cc:	40020028 	.word	0x40020028
 80068d0:	40020040 	.word	0x40020040
 80068d4:	40020058 	.word	0x40020058
 80068d8:	40020070 	.word	0x40020070
 80068dc:	40020088 	.word	0x40020088
 80068e0:	400200a0 	.word	0x400200a0
 80068e4:	400200b8 	.word	0x400200b8
 80068e8:	40020410 	.word	0x40020410
 80068ec:	40020428 	.word	0x40020428
 80068f0:	40020440 	.word	0x40020440
 80068f4:	40020458 	.word	0x40020458
 80068f8:	40020470 	.word	0x40020470
 80068fc:	40020488 	.word	0x40020488
 8006900:	400204a0 	.word	0x400204a0
 8006904:	400204b8 	.word	0x400204b8

08006908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006908:	b480      	push	{r7}
 800690a:	b089      	sub	sp, #36	; 0x24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006916:	4b89      	ldr	r3, [pc, #548]	; (8006b3c <HAL_GPIO_Init+0x234>)
 8006918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800691a:	e194      	b.n	8006c46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	4013      	ands	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 8186 	beq.w	8006c40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d005      	beq.n	800694c <HAL_GPIO_Init+0x44>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d130      	bne.n	80069ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	2203      	movs	r2, #3
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4013      	ands	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4313      	orrs	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006982:	2201      	movs	r2, #1
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4013      	ands	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	091b      	lsrs	r3, r3, #4
 8006998:	f003 0201 	and.w	r2, r3, #1
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d017      	beq.n	80069ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	2203      	movs	r2, #3
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4013      	ands	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d123      	bne.n	8006a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	08da      	lsrs	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3208      	adds	r2, #8
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	220f      	movs	r2, #15
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4013      	ands	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	08da      	lsrs	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3208      	adds	r2, #8
 8006a38:	69b9      	ldr	r1, [r7, #24]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	4013      	ands	r3, r2
 8006a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0203 	and.w	r2, r3, #3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80e0 	beq.w	8006c40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a80:	4b2f      	ldr	r3, [pc, #188]	; (8006b40 <HAL_GPIO_Init+0x238>)
 8006a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a86:	4a2e      	ldr	r2, [pc, #184]	; (8006b40 <HAL_GPIO_Init+0x238>)
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a90:	4b2b      	ldr	r3, [pc, #172]	; (8006b40 <HAL_GPIO_Init+0x238>)
 8006a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a9e:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <HAL_GPIO_Init+0x23c>)
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	089b      	lsrs	r3, r3, #2
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	220f      	movs	r2, #15
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <HAL_GPIO_Init+0x240>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d052      	beq.n	8006b70 <HAL_GPIO_Init+0x268>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <HAL_GPIO_Init+0x244>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d031      	beq.n	8006b36 <HAL_GPIO_Init+0x22e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1e      	ldr	r2, [pc, #120]	; (8006b50 <HAL_GPIO_Init+0x248>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02b      	beq.n	8006b32 <HAL_GPIO_Init+0x22a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <HAL_GPIO_Init+0x24c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d025      	beq.n	8006b2e <HAL_GPIO_Init+0x226>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_GPIO_Init+0x250>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01f      	beq.n	8006b2a <HAL_GPIO_Init+0x222>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <HAL_GPIO_Init+0x254>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d019      	beq.n	8006b26 <HAL_GPIO_Init+0x21e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1a      	ldr	r2, [pc, #104]	; (8006b60 <HAL_GPIO_Init+0x258>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_GPIO_Init+0x21a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_GPIO_Init+0x25c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00d      	beq.n	8006b1e <HAL_GPIO_Init+0x216>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_GPIO_Init+0x260>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <HAL_GPIO_Init+0x212>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a17      	ldr	r2, [pc, #92]	; (8006b6c <HAL_GPIO_Init+0x264>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d101      	bne.n	8006b16 <HAL_GPIO_Init+0x20e>
 8006b12:	2309      	movs	r3, #9
 8006b14:	e02d      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b16:	230a      	movs	r3, #10
 8006b18:	e02b      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b1a:	2308      	movs	r3, #8
 8006b1c:	e029      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b1e:	2307      	movs	r3, #7
 8006b20:	e027      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b22:	2306      	movs	r3, #6
 8006b24:	e025      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b26:	2305      	movs	r3, #5
 8006b28:	e023      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	e021      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e01f      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e01d      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e01b      	b.n	8006b72 <HAL_GPIO_Init+0x26a>
 8006b3a:	bf00      	nop
 8006b3c:	58000080 	.word	0x58000080
 8006b40:	58024400 	.word	0x58024400
 8006b44:	58000400 	.word	0x58000400
 8006b48:	58020000 	.word	0x58020000
 8006b4c:	58020400 	.word	0x58020400
 8006b50:	58020800 	.word	0x58020800
 8006b54:	58020c00 	.word	0x58020c00
 8006b58:	58021000 	.word	0x58021000
 8006b5c:	58021400 	.word	0x58021400
 8006b60:	58021800 	.word	0x58021800
 8006b64:	58021c00 	.word	0x58021c00
 8006b68:	58022000 	.word	0x58022000
 8006b6c:	58022400 	.word	0x58022400
 8006b70:	2300      	movs	r3, #0
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	f002 0203 	and.w	r2, r2, #3
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4093      	lsls	r3, r2
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b82:	4938      	ldr	r1, [pc, #224]	; (8006c64 <HAL_GPIO_Init+0x35c>)
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	089b      	lsrs	r3, r3, #2
 8006b88:	3302      	adds	r3, #2
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	4013      	ands	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	3301      	adds	r3, #1
 8006c44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f47f ae63 	bne.w	800691c <HAL_GPIO_Init+0x14>
  }
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3724      	adds	r7, #36	; 0x24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	58000400 	.word	0x58000400

08006c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	807b      	strh	r3, [r7, #2]
 8006c74:	4613      	mov	r3, r2
 8006c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c78:	787b      	ldrb	r3, [r7, #1]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c7e:	887a      	ldrh	r2, [r7, #2]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006c84:	e003      	b.n	8006c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006c86:	887b      	ldrh	r3, [r7, #2]
 8006c88:	041a      	lsls	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	619a      	str	r2, [r3, #24]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cac:	887a      	ldrh	r2, [r7, #2]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	041a      	lsls	r2, r3, #16
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	43d9      	mvns	r1, r3
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	400b      	ands	r3, r1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	619a      	str	r2, [r3, #24]
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e07f      	b.n	8006de2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb fa1e 	bl	8002138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2224      	movs	r2, #36	; 0x24
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d107      	bne.n	8006d4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	e006      	b.n	8006d58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d104      	bne.n	8006d6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6859      	ldr	r1, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <HAL_I2C_Init+0x11c>)
 8006d76:	430b      	orrs	r3, r1
 8006d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	02008000 	.word	0x02008000

08006df0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	817b      	strh	r3, [r7, #10]
 8006e00:	4613      	mov	r3, r2
 8006e02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	f040 80da 	bne.w	8006fc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2C_Master_Transmit+0x30>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0d3      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e28:	f7fb fe2e 	bl	8002a88 <HAL_GetTick>
 8006e2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2319      	movs	r3, #25
 8006e34:	2201      	movs	r2, #1
 8006e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f9e6 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0be      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2221      	movs	r2, #33	; 0x21
 8006e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2210      	movs	r2, #16
 8006e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	893a      	ldrh	r2, [r7, #8]
 8006e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2bff      	cmp	r3, #255	; 0xff
 8006e7a:	d90e      	bls.n	8006e9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	22ff      	movs	r2, #255	; 0xff
 8006e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	8979      	ldrh	r1, [r7, #10]
 8006e8a:	4b51      	ldr	r3, [pc, #324]	; (8006fd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fbdc 	bl	8007650 <I2C_TransferConfig>
 8006e98:	e06c      	b.n	8006f74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	8979      	ldrh	r1, [r7, #10]
 8006eac:	4b48      	ldr	r3, [pc, #288]	; (8006fd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fbcb 	bl	8007650 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006eba:	e05b      	b.n	8006f74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	6a39      	ldr	r1, [r7, #32]
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f9e3 	bl	800728c <I2C_WaitOnTXISFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e07b      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	781a      	ldrb	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d034      	beq.n	8006f74 <HAL_I2C_Master_Transmit+0x184>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d130      	bne.n	8006f74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2180      	movs	r1, #128	; 0x80
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f975 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e04d      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2bff      	cmp	r3, #255	; 0xff
 8006f34:	d90e      	bls.n	8006f54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	22ff      	movs	r2, #255	; 0xff
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	8979      	ldrh	r1, [r7, #10]
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fb7f 	bl	8007650 <I2C_TransferConfig>
 8006f52:	e00f      	b.n	8006f74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	8979      	ldrh	r1, [r7, #10]
 8006f66:	2300      	movs	r3, #0
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fb6e 	bl	8007650 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d19e      	bne.n	8006ebc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	6a39      	ldr	r1, [r7, #32]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f9c2 	bl	800730c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e01a      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2220      	movs	r2, #32
 8006f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6859      	ldr	r1, [r3, #4]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006fa6:	400b      	ands	r3, r1
 8006fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	80002000 	.word	0x80002000
 8006fd4:	fe00e800 	.word	0xfe00e800

08006fd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	817b      	strh	r3, [r7, #10]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80db 	bne.w	80071b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_I2C_Master_Receive+0x30>
 8007004:	2302      	movs	r3, #2
 8007006:	e0d4      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007010:	f7fb fd3a 	bl	8002a88 <HAL_GetTick>
 8007014:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2319      	movs	r3, #25
 800701c:	2201      	movs	r2, #1
 800701e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f8f2 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e0bf      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2222      	movs	r2, #34	; 0x22
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2210      	movs	r2, #16
 800703e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	893a      	ldrh	r2, [r7, #8]
 8007052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705e:	b29b      	uxth	r3, r3
 8007060:	2bff      	cmp	r3, #255	; 0xff
 8007062:	d90e      	bls.n	8007082 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22ff      	movs	r2, #255	; 0xff
 8007068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706e:	b2da      	uxtb	r2, r3
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	4b52      	ldr	r3, [pc, #328]	; (80071bc <HAL_I2C_Master_Receive+0x1e4>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fae8 	bl	8007650 <I2C_TransferConfig>
 8007080:	e06d      	b.n	800715e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007090:	b2da      	uxtb	r2, r3
 8007092:	8979      	ldrh	r1, [r7, #10]
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <HAL_I2C_Master_Receive+0x1e4>)
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fad7 	bl	8007650 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80070a2:	e05c      	b.n	800715e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	6a39      	ldr	r1, [r7, #32]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f96b 	bl	8007384 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e07c      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d034      	beq.n	800715e <HAL_I2C_Master_Receive+0x186>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d130      	bne.n	800715e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	; 0x80
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 f880 	bl	800720c <I2C_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e04d      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2bff      	cmp	r3, #255	; 0xff
 800711e:	d90e      	bls.n	800713e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	22ff      	movs	r2, #255	; 0xff
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712a:	b2da      	uxtb	r2, r3
 800712c:	8979      	ldrh	r1, [r7, #10]
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fa8a 	bl	8007650 <I2C_TransferConfig>
 800713c:	e00f      	b.n	800715e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714c:	b2da      	uxtb	r2, r3
 800714e:	8979      	ldrh	r1, [r7, #10]
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fa79 	bl	8007650 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d19d      	bne.n	80070a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	6a39      	ldr	r1, [r7, #32]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f8cd 	bl	800730c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e01a      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2220      	movs	r2, #32
 8007182:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <HAL_I2C_Master_Receive+0x1e8>)
 8007190:	400b      	ands	r3, r1
 8007192:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	80002400 	.word	0x80002400
 80071c0:	fe00e800 	.word	0xfe00e800

080071c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d103      	bne.n	80071e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d007      	beq.n	8007200 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	619a      	str	r2, [r3, #24]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800721c:	e022      	b.n	8007264 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d01e      	beq.n	8007264 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007226:	f7fb fc2f 	bl	8002a88 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d302      	bcc.n	800723c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d113      	bne.n	8007264 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007240:	f043 0220 	orr.w	r2, r3, #32
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e00f      	b.n	8007284 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4013      	ands	r3, r2
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	bf0c      	ite	eq
 8007274:	2301      	moveq	r3, #1
 8007276:	2300      	movne	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	429a      	cmp	r2, r3
 8007280:	d0cd      	beq.n	800721e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007298:	e02c      	b.n	80072f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f8ea 	bl	8007478 <I2C_IsErrorOccurred>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e02a      	b.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b4:	d01e      	beq.n	80072f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fb fbe7 	bl	8002a88 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d113      	bne.n	80072f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e007      	b.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d1cb      	bne.n	800729a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007318:	e028      	b.n	800736c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f8aa 	bl	8007478 <I2C_IsErrorOccurred>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e026      	b.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fb fbab 	bl	8002a88 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d113      	bne.n	800736c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	f043 0220 	orr.w	r2, r3, #32
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e007      	b.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b20      	cmp	r3, #32
 8007378:	d1cf      	bne.n	800731a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007390:	e064      	b.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f86e 	bl	8007478 <I2C_IsErrorOccurred>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e062      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d138      	bne.n	8007426 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d105      	bne.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e04e      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d107      	bne.n	80073ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2210      	movs	r2, #16
 80073e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2204      	movs	r2, #4
 80073e8:	645a      	str	r2, [r3, #68]	; 0x44
 80073ea:	e002      	b.n	80073f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2220      	movs	r2, #32
 80073f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007406:	400b      	ands	r3, r1
 8007408:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e022      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007426:	f7fb fb2f 	bl	8002a88 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	d302      	bcc.n	800743c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10f      	bne.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007440:	f043 0220 	orr.w	r2, r3, #32
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e007      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d193      	bne.n	8007392 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	fe00e800 	.word	0xfe00e800

08007478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d075      	beq.n	8007590 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2210      	movs	r2, #16
 80074aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074ac:	e056      	b.n	800755c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b4:	d052      	beq.n	800755c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fb fae7 	bl	8002a88 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <I2C_IsErrorOccurred+0x54>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d147      	bne.n	800755c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d12e      	bne.n	800754e <I2C_IsErrorOccurred+0xd6>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f6:	d02a      	beq.n	800754e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80074f8:	7cfb      	ldrb	r3, [r7, #19]
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d027      	beq.n	800754e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800750c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800750e:	f7fb fabb 	bl	8002a88 <HAL_GetTick>
 8007512:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007514:	e01b      	b.n	800754e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007516:	f7fb fab7 	bl	8002a88 <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b19      	cmp	r3, #25
 8007522:	d914      	bls.n	800754e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	f043 0220 	orr.w	r2, r3, #32
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b20      	cmp	r3, #32
 800755a:	d1dc      	bne.n	8007516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b20      	cmp	r3, #32
 8007568:	d003      	beq.n	8007572 <I2C_IsErrorOccurred+0xfa>
 800756a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800756e:	2b00      	cmp	r3, #0
 8007570:	d09d      	beq.n	80074ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2220      	movs	r2, #32
 8007580:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	f043 0304 	orr.w	r3, r3, #4
 8007588:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	f043 0308 	orr.w	r3, r3, #8
 80075ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007602:	2b00      	cmp	r3, #0
 8007604:	d01c      	beq.n	8007640 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f7ff fddc 	bl	80071c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <I2C_IsErrorOccurred+0x1d4>)
 8007618:	400b      	ands	r3, r1
 800761a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	fe00e800 	.word	0xfe00e800

08007650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	817b      	strh	r3, [r7, #10]
 800765e:	4613      	mov	r3, r2
 8007660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007662:	897b      	ldrh	r3, [r7, #10]
 8007664:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007668:	7a7b      	ldrb	r3, [r7, #9]
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007670:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	4313      	orrs	r3, r2
 800767a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800767e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	0d5b      	lsrs	r3, r3, #21
 800768a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <I2C_TransferConfig+0x60>)
 8007690:	430b      	orrs	r3, r1
 8007692:	43db      	mvns	r3, r3
 8007694:	ea02 0103 	and.w	r1, r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	03ff63ff 	.word	0x03ff63ff

080076b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d138      	bne.n	800773c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e032      	b.n	800773e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	; 0x24
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6819      	ldr	r1, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	e000      	b.n	800773e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b20      	cmp	r3, #32
 800775e:	d139      	bne.n	80077d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800776a:	2302      	movs	r3, #2
 800776c:	e033      	b.n	80077d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2224      	movs	r2, #36	; 0x24
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800779c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077d4:	2302      	movs	r3, #2
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e097      	b.n	8007926 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fa fcf7 	bl	8002204 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d004      	beq.n	8007838 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007836:	d103      	bne.n	8007840 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 031e 	bic.w	r3, r3, #30
 800783e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4b38      	ldr	r3, [pc, #224]	; (8007930 <HAL_LPTIM_Init+0x14c>)
 8007850:	4013      	ands	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4b37      	ldr	r3, [pc, #220]	; (8007934 <HAL_LPTIM_Init+0x150>)
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007864:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800786a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007870:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007876:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800788e:	4313      	orrs	r3, r2
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d004      	beq.n	80078a8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078a6:	d107      	bne.n	80078b8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80078b0:	4313      	orrs	r3, r2
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00a      	beq.n	80078da <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80078cc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80078d2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a14      	ldr	r2, [pc, #80]	; (8007938 <HAL_LPTIM_Init+0x154>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <HAL_LPTIM_Init+0x112>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a12      	ldr	r2, [pc, #72]	; (800793c <HAL_LPTIM_Init+0x158>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d108      	bne.n	8007908 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
 8007906:	e009      	b.n	800791c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a0c      	ldr	r2, [pc, #48]	; (8007940 <HAL_LPTIM_Init+0x15c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d104      	bne.n	800791c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800791a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	ffff1f3f 	.word	0xffff1f3f
 8007934:	ff19f1fe 	.word	0xff19f1fe
 8007938:	40002400 	.word	0x40002400
 800793c:	58002400 	.word	0x58002400
 8007940:	58002800 	.word	0x58002800

08007944 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2210      	movs	r2, #16
 800797e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007988:	2110      	movs	r1, #16
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 f852 	bl	8007a34 <LPTIM_WaitForFlag>
 8007990:	4603      	mov	r3, r0
 8007992:	2b03      	cmp	r3, #3
 8007994:	d101      	bne.n	800799a <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e01d      	b.n	80079d6 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2208      	movs	r2, #8
 80079a0:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80079aa:	2108      	movs	r1, #8
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f841 	bl	8007a34 <LPTIM_WaitForFlag>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d101      	bne.n	80079bc <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e00c      	b.n	80079d6 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0204 	orr.w	r2, r2, #4
 80079ca:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_LPTIM_PWM_Stop>:
  * @brief  Stop the LPTIM PWM generation.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f850 	bl	8007a94 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f80e 	bl	8007a16 <HAL_LPTIM_GetState>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d101      	bne.n	8007a04 <HAL_LPTIM_PWM_Stop+0x26>
  {
    return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e004      	b.n	8007a0e <HAL_LPTIM_PWM_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007a24:	b2db      	uxtb	r3, r3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <LPTIM_WaitForFlag+0x58>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a12      	ldr	r2, [pc, #72]	; (8007a90 <LPTIM_WaitForFlag+0x5c>)
 8007a48:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4c:	0b9b      	lsrs	r3, r3, #14
 8007a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
 8007a56:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	4013      	ands	r3, r2
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d002      	beq.n	8007a7e <LPTIM_WaitForFlag+0x4a>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1ec      	bne.n	8007a58 <LPTIM_WaitForFlag+0x24>

  return result;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	24000030 	.word	0x24000030
 8007a90:	d1b71759 	.word	0xd1b71759

08007a94 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	; 0x30
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aaa:	2301      	movs	r3, #1
 8007aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f383 8810 	msr	PRIMASK, r3
}
 8007ab4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a81      	ldr	r2, [pc, #516]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d02d      	beq.n	8007b1c <LPTIM_Disable+0x88>
 8007ac0:	4a7f      	ldr	r2, [pc, #508]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d830      	bhi.n	8007b28 <LPTIM_Disable+0x94>
 8007ac6:	4a7f      	ldr	r2, [pc, #508]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d021      	beq.n	8007b10 <LPTIM_Disable+0x7c>
 8007acc:	4a7d      	ldr	r2, [pc, #500]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d82a      	bhi.n	8007b28 <LPTIM_Disable+0x94>
 8007ad2:	4a7d      	ldr	r2, [pc, #500]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d015      	beq.n	8007b04 <LPTIM_Disable+0x70>
 8007ad8:	4a7b      	ldr	r2, [pc, #492]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d824      	bhi.n	8007b28 <LPTIM_Disable+0x94>
 8007ade:	4a7b      	ldr	r2, [pc, #492]	; (8007ccc <LPTIM_Disable+0x238>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <LPTIM_Disable+0x58>
 8007ae4:	4a7a      	ldr	r2, [pc, #488]	; (8007cd0 <LPTIM_Disable+0x23c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d006      	beq.n	8007af8 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8007aea:	e01d      	b.n	8007b28 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007aec:	4b79      	ldr	r3, [pc, #484]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007af6:	e018      	b.n	8007b2a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007af8:	4b76      	ldr	r3, [pc, #472]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007afc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007b02:	e012      	b.n	8007b2a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007b04:	4b73      	ldr	r3, [pc, #460]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007b0e:	e00c      	b.n	8007b2a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007b10:	4b70      	ldr	r3, [pc, #448]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007b1a:	e006      	b.n	8007b2a <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007b1c:	4b6d      	ldr	r3, [pc, #436]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007b26:	e000      	b.n	8007b2a <LPTIM_Disable+0x96>
      break;
 8007b28:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a5a      	ldr	r2, [pc, #360]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d059      	beq.n	8007c10 <LPTIM_Disable+0x17c>
 8007b5c:	4a58      	ldr	r2, [pc, #352]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d867      	bhi.n	8007c32 <LPTIM_Disable+0x19e>
 8007b62:	4a58      	ldr	r2, [pc, #352]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d042      	beq.n	8007bee <LPTIM_Disable+0x15a>
 8007b68:	4a56      	ldr	r2, [pc, #344]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d861      	bhi.n	8007c32 <LPTIM_Disable+0x19e>
 8007b6e:	4a56      	ldr	r2, [pc, #344]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d02b      	beq.n	8007bcc <LPTIM_Disable+0x138>
 8007b74:	4a54      	ldr	r2, [pc, #336]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d85b      	bhi.n	8007c32 <LPTIM_Disable+0x19e>
 8007b7a:	4a54      	ldr	r2, [pc, #336]	; (8007ccc <LPTIM_Disable+0x238>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <LPTIM_Disable+0xf4>
 8007b80:	4a53      	ldr	r2, [pc, #332]	; (8007cd0 <LPTIM_Disable+0x23c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d011      	beq.n	8007baa <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8007b86:	e054      	b.n	8007c32 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8007b88:	4b52      	ldr	r3, [pc, #328]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8e:	4a51      	ldr	r2, [pc, #324]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8007b98:	4b4e      	ldr	r3, [pc, #312]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9e:	4a4d      	ldr	r2, [pc, #308]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8007ba8:	e044      	b.n	8007c34 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8007baa:	4b4a      	ldr	r3, [pc, #296]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bb0:	4a48      	ldr	r2, [pc, #288]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8007bba:	4b46      	ldr	r3, [pc, #280]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bc0:	4a44      	ldr	r2, [pc, #272]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007bca:	e033      	b.n	8007c34 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8007bcc:	4b41      	ldr	r3, [pc, #260]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bd2:	4a40      	ldr	r2, [pc, #256]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bd8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8007bdc:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007be2:	4a3c      	ldr	r2, [pc, #240]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007be4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007be8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007bec:	e022      	b.n	8007c34 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8007bee:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bf4:	4a37      	ldr	r2, [pc, #220]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007bf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8007bfe:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c04:	4a33      	ldr	r2, [pc, #204]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c0a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007c0e:	e011      	b.n	8007c34 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8007c10:	4b30      	ldr	r3, [pc, #192]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c16:	4a2f      	ldr	r2, [pc, #188]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8007c20:	4b2c      	ldr	r3, [pc, #176]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c26:	4a2b      	ldr	r2, [pc, #172]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8007c30:	e000      	b.n	8007c34 <LPTIM_Disable+0x1a0>
      break;
 8007c32:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <LPTIM_Disable+0x1ae>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80d0 	beq.w	8007de2 <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d031      	beq.n	8007cb0 <LPTIM_Disable+0x21c>
 8007c4c:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <LPTIM_Disable+0x22c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d842      	bhi.n	8007cd8 <LPTIM_Disable+0x244>
 8007c52:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d024      	beq.n	8007ca2 <LPTIM_Disable+0x20e>
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <LPTIM_Disable+0x230>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d83c      	bhi.n	8007cd8 <LPTIM_Disable+0x244>
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d017      	beq.n	8007c94 <LPTIM_Disable+0x200>
 8007c64:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <LPTIM_Disable+0x234>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d836      	bhi.n	8007cd8 <LPTIM_Disable+0x244>
 8007c6a:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <LPTIM_Disable+0x238>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <LPTIM_Disable+0x1e4>
 8007c70:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <LPTIM_Disable+0x23c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007c76:	e02f      	b.n	8007cd8 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8007c78:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c7e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007c82:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8007c84:	e029      	b.n	8007cda <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007c90:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007c92:	e022      	b.n	8007cda <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	4a0e      	ldr	r2, [pc, #56]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007c9a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c9e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007ca0:	e01b      	b.n	8007cda <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	4a0b      	ldr	r2, [pc, #44]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007ca8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007cac:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007cae:	e014      	b.n	8007cda <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8007cb0:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb4:	4a07      	ldr	r2, [pc, #28]	; (8007cd4 <LPTIM_Disable+0x240>)
 8007cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007cba:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8007cbc:	e00d      	b.n	8007cda <LPTIM_Disable+0x246>
 8007cbe:	bf00      	nop
 8007cc0:	58003000 	.word	0x58003000
 8007cc4:	58002c00 	.word	0x58002c00
 8007cc8:	58002800 	.word	0x58002800
 8007ccc:	40002400 	.word	0x40002400
 8007cd0:	58002400 	.word	0x58002400
 8007cd4:	58024400 	.word	0x58024400
        break;
 8007cd8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01a      	beq.n	8007d16 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007cf8:	2108      	movs	r1, #8
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fe9a 	bl	8007a34 <LPTIM_WaitForFlag>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d103      	bne.n	8007d0e <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2203      	movs	r2, #3
 8007d0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2208      	movs	r2, #8
 8007d14:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007d34:	2110      	movs	r1, #16
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fe7c 	bl	8007a34 <LPTIM_WaitForFlag>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d103      	bne.n	8007d4a <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2203      	movs	r2, #3
 8007d46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2210      	movs	r2, #16
 8007d50:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a33      	ldr	r2, [pc, #204]	; (8007e24 <LPTIM_Disable+0x390>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d039      	beq.n	8007dd0 <LPTIM_Disable+0x33c>
 8007d5c:	4a31      	ldr	r2, [pc, #196]	; (8007e24 <LPTIM_Disable+0x390>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d841      	bhi.n	8007de6 <LPTIM_Disable+0x352>
 8007d62:	4a31      	ldr	r2, [pc, #196]	; (8007e28 <LPTIM_Disable+0x394>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d02a      	beq.n	8007dbe <LPTIM_Disable+0x32a>
 8007d68:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <LPTIM_Disable+0x394>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d83b      	bhi.n	8007de6 <LPTIM_Disable+0x352>
 8007d6e:	4a2f      	ldr	r2, [pc, #188]	; (8007e2c <LPTIM_Disable+0x398>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d01b      	beq.n	8007dac <LPTIM_Disable+0x318>
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <LPTIM_Disable+0x398>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d835      	bhi.n	8007de6 <LPTIM_Disable+0x352>
 8007d7a:	4a2d      	ldr	r2, [pc, #180]	; (8007e30 <LPTIM_Disable+0x39c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <LPTIM_Disable+0x2f4>
 8007d80:	4a2c      	ldr	r2, [pc, #176]	; (8007e34 <LPTIM_Disable+0x3a0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8007d86:	e02e      	b.n	8007de6 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8007d88:	4b2b      	ldr	r3, [pc, #172]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d90:	4929      	ldr	r1, [pc, #164]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	4313      	orrs	r3, r2
 8007d96:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8007d98:	e026      	b.n	8007de8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8007d9a:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007da2:	4925      	ldr	r1, [pc, #148]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	4313      	orrs	r3, r2
 8007da8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007daa:	e01d      	b.n	8007de8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8007dac:	4b22      	ldr	r3, [pc, #136]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007db4:	4920      	ldr	r1, [pc, #128]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	4313      	orrs	r3, r2
 8007dba:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007dbc:	e014      	b.n	8007de8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8007dbe:	4b1e      	ldr	r3, [pc, #120]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dc6:	491c      	ldr	r1, [pc, #112]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007dce:	e00b      	b.n	8007de8 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8007dd0:	4b19      	ldr	r3, [pc, #100]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dd8:	4917      	ldr	r1, [pc, #92]	; (8007e38 <LPTIM_Disable+0x3a4>)
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8007de0:	e002      	b.n	8007de8 <LPTIM_Disable+0x354>
    }
  }
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <LPTIM_Disable+0x354>
        break;
 8007de6:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0201 	bic.w	r2, r2, #1
 8007df6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfe:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6a3a      	ldr	r2, [r7, #32]
 8007e06:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007e1c:	bf00      	nop
 8007e1e:	3730      	adds	r7, #48	; 0x30
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	58003000 	.word	0x58003000
 8007e28:	58002c00 	.word	0x58002c00
 8007e2c:	58002800 	.word	0x58002800
 8007e30:	40002400 	.word	0x40002400
 8007e34:	58002400 	.word	0x58002400
 8007e38:	58024400 	.word	0x58024400

08007e3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <HAL_PWREx_ConfigSupply+0x70>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d00a      	beq.n	8007e66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <HAL_PWREx_ConfigSupply+0x70>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d001      	beq.n	8007e62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e01f      	b.n	8007ea2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e01d      	b.n	8007ea2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <HAL_PWREx_ConfigSupply+0x70>)
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	f023 0207 	bic.w	r2, r3, #7
 8007e6e:	490f      	ldr	r1, [pc, #60]	; (8007eac <HAL_PWREx_ConfigSupply+0x70>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e76:	f7fa fe07 	bl	8002a88 <HAL_GetTick>
 8007e7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e7c:	e009      	b.n	8007e92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e7e:	f7fa fe03 	bl	8002a88 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8c:	d901      	bls.n	8007e92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e007      	b.n	8007ea2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e92:	4b06      	ldr	r3, [pc, #24]	; (8007eac <HAL_PWREx_ConfigSupply+0x70>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9e:	d1ee      	bne.n	8007e7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	58024800 	.word	0x58024800

08007eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08c      	sub	sp, #48	; 0x30
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f000 bc1d 	b.w	80086fe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8087 	beq.w	8007fe0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ed2:	4b99      	ldr	r3, [pc, #612]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007edc:	4b96      	ldr	r3, [pc, #600]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d007      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x48>
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	2b18      	cmp	r3, #24
 8007eec:	d110      	bne.n	8007f10 <HAL_RCC_OscConfig+0x60>
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d10b      	bne.n	8007f10 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef8:	4b8f      	ldr	r3, [pc, #572]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d06c      	beq.n	8007fde <HAL_RCC_OscConfig+0x12e>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d168      	bne.n	8007fde <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e3f6      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f18:	d106      	bne.n	8007f28 <HAL_RCC_OscConfig+0x78>
 8007f1a:	4b87      	ldr	r3, [pc, #540]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a86      	ldr	r2, [pc, #536]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	e02e      	b.n	8007f86 <HAL_RCC_OscConfig+0xd6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <HAL_RCC_OscConfig+0x9a>
 8007f30:	4b81      	ldr	r3, [pc, #516]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a80      	ldr	r2, [pc, #512]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	4b7e      	ldr	r3, [pc, #504]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a7d      	ldr	r2, [pc, #500]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	e01d      	b.n	8007f86 <HAL_RCC_OscConfig+0xd6>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f52:	d10c      	bne.n	8007f6e <HAL_RCC_OscConfig+0xbe>
 8007f54:	4b78      	ldr	r3, [pc, #480]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a77      	ldr	r2, [pc, #476]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	4b75      	ldr	r3, [pc, #468]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a74      	ldr	r2, [pc, #464]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e00b      	b.n	8007f86 <HAL_RCC_OscConfig+0xd6>
 8007f6e:	4b72      	ldr	r3, [pc, #456]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a71      	ldr	r2, [pc, #452]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	4b6f      	ldr	r3, [pc, #444]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6e      	ldr	r2, [pc, #440]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d013      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8e:	f7fa fd7b 	bl	8002a88 <HAL_GetTick>
 8007f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f96:	f7fa fd77 	bl	8002a88 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b64      	cmp	r3, #100	; 0x64
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e3aa      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fa8:	4b63      	ldr	r3, [pc, #396]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0f0      	beq.n	8007f96 <HAL_RCC_OscConfig+0xe6>
 8007fb4:	e014      	b.n	8007fe0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb6:	f7fa fd67 	bl	8002a88 <HAL_GetTick>
 8007fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fbe:	f7fa fd63 	bl	8002a88 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b64      	cmp	r3, #100	; 0x64
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e396      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fd0:	4b59      	ldr	r3, [pc, #356]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f0      	bne.n	8007fbe <HAL_RCC_OscConfig+0x10e>
 8007fdc:	e000      	b.n	8007fe0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80cb 	beq.w	8008184 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fee:	4b52      	ldr	r3, [pc, #328]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ff6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ff8:	4b4f      	ldr	r3, [pc, #316]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <HAL_RCC_OscConfig+0x164>
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	2b18      	cmp	r3, #24
 8008008:	d156      	bne.n	80080b8 <HAL_RCC_OscConfig+0x208>
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d151      	bne.n	80080b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008014:	4b48      	ldr	r3, [pc, #288]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_RCC_OscConfig+0x17c>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e368      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800802c:	4b42      	ldr	r3, [pc, #264]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f023 0219 	bic.w	r2, r3, #25
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	493f      	ldr	r1, [pc, #252]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800803a:	4313      	orrs	r3, r2
 800803c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800803e:	f7fa fd23 	bl	8002a88 <HAL_GetTick>
 8008042:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008044:	e008      	b.n	8008058 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008046:	f7fa fd1f 	bl	8002a88 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d901      	bls.n	8008058 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e352      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008058:	4b37      	ldr	r3, [pc, #220]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0f0      	beq.n	8008046 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008064:	f7fa fd40 	bl	8002ae8 <HAL_GetREVID>
 8008068:	4603      	mov	r3, r0
 800806a:	f241 0203 	movw	r2, #4099	; 0x1003
 800806e:	4293      	cmp	r3, r2
 8008070:	d817      	bhi.n	80080a2 <HAL_RCC_OscConfig+0x1f2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d108      	bne.n	800808c <HAL_RCC_OscConfig+0x1dc>
 800807a:	4b2f      	ldr	r3, [pc, #188]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008082:	4a2d      	ldr	r2, [pc, #180]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008088:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800808a:	e07b      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808c:	4b2a      	ldr	r3, [pc, #168]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	031b      	lsls	r3, r3, #12
 800809a:	4927      	ldr	r1, [pc, #156]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 800809c:	4313      	orrs	r3, r2
 800809e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080a0:	e070      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a2:	4b25      	ldr	r3, [pc, #148]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	061b      	lsls	r3, r3, #24
 80080b0:	4921      	ldr	r1, [pc, #132]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b6:	e065      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d048      	beq.n	8008152 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080c0:	4b1d      	ldr	r3, [pc, #116]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f023 0219 	bic.w	r2, r3, #25
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	491a      	ldr	r1, [pc, #104]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d2:	f7fa fcd9 	bl	8002a88 <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080da:	f7fa fcd5 	bl	8002a88 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e308      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080ec:	4b12      	ldr	r3, [pc, #72]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0f0      	beq.n	80080da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f8:	f7fa fcf6 	bl	8002ae8 <HAL_GetREVID>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8008102:	4293      	cmp	r3, r2
 8008104:	d81a      	bhi.n	800813c <HAL_RCC_OscConfig+0x28c>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2b40      	cmp	r3, #64	; 0x40
 800810c:	d108      	bne.n	8008120 <HAL_RCC_OscConfig+0x270>
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008116:	4a08      	ldr	r2, [pc, #32]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800811c:	6053      	str	r3, [r2, #4]
 800811e:	e031      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	031b      	lsls	r3, r3, #12
 800812e:	4902      	ldr	r1, [pc, #8]	; (8008138 <HAL_RCC_OscConfig+0x288>)
 8008130:	4313      	orrs	r3, r2
 8008132:	604b      	str	r3, [r1, #4]
 8008134:	e026      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
 800813c:	4b9a      	ldr	r3, [pc, #616]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	061b      	lsls	r3, r3, #24
 800814a:	4997      	ldr	r1, [pc, #604]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800814c:	4313      	orrs	r3, r2
 800814e:	604b      	str	r3, [r1, #4]
 8008150:	e018      	b.n	8008184 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008152:	4b95      	ldr	r3, [pc, #596]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a94      	ldr	r2, [pc, #592]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815e:	f7fa fc93 	bl	8002a88 <HAL_GetTick>
 8008162:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008164:	e008      	b.n	8008178 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008166:	f7fa fc8f 	bl	8002a88 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d901      	bls.n	8008178 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e2c2      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008178:	4b8b      	ldr	r3, [pc, #556]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1f0      	bne.n	8008166 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80a9 	beq.w	80082e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008192:	4b85      	ldr	r3, [pc, #532]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800819a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800819c:	4b82      	ldr	r3, [pc, #520]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d007      	beq.n	80081b8 <HAL_RCC_OscConfig+0x308>
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2b18      	cmp	r3, #24
 80081ac:	d13a      	bne.n	8008224 <HAL_RCC_OscConfig+0x374>
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d135      	bne.n	8008224 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081b8:	4b7b      	ldr	r3, [pc, #492]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <HAL_RCC_OscConfig+0x320>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	2b80      	cmp	r3, #128	; 0x80
 80081ca:	d001      	beq.n	80081d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e296      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081d0:	f7fa fc8a 	bl	8002ae8 <HAL_GetREVID>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80081da:	4293      	cmp	r3, r2
 80081dc:	d817      	bhi.n	800820e <HAL_RCC_OscConfig+0x35e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d108      	bne.n	80081f8 <HAL_RCC_OscConfig+0x348>
 80081e6:	4b70      	ldr	r3, [pc, #448]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80081ee:	4a6e      	ldr	r2, [pc, #440]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80081f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081f6:	e075      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081f8:	4b6b      	ldr	r3, [pc, #428]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	069b      	lsls	r3, r3, #26
 8008206:	4968      	ldr	r1, [pc, #416]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008208:	4313      	orrs	r3, r2
 800820a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800820c:	e06a      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800820e:	4b66      	ldr	r3, [pc, #408]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	061b      	lsls	r3, r3, #24
 800821c:	4962      	ldr	r1, [pc, #392]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800821e:	4313      	orrs	r3, r2
 8008220:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008222:	e05f      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d042      	beq.n	80082b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800822c:	4b5e      	ldr	r3, [pc, #376]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a5d      	ldr	r2, [pc, #372]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fa fc26 	bl	8002a88 <HAL_GetTick>
 800823c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008240:	f7fa fc22 	bl	8002a88 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e255      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008252:	4b55      	ldr	r3, [pc, #340]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f0      	beq.n	8008240 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800825e:	f7fa fc43 	bl	8002ae8 <HAL_GetREVID>
 8008262:	4603      	mov	r3, r0
 8008264:	f241 0203 	movw	r2, #4099	; 0x1003
 8008268:	4293      	cmp	r3, r2
 800826a:	d817      	bhi.n	800829c <HAL_RCC_OscConfig+0x3ec>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	2b20      	cmp	r3, #32
 8008272:	d108      	bne.n	8008286 <HAL_RCC_OscConfig+0x3d6>
 8008274:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800827c:	4a4a      	ldr	r2, [pc, #296]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800827e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008282:	6053      	str	r3, [r2, #4]
 8008284:	e02e      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
 8008286:	4b48      	ldr	r3, [pc, #288]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	069b      	lsls	r3, r3, #26
 8008294:	4944      	ldr	r1, [pc, #272]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008296:	4313      	orrs	r3, r2
 8008298:	604b      	str	r3, [r1, #4]
 800829a:	e023      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
 800829c:	4b42      	ldr	r3, [pc, #264]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	493f      	ldr	r1, [pc, #252]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60cb      	str	r3, [r1, #12]
 80082b0:	e018      	b.n	80082e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082b2:	4b3d      	ldr	r3, [pc, #244]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a3c      	ldr	r2, [pc, #240]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fa fbe3 	bl	8002a88 <HAL_GetTick>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082c4:	e008      	b.n	80082d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80082c6:	f7fa fbdf 	bl	8002a88 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e212      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082d8:	4b33      	ldr	r3, [pc, #204]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f0      	bne.n	80082c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d036      	beq.n	800835e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d019      	beq.n	800832c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082f8:	4b2b      	ldr	r3, [pc, #172]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008304:	f7fa fbc0 	bl	8002a88 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800830c:	f7fa fbbc 	bl	8002a88 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1ef      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800831e:	4b22      	ldr	r3, [pc, #136]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f0      	beq.n	800830c <HAL_RCC_OscConfig+0x45c>
 800832a:	e018      	b.n	800835e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800832c:	4b1e      	ldr	r3, [pc, #120]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800832e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008330:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fa fba6 	bl	8002a88 <HAL_GetTick>
 800833c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008340:	f7fa fba2 	bl	8002a88 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e1d5      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d039      	beq.n	80083de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01c      	beq.n	80083ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008372:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 8008378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800837c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800837e:	f7fa fb83 	bl	8002a88 <HAL_GetTick>
 8008382:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008386:	f7fa fb7f 	bl	8002a88 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e1b2      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008398:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <HAL_RCC_OscConfig+0x4f8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0f0      	beq.n	8008386 <HAL_RCC_OscConfig+0x4d6>
 80083a4:	e01b      	b.n	80083de <HAL_RCC_OscConfig+0x52e>
 80083a6:	bf00      	nop
 80083a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083ac:	4b9b      	ldr	r3, [pc, #620]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a9a      	ldr	r2, [pc, #616]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80083b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083b8:	f7fa fb66 	bl	8002a88 <HAL_GetTick>
 80083bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80083c0:	f7fa fb62 	bl	8002a88 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e195      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083d2:	4b92      	ldr	r3, [pc, #584]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f0      	bne.n	80083c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8081 	beq.w	80084ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083ec:	4b8c      	ldr	r3, [pc, #560]	; (8008620 <HAL_RCC_OscConfig+0x770>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a8b      	ldr	r2, [pc, #556]	; (8008620 <HAL_RCC_OscConfig+0x770>)
 80083f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083f8:	f7fa fb46 	bl	8002a88 <HAL_GetTick>
 80083fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008400:	f7fa fb42 	bl	8002a88 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b64      	cmp	r3, #100	; 0x64
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e175      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008412:	4b83      	ldr	r3, [pc, #524]	; (8008620 <HAL_RCC_OscConfig+0x770>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0f0      	beq.n	8008400 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d106      	bne.n	8008434 <HAL_RCC_OscConfig+0x584>
 8008426:	4b7d      	ldr	r3, [pc, #500]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	4a7c      	ldr	r2, [pc, #496]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6713      	str	r3, [r2, #112]	; 0x70
 8008432:	e02d      	b.n	8008490 <HAL_RCC_OscConfig+0x5e0>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10c      	bne.n	8008456 <HAL_RCC_OscConfig+0x5a6>
 800843c:	4b77      	ldr	r3, [pc, #476]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	4a76      	ldr	r2, [pc, #472]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	6713      	str	r3, [r2, #112]	; 0x70
 8008448:	4b74      	ldr	r3, [pc, #464]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800844a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844c:	4a73      	ldr	r2, [pc, #460]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800844e:	f023 0304 	bic.w	r3, r3, #4
 8008452:	6713      	str	r3, [r2, #112]	; 0x70
 8008454:	e01c      	b.n	8008490 <HAL_RCC_OscConfig+0x5e0>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b05      	cmp	r3, #5
 800845c:	d10c      	bne.n	8008478 <HAL_RCC_OscConfig+0x5c8>
 800845e:	4b6f      	ldr	r3, [pc, #444]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	4a6e      	ldr	r2, [pc, #440]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008464:	f043 0304 	orr.w	r3, r3, #4
 8008468:	6713      	str	r3, [r2, #112]	; 0x70
 800846a:	4b6c      	ldr	r3, [pc, #432]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	4a6b      	ldr	r2, [pc, #428]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008470:	f043 0301 	orr.w	r3, r3, #1
 8008474:	6713      	str	r3, [r2, #112]	; 0x70
 8008476:	e00b      	b.n	8008490 <HAL_RCC_OscConfig+0x5e0>
 8008478:	4b68      	ldr	r3, [pc, #416]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800847a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847c:	4a67      	ldr	r2, [pc, #412]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	6713      	str	r3, [r2, #112]	; 0x70
 8008484:	4b65      	ldr	r3, [pc, #404]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008488:	4a64      	ldr	r2, [pc, #400]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800848a:	f023 0304 	bic.w	r3, r3, #4
 800848e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d015      	beq.n	80084c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008498:	f7fa faf6 	bl	8002a88 <HAL_GetTick>
 800849c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800849e:	e00a      	b.n	80084b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a0:	f7fa faf2 	bl	8002a88 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e123      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084b6:	4b59      	ldr	r3, [pc, #356]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ee      	beq.n	80084a0 <HAL_RCC_OscConfig+0x5f0>
 80084c2:	e014      	b.n	80084ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c4:	f7fa fae0 	bl	8002a88 <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084cc:	f7fa fadc 	bl	8002a88 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e10d      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084e2:	4b4e      	ldr	r3, [pc, #312]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1ee      	bne.n	80084cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8102 	beq.w	80086fc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80084f8:	4b48      	ldr	r3, [pc, #288]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008500:	2b18      	cmp	r3, #24
 8008502:	f000 80bd 	beq.w	8008680 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b02      	cmp	r3, #2
 800850c:	f040 809e 	bne.w	800864c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008510:	4b42      	ldr	r3, [pc, #264]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a41      	ldr	r2, [pc, #260]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800851a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fa fab4 	bl	8002a88 <HAL_GetTick>
 8008520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008524:	f7fa fab0 	bl	8002a88 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e0e3      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008536:	4b39      	ldr	r3, [pc, #228]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f0      	bne.n	8008524 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008542:	4b36      	ldr	r3, [pc, #216]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008546:	4b37      	ldr	r3, [pc, #220]	; (8008624 <HAL_RCC_OscConfig+0x774>)
 8008548:	4013      	ands	r3, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008552:	0112      	lsls	r2, r2, #4
 8008554:	430a      	orrs	r2, r1
 8008556:	4931      	ldr	r1, [pc, #196]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008558:	4313      	orrs	r3, r2
 800855a:	628b      	str	r3, [r1, #40]	; 0x28
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	3b01      	subs	r3, #1
 8008562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	3b01      	subs	r3, #1
 800856c:	025b      	lsls	r3, r3, #9
 800856e:	b29b      	uxth	r3, r3
 8008570:	431a      	orrs	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	3b01      	subs	r3, #1
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008584:	3b01      	subs	r3, #1
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800858c:	4923      	ldr	r1, [pc, #140]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800858e:	4313      	orrs	r3, r2
 8008590:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a21      	ldr	r2, [pc, #132]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800859e:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a2:	4b21      	ldr	r3, [pc, #132]	; (8008628 <HAL_RCC_OscConfig+0x778>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80085aa:	00d2      	lsls	r2, r2, #3
 80085ac:	491b      	ldr	r1, [pc, #108]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085b2:	4b1a      	ldr	r3, [pc, #104]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	f023 020c 	bic.w	r2, r3, #12
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	4917      	ldr	r1, [pc, #92]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085c4:	4b15      	ldr	r3, [pc, #84]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	f023 0202 	bic.w	r2, r3, #2
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d0:	4912      	ldr	r1, [pc, #72]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	4a10      	ldr	r2, [pc, #64]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e2:	4b0e      	ldr	r3, [pc, #56]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a0d      	ldr	r2, [pc, #52]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	4a0a      	ldr	r2, [pc, #40]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4a07      	ldr	r2, [pc, #28]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a04      	ldr	r2, [pc, #16]	; (800861c <HAL_RCC_OscConfig+0x76c>)
 800860c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008612:	f7fa fa39 	bl	8002a88 <HAL_GetTick>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008618:	e011      	b.n	800863e <HAL_RCC_OscConfig+0x78e>
 800861a:	bf00      	nop
 800861c:	58024400 	.word	0x58024400
 8008620:	58024800 	.word	0x58024800
 8008624:	fffffc0c 	.word	0xfffffc0c
 8008628:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800862c:	f7fa fa2c 	bl	8002a88 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e05f      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800863e:	4b32      	ldr	r3, [pc, #200]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0f0      	beq.n	800862c <HAL_RCC_OscConfig+0x77c>
 800864a:	e057      	b.n	80086fc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800864c:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a2d      	ldr	r2, [pc, #180]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 8008652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008658:	f7fa fa16 	bl	8002a88 <HAL_GetTick>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008660:	f7fa fa12 	bl	8002a88 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e045      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008672:	4b25      	ldr	r3, [pc, #148]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x7b0>
 800867e:	e03d      	b.n	80086fc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008680:	4b21      	ldr	r3, [pc, #132]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008686:	4b20      	ldr	r3, [pc, #128]	; (8008708 <HAL_RCC_OscConfig+0x858>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	2b01      	cmp	r3, #1
 8008692:	d031      	beq.n	80086f8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f003 0203 	and.w	r2, r3, #3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800869e:	429a      	cmp	r2, r3
 80086a0:	d12a      	bne.n	80086f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	091b      	lsrs	r3, r3, #4
 80086a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d122      	bne.n	80086f8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086be:	429a      	cmp	r2, r3
 80086c0:	d11a      	bne.n	80086f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	0a5b      	lsrs	r3, r3, #9
 80086c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ce:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d111      	bne.n	80086f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	0c1b      	lsrs	r3, r3, #16
 80086d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d108      	bne.n	80086f8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	0e1b      	lsrs	r3, r3, #24
 80086ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d001      	beq.n	80086fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3730      	adds	r7, #48	; 0x30
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	58024400 	.word	0x58024400

0800870c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e19c      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008720:	4b8a      	ldr	r3, [pc, #552]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	429a      	cmp	r2, r3
 800872c:	d910      	bls.n	8008750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872e:	4b87      	ldr	r3, [pc, #540]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f023 020f 	bic.w	r2, r3, #15
 8008736:	4985      	ldr	r1, [pc, #532]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800873e:	4b83      	ldr	r3, [pc, #524]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d001      	beq.n	8008750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e184      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d010      	beq.n	800877e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	4b7b      	ldr	r3, [pc, #492]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008768:	429a      	cmp	r2, r3
 800876a:	d908      	bls.n	800877e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800876c:	4b78      	ldr	r3, [pc, #480]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	4975      	ldr	r1, [pc, #468]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800877a:	4313      	orrs	r3, r2
 800877c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	4b70      	ldr	r3, [pc, #448]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008796:	429a      	cmp	r2, r3
 8008798:	d908      	bls.n	80087ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800879a:	4b6d      	ldr	r3, [pc, #436]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	496a      	ldr	r1, [pc, #424]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0310 	and.w	r3, r3, #16
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d010      	beq.n	80087da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	699a      	ldr	r2, [r3, #24]
 80087bc:	4b64      	ldr	r3, [pc, #400]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d908      	bls.n	80087da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087c8:	4b61      	ldr	r3, [pc, #388]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	495e      	ldr	r1, [pc, #376]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69da      	ldr	r2, [r3, #28]
 80087ea:	4b59      	ldr	r3, [pc, #356]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d908      	bls.n	8008808 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087f6:	4b56      	ldr	r3, [pc, #344]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	4953      	ldr	r1, [pc, #332]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008804:	4313      	orrs	r3, r2
 8008806:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	4b4d      	ldr	r3, [pc, #308]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	429a      	cmp	r2, r3
 8008822:	d908      	bls.n	8008836 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008824:	4b4a      	ldr	r3, [pc, #296]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f023 020f 	bic.w	r2, r3, #15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4947      	ldr	r1, [pc, #284]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008832:	4313      	orrs	r3, r2
 8008834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d055      	beq.n	80088ee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008842:	4b43      	ldr	r3, [pc, #268]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4940      	ldr	r1, [pc, #256]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008850:	4313      	orrs	r3, r2
 8008852:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d107      	bne.n	800886c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800885c:	4b3c      	ldr	r3, [pc, #240]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d121      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0f6      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b03      	cmp	r3, #3
 8008872:	d107      	bne.n	8008884 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008874:	4b36      	ldr	r3, [pc, #216]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d115      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0ea      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d107      	bne.n	800889c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800888c:	4b30      	ldr	r3, [pc, #192]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0de      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800889c:	4b2c      	ldr	r3, [pc, #176]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0304 	and.w	r3, r3, #4
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e0d6      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088ac:	4b28      	ldr	r3, [pc, #160]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	f023 0207 	bic.w	r2, r3, #7
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4925      	ldr	r1, [pc, #148]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088be:	f7fa f8e3 	bl	8002a88 <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088c4:	e00a      	b.n	80088dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c6:	f7fa f8df 	bl	8002a88 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0be      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088dc:	4b1c      	ldr	r3, [pc, #112]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d1eb      	bne.n	80088c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d010      	beq.n	800891c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	429a      	cmp	r2, r3
 8008908:	d208      	bcs.n	800891c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	f023 020f 	bic.w	r2, r3, #15
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	490e      	ldr	r1, [pc, #56]	; (8008950 <HAL_RCC_ClockConfig+0x244>)
 8008918:	4313      	orrs	r3, r2
 800891a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d214      	bcs.n	8008954 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800892a:	4b08      	ldr	r3, [pc, #32]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f023 020f 	bic.w	r2, r3, #15
 8008932:	4906      	ldr	r1, [pc, #24]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	4313      	orrs	r3, r2
 8008938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800893a:	4b04      	ldr	r3, [pc, #16]	; (800894c <HAL_RCC_ClockConfig+0x240>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d005      	beq.n	8008954 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e086      	b.n	8008a5a <HAL_RCC_ClockConfig+0x34e>
 800894c:	52002000 	.word	0x52002000
 8008950:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	4b3f      	ldr	r3, [pc, #252]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800896c:	429a      	cmp	r2, r3
 800896e:	d208      	bcs.n	8008982 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008970:	4b3c      	ldr	r3, [pc, #240]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4939      	ldr	r1, [pc, #228]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 800897e:	4313      	orrs	r3, r2
 8008980:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695a      	ldr	r2, [r3, #20]
 8008992:	4b34      	ldr	r3, [pc, #208]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800899a:	429a      	cmp	r2, r3
 800899c:	d208      	bcs.n	80089b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800899e:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	492e      	ldr	r1, [pc, #184]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699a      	ldr	r2, [r3, #24]
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d208      	bcs.n	80089de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80089cc:	4b25      	ldr	r3, [pc, #148]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	4922      	ldr	r1, [pc, #136]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d010      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69da      	ldr	r2, [r3, #28]
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d208      	bcs.n	8008a0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80089fa:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	4917      	ldr	r1, [pc, #92]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a0c:	f000 f834 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008a10:	4602      	mov	r2, r0
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	0a1b      	lsrs	r3, r3, #8
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	4912      	ldr	r1, [pc, #72]	; (8008a68 <HAL_RCC_ClockConfig+0x35c>)
 8008a1e:	5ccb      	ldrb	r3, [r1, r3]
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <HAL_RCC_ClockConfig+0x358>)
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <HAL_RCC_ClockConfig+0x35c>)
 8008a34:	5cd3      	ldrb	r3, [r2, r3]
 8008a36:	f003 031f 	and.w	r3, r3, #31
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <HAL_RCC_ClockConfig+0x360>)
 8008a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a44:	4a0a      	ldr	r2, [pc, #40]	; (8008a70 <HAL_RCC_ClockConfig+0x364>)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <HAL_RCC_ClockConfig+0x368>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f9 ffd0 	bl	80029f4 <HAL_InitTick>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	58024400 	.word	0x58024400
 8008a68:	0800d7bc 	.word	0x0800d7bc
 8008a6c:	24000034 	.word	0x24000034
 8008a70:	24000030 	.word	0x24000030
 8008a74:	24000038 	.word	0x24000038

08008a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b089      	sub	sp, #36	; 0x24
 8008a7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a7e:	4bb3      	ldr	r3, [pc, #716]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a86:	2b18      	cmp	r3, #24
 8008a88:	f200 8155 	bhi.w	8008d36 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008d37 	.word	0x08008d37
 8008a9c:	08008d37 	.word	0x08008d37
 8008aa0:	08008d37 	.word	0x08008d37
 8008aa4:	08008d37 	.word	0x08008d37
 8008aa8:	08008d37 	.word	0x08008d37
 8008aac:	08008d37 	.word	0x08008d37
 8008ab0:	08008d37 	.word	0x08008d37
 8008ab4:	08008b1f 	.word	0x08008b1f
 8008ab8:	08008d37 	.word	0x08008d37
 8008abc:	08008d37 	.word	0x08008d37
 8008ac0:	08008d37 	.word	0x08008d37
 8008ac4:	08008d37 	.word	0x08008d37
 8008ac8:	08008d37 	.word	0x08008d37
 8008acc:	08008d37 	.word	0x08008d37
 8008ad0:	08008d37 	.word	0x08008d37
 8008ad4:	08008b25 	.word	0x08008b25
 8008ad8:	08008d37 	.word	0x08008d37
 8008adc:	08008d37 	.word	0x08008d37
 8008ae0:	08008d37 	.word	0x08008d37
 8008ae4:	08008d37 	.word	0x08008d37
 8008ae8:	08008d37 	.word	0x08008d37
 8008aec:	08008d37 	.word	0x08008d37
 8008af0:	08008d37 	.word	0x08008d37
 8008af4:	08008b2b 	.word	0x08008b2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008af8:	4b94      	ldr	r3, [pc, #592]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b04:	4b91      	ldr	r3, [pc, #580]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	08db      	lsrs	r3, r3, #3
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	4a90      	ldr	r2, [pc, #576]	; (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008b16:	e111      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b18:	4b8d      	ldr	r3, [pc, #564]	; (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b1a:	61bb      	str	r3, [r7, #24]
    break;
 8008b1c:	e10e      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008b1e:	4b8d      	ldr	r3, [pc, #564]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b20:	61bb      	str	r3, [r7, #24]
    break;
 8008b22:	e10b      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008b24:	4b8c      	ldr	r3, [pc, #560]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008b26:	61bb      	str	r3, [r7, #24]
    break;
 8008b28:	e108      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b2a:	4b88      	ldr	r3, [pc, #544]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008b34:	4b85      	ldr	r3, [pc, #532]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	091b      	lsrs	r3, r3, #4
 8008b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b40:	4b82      	ldr	r3, [pc, #520]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008b4a:	4b80      	ldr	r3, [pc, #512]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	08db      	lsrs	r3, r3, #3
 8008b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	fb02 f303 	mul.w	r3, r2, r3
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80e1 	beq.w	8008d30 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	f000 8083 	beq.w	8008c7c <HAL_RCC_GetSysClockFreq+0x204>
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	f200 80a1 	bhi.w	8008cc0 <HAL_RCC_GetSysClockFreq+0x248>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_RCC_GetSysClockFreq+0x114>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d056      	beq.n	8008c38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b8a:	e099      	b.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b8c:	4b6f      	ldr	r3, [pc, #444]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02d      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b98:	4b6c      	ldr	r3, [pc, #432]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	4a6b      	ldr	r2, [pc, #428]	; (8008d50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b62      	ldr	r3, [pc, #392]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008bf2:	e087      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008d60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c06:	4b51      	ldr	r3, [pc, #324]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c36:	e065      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4a:	4b40      	ldr	r3, [pc, #256]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c7a:	e043      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008d68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8e:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ca2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cbe:	e021      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008d64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ce6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d02:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008d04:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	0a5b      	lsrs	r3, r3, #9
 8008d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0e:	3301      	adds	r3, #1
 8008d10:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d28:	ee17 3a90 	vmov	r3, s15
 8008d2c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008d2e:	e005      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
    break;
 8008d34:	e002      	b.n	8008d3c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d38:	61bb      	str	r3, [r7, #24]
    break;
 8008d3a:	bf00      	nop
  }

  return sysclockfreq;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3724      	adds	r7, #36	; 0x24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	03d09000 	.word	0x03d09000
 8008d54:	003d0900 	.word	0x003d0900
 8008d58:	017d7840 	.word	0x017d7840
 8008d5c:	46000000 	.word	0x46000000
 8008d60:	4c742400 	.word	0x4c742400
 8008d64:	4a742400 	.word	0x4a742400
 8008d68:	4bbebc20 	.word	0x4bbebc20

08008d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d72:	f7ff fe81 	bl	8008a78 <HAL_RCC_GetSysClockFreq>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b10      	ldr	r3, [pc, #64]	; (8008dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	0a1b      	lsrs	r3, r3, #8
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	490f      	ldr	r1, [pc, #60]	; (8008dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d84:	5ccb      	ldrb	r3, [r1, r3]
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <HAL_RCC_GetHCLKFreq+0x50>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d9a:	5cd3      	ldrb	r3, [r2, r3]
 8008d9c:	f003 031f 	and.w	r3, r3, #31
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	fa22 f303 	lsr.w	r3, r2, r3
 8008da6:	4a07      	ldr	r2, [pc, #28]	; (8008dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008daa:	4a07      	ldr	r2, [pc, #28]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008db0:	4b04      	ldr	r3, [pc, #16]	; (8008dc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008db2:	681b      	ldr	r3, [r3, #0]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	0800d7bc 	.word	0x0800d7bc
 8008dc4:	24000034 	.word	0x24000034
 8008dc8:	24000030 	.word	0x24000030

08008dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008dd0:	f7ff ffcc 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	091b      	lsrs	r3, r3, #4
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	4904      	ldr	r1, [pc, #16]	; (8008df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008de2:	5ccb      	ldrb	r3, [r1, r3]
 8008de4:	f003 031f 	and.w	r3, r3, #31
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	58024400 	.word	0x58024400
 8008df4:	0800d7bc 	.word	0x0800d7bc

08008df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dfc:	f7ff ffb6 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8008e00:	4602      	mov	r2, r0
 8008e02:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	f003 0307 	and.w	r3, r3, #7
 8008e0c:	4904      	ldr	r1, [pc, #16]	; (8008e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e0e:	5ccb      	ldrb	r3, [r1, r3]
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	0800d7bc 	.word	0x0800d7bc

08008e24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e30:	2300      	movs	r3, #0
 8008e32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d03f      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e48:	d02a      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008e4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e4e:	d824      	bhi.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e54:	d018      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e5a:	d81e      	bhi.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e64:	d007      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008e66:	e018      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e68:	4ba3      	ldr	r3, [pc, #652]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4aa2      	ldr	r2, [pc, #648]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e74:	e015      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 f9d5 	bl	800a22c <RCCEx_PLL2_Config>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e86:	e00c      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3324      	adds	r3, #36	; 0x24
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f001 fa7e 	bl	800a390 <RCCEx_PLL3_Config>
 8008e94:	4603      	mov	r3, r0
 8008e96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e98:	e003      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e9e:	e000      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ea8:	4b93      	ldr	r3, [pc, #588]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb4:	4990      	ldr	r1, [pc, #576]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8008eba:	e001      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d03d      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d826      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ed4:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008ef1 	.word	0x08008ef1
 8008ee0:	08008eff 	.word	0x08008eff
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f29 	.word	0x08008f29
 8008eec:	08008f29 	.word	0x08008f29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef0:	4b81      	ldr	r3, [pc, #516]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	4a80      	ldr	r2, [pc, #512]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008efc:	e015      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3304      	adds	r3, #4
 8008f02:	2100      	movs	r1, #0
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 f991 	bl	800a22c <RCCEx_PLL2_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f0e:	e00c      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3324      	adds	r3, #36	; 0x24
 8008f14:	2100      	movs	r1, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 fa3a 	bl	800a390 <RCCEx_PLL3_Config>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f20:	e003      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	75fb      	strb	r3, [r7, #23]
      break;
 8008f26:	e000      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f30:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f34:	f023 0207 	bic.w	r2, r3, #7
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	496e      	ldr	r1, [pc, #440]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	650b      	str	r3, [r1, #80]	; 0x50
 8008f42:	e001      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d042      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f5c:	d02b      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f62:	d825      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f64:	2bc0      	cmp	r3, #192	; 0xc0
 8008f66:	d028      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008f68:	2bc0      	cmp	r3, #192	; 0xc0
 8008f6a:	d821      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f6c:	2b80      	cmp	r3, #128	; 0x80
 8008f6e:	d016      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008f70:	2b80      	cmp	r3, #128	; 0x80
 8008f72:	d81d      	bhi.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008f78:	2b40      	cmp	r3, #64	; 0x40
 8008f7a:	d007      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008f7c:	e018      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7e:	4b5e      	ldr	r3, [pc, #376]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4a5d      	ldr	r2, [pc, #372]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f8a:	e017      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3304      	adds	r3, #4
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f001 f94a 	bl	800a22c <RCCEx_PLL2_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f9c:	e00e      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3324      	adds	r3, #36	; 0x24
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f001 f9f3 	bl	800a390 <RCCEx_PLL3_Config>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008fae:	e005      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb4:	e002      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008fb6:	bf00      	nop
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d109      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fc2:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fce:	494a      	ldr	r1, [pc, #296]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	650b      	str	r3, [r1, #80]	; 0x50
 8008fd4:	e001      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
 8008fd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d049      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ff0:	d030      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ff6:	d82a      	bhi.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ff8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ffc:	d02c      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008ffe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009002:	d824      	bhi.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009008:	d018      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800900a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800900e:	d81e      	bhi.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009018:	d007      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800901a:	e018      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800901c:	4b36      	ldr	r3, [pc, #216]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	4a35      	ldr	r2, [pc, #212]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009028:	e017      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3304      	adds	r3, #4
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f8fb 	bl	800a22c <RCCEx_PLL2_Config>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800903a:	e00e      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3324      	adds	r3, #36	; 0x24
 8009040:	2100      	movs	r1, #0
 8009042:	4618      	mov	r0, r3
 8009044:	f001 f9a4 	bl	800a390 <RCCEx_PLL3_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800904c:	e005      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]
      break;
 8009052:	e002      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009060:	4b25      	ldr	r3, [pc, #148]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009064:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800906e:	4922      	ldr	r1, [pc, #136]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009070:	4313      	orrs	r3, r2
 8009072:	658b      	str	r3, [r1, #88]	; 0x58
 8009074:	e001      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009082:	2b00      	cmp	r3, #0
 8009084:	d04b      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800908c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009090:	d030      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009096:	d82a      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009098:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800909c:	d02e      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800909e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090a2:	d824      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a8:	d018      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80090aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ae:	d81e      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80090b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090b8:	d007      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80090ba:	e018      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090bc:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a0d      	ldr	r2, [pc, #52]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80090c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090c8:	e019      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3304      	adds	r3, #4
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f8ab 	bl	800a22c <RCCEx_PLL2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80090da:	e010      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	2100      	movs	r1, #0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 f954 	bl	800a390 <RCCEx_PLL3_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090ec:	e007      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	75fb      	strb	r3, [r7, #23]
      break;
 80090f2:	e004      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80090f4:	bf00      	nop
 80090f6:	e002      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80090f8:	58024400 	.word	0x58024400
      break;
 80090fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009104:	4b99      	ldr	r3, [pc, #612]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009108:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009112:	4996      	ldr	r1, [pc, #600]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009114:	4313      	orrs	r3, r2
 8009116:	658b      	str	r3, [r1, #88]	; 0x58
 8009118:	e001      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d032      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912e:	2b30      	cmp	r3, #48	; 0x30
 8009130:	d01c      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009132:	2b30      	cmp	r3, #48	; 0x30
 8009134:	d817      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009136:	2b20      	cmp	r3, #32
 8009138:	d00c      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800913a:	2b20      	cmp	r3, #32
 800913c:	d813      	bhi.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d016      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009142:	2b10      	cmp	r3, #16
 8009144:	d10f      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009146:	4b89      	ldr	r3, [pc, #548]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	4a88      	ldr	r2, [pc, #544]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800914c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009152:	e00e      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3304      	adds	r3, #4
 8009158:	2102      	movs	r1, #2
 800915a:	4618      	mov	r0, r3
 800915c:	f001 f866 	bl	800a22c <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009164:	e005      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	75fb      	strb	r3, [r7, #23]
      break;
 800916a:	e002      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800916c:	bf00      	nop
 800916e:	e000      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009178:	4b7c      	ldr	r3, [pc, #496]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800917a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009184:	4979      	ldr	r1, [pc, #484]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009186:	4313      	orrs	r3, r2
 8009188:	64cb      	str	r3, [r1, #76]	; 0x4c
 800918a:	e001      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d047      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091a4:	d030      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091aa:	d82a      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091b0:	d02c      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80091b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091b6:	d824      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091bc:	d018      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80091be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091c2:	d81e      	bhi.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80091c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091cc:	d007      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80091ce:	e018      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d0:	4b66      	ldr	r3, [pc, #408]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a65      	ldr	r2, [pc, #404]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80091d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80091dc:	e017      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f001 f821 	bl	800a22c <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80091ee:	e00e      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 f8ca 	bl	800a390 <RCCEx_PLL3_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009200:	e005      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]
      break;
 8009206:	e002      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800920c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d109      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009214:	4b55      	ldr	r3, [pc, #340]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009218:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009220:	4952      	ldr	r1, [pc, #328]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009222:	4313      	orrs	r3, r2
 8009224:	650b      	str	r3, [r1, #80]	; 0x50
 8009226:	e001      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d049      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800923c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009240:	d02e      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009246:	d828      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009248:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800924c:	d02a      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800924e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009252:	d822      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009254:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009258:	d026      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800925a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800925e:	d81c      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009264:	d010      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800926a:	d816      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01d      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009274:	d111      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	2101      	movs	r1, #1
 800927c:	4618      	mov	r0, r3
 800927e:	f000 ffd5 	bl	800a22c <RCCEx_PLL2_Config>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009286:	e012      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3324      	adds	r3, #36	; 0x24
 800928c:	2101      	movs	r1, #1
 800928e:	4618      	mov	r0, r3
 8009290:	f001 f87e 	bl	800a390 <RCCEx_PLL3_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009298:	e009      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	75fb      	strb	r3, [r7, #23]
      break;
 800929e:	e006      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092a0:	bf00      	nop
 80092a2:	e004      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092a4:	bf00      	nop
 80092a6:	e002      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092a8:	bf00      	nop
 80092aa:	e000      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80092ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d109      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092c0:	492a      	ldr	r1, [pc, #168]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	650b      	str	r3, [r1, #80]	; 0x50
 80092c6:	e001      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d04d      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e2:	d02e      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80092e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092e8:	d828      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80092ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ee:	d02a      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80092f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092f4:	d822      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80092f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092fa:	d026      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80092fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009300:	d81c      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009306:	d010      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d816      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01d      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009316:	d111      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3304      	adds	r3, #4
 800931c:	2101      	movs	r1, #1
 800931e:	4618      	mov	r0, r3
 8009320:	f000 ff84 	bl	800a22c <RCCEx_PLL2_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009328:	e012      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3324      	adds	r3, #36	; 0x24
 800932e:	2101      	movs	r1, #1
 8009330:	4618      	mov	r0, r3
 8009332:	f001 f82d 	bl	800a390 <RCCEx_PLL3_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800933a:	e009      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
      break;
 8009340:	e006      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009342:	bf00      	nop
 8009344:	e004      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009346:	bf00      	nop
 8009348:	e002      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800934a:	bf00      	nop
 800934c:	e000      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800934e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10c      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009356:	4b05      	ldr	r3, [pc, #20]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009364:	4901      	ldr	r1, [pc, #4]	; (800936c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009366:	4313      	orrs	r3, r2
 8009368:	658b      	str	r3, [r1, #88]	; 0x58
 800936a:	e003      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800936c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02f      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009388:	d00e      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800938a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800938e:	d814      	bhi.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d015      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009398:	d10f      	bne.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939a:	4baf      	ldr	r3, [pc, #700]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	4aae      	ldr	r2, [pc, #696]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093a6:	e00c      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2101      	movs	r1, #1
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 ff3c 	bl	800a22c <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80093b8:	e003      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	75fb      	strb	r3, [r7, #23]
      break;
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80093c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d109      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80093c8:	4ba3      	ldr	r3, [pc, #652]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d4:	49a0      	ldr	r1, [pc, #640]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	650b      	str	r3, [r1, #80]	; 0x50
 80093da:	e001      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d032      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d81b      	bhi.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80093f4:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009433 	.word	0x08009433
 8009400:	0800940d 	.word	0x0800940d
 8009404:	0800941b 	.word	0x0800941b
 8009408:	08009433 	.word	0x08009433
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940c:	4b92      	ldr	r3, [pc, #584]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a91      	ldr	r2, [pc, #580]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009418:	e00c      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3304      	adds	r3, #4
 800941e:	2102      	movs	r1, #2
 8009420:	4618      	mov	r0, r3
 8009422:	f000 ff03 	bl	800a22c <RCCEx_PLL2_Config>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800942a:	e003      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	75fb      	strb	r3, [r7, #23]
      break;
 8009430:	e000      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800943a:	4b87      	ldr	r3, [pc, #540]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	f023 0203 	bic.w	r2, r3, #3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009446:	4984      	ldr	r1, [pc, #528]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009448:	4313      	orrs	r3, r2
 800944a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800944c:	e001      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 8086 	beq.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009460:	4b7e      	ldr	r3, [pc, #504]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a7d      	ldr	r2, [pc, #500]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800946a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800946c:	f7f9 fb0c 	bl	8002a88 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009472:	e009      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009474:	f7f9 fb08 	bl	8002a88 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b64      	cmp	r3, #100	; 0x64
 8009480:	d902      	bls.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	75fb      	strb	r3, [r7, #23]
        break;
 8009486:	e005      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009488:	4b74      	ldr	r3, [pc, #464]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ef      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d166      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800949a:	4b6f      	ldr	r3, [pc, #444]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800949c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094a4:	4053      	eors	r3, r2
 80094a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d013      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094ae:	4b6a      	ldr	r3, [pc, #424]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094b8:	4b67      	ldr	r3, [pc, #412]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094bc:	4a66      	ldr	r2, [pc, #408]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094c4:	4b64      	ldr	r3, [pc, #400]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c8:	4a63      	ldr	r2, [pc, #396]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094d0:	4a61      	ldr	r2, [pc, #388]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e0:	d115      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e2:	f7f9 fad1 	bl	8002a88 <HAL_GetTick>
 80094e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094e8:	e00b      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ea:	f7f9 facd 	bl	8002a88 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d902      	bls.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	75fb      	strb	r3, [r7, #23]
            break;
 8009500:	e005      	b.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009502:	4b55      	ldr	r3, [pc, #340]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0ed      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d126      	bne.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800951a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009522:	d10d      	bne.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009524:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009532:	0919      	lsrs	r1, r3, #4
 8009534:	4b4a      	ldr	r3, [pc, #296]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009536:	400b      	ands	r3, r1
 8009538:	4947      	ldr	r1, [pc, #284]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800953a:	4313      	orrs	r3, r2
 800953c:	610b      	str	r3, [r1, #16]
 800953e:	e005      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009540:	4b45      	ldr	r3, [pc, #276]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	4a44      	ldr	r2, [pc, #272]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009546:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800954a:	6113      	str	r3, [r2, #16]
 800954c:	4b42      	ldr	r3, [pc, #264]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800954e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800955a:	493f      	ldr	r1, [pc, #252]	; (8009658 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800955c:	4313      	orrs	r3, r2
 800955e:	670b      	str	r3, [r1, #112]	; 0x70
 8009560:	e004      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	75bb      	strb	r3, [r7, #22]
 8009566:	e001      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8085 	beq.w	8009684 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800957e:	2b28      	cmp	r3, #40	; 0x28
 8009580:	d866      	bhi.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	08009665 	.word	0x08009665
 800958c:	08009651 	.word	0x08009651
 8009590:	08009651 	.word	0x08009651
 8009594:	08009651 	.word	0x08009651
 8009598:	08009651 	.word	0x08009651
 800959c:	08009651 	.word	0x08009651
 80095a0:	08009651 	.word	0x08009651
 80095a4:	08009651 	.word	0x08009651
 80095a8:	0800962d 	.word	0x0800962d
 80095ac:	08009651 	.word	0x08009651
 80095b0:	08009651 	.word	0x08009651
 80095b4:	08009651 	.word	0x08009651
 80095b8:	08009651 	.word	0x08009651
 80095bc:	08009651 	.word	0x08009651
 80095c0:	08009651 	.word	0x08009651
 80095c4:	08009651 	.word	0x08009651
 80095c8:	0800963f 	.word	0x0800963f
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009651 	.word	0x08009651
 80095d4:	08009651 	.word	0x08009651
 80095d8:	08009651 	.word	0x08009651
 80095dc:	08009651 	.word	0x08009651
 80095e0:	08009651 	.word	0x08009651
 80095e4:	08009651 	.word	0x08009651
 80095e8:	08009665 	.word	0x08009665
 80095ec:	08009651 	.word	0x08009651
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009651 	.word	0x08009651
 8009600:	08009651 	.word	0x08009651
 8009604:	08009651 	.word	0x08009651
 8009608:	08009665 	.word	0x08009665
 800960c:	08009651 	.word	0x08009651
 8009610:	08009651 	.word	0x08009651
 8009614:	08009651 	.word	0x08009651
 8009618:	08009651 	.word	0x08009651
 800961c:	08009651 	.word	0x08009651
 8009620:	08009651 	.word	0x08009651
 8009624:	08009651 	.word	0x08009651
 8009628:	08009665 	.word	0x08009665
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	2101      	movs	r1, #1
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fdfa 	bl	800a22c <RCCEx_PLL2_Config>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800963c:	e013      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	2101      	movs	r1, #1
 8009644:	4618      	mov	r0, r3
 8009646:	f000 fea3 	bl	800a390 <RCCEx_PLL3_Config>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800964e:	e00a      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	75fb      	strb	r3, [r7, #23]
      break;
 8009654:	e007      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009656:	bf00      	nop
 8009658:	58024400 	.word	0x58024400
 800965c:	58024800 	.word	0x58024800
 8009660:	00ffffcf 	.word	0x00ffffcf
      break;
 8009664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800966c:	4b96      	ldr	r3, [pc, #600]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800966e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009670:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009678:	4993      	ldr	r1, [pc, #588]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800967a:	4313      	orrs	r3, r2
 800967c:	654b      	str	r3, [r1, #84]	; 0x54
 800967e:	e001      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d038      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009694:	2b05      	cmp	r3, #5
 8009696:	d821      	bhi.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096e3 	.word	0x080096e3
 80096a4:	080096b9 	.word	0x080096b9
 80096a8:	080096cb 	.word	0x080096cb
 80096ac:	080096e3 	.word	0x080096e3
 80096b0:	080096e3 	.word	0x080096e3
 80096b4:	080096e3 	.word	0x080096e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3304      	adds	r3, #4
 80096bc:	2101      	movs	r1, #1
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fdb4 	bl	800a22c <RCCEx_PLL2_Config>
 80096c4:	4603      	mov	r3, r0
 80096c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80096c8:	e00c      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3324      	adds	r3, #36	; 0x24
 80096ce:	2101      	movs	r1, #1
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fe5d 	bl	800a390 <RCCEx_PLL3_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80096da:	e003      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	75fb      	strb	r3, [r7, #23]
      break;
 80096e0:	e000      	b.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80096e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d109      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096ea:	4b77      	ldr	r3, [pc, #476]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f023 0207 	bic.w	r2, r3, #7
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f6:	4974      	ldr	r1, [pc, #464]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	654b      	str	r3, [r1, #84]	; 0x54
 80096fc:	e001      	b.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	d03a      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009714:	2b05      	cmp	r3, #5
 8009716:	d821      	bhi.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009718:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	08009763 	.word	0x08009763
 8009724:	08009739 	.word	0x08009739
 8009728:	0800974b 	.word	0x0800974b
 800972c:	08009763 	.word	0x08009763
 8009730:	08009763 	.word	0x08009763
 8009734:	08009763 	.word	0x08009763
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3304      	adds	r3, #4
 800973c:	2101      	movs	r1, #1
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fd74 	bl	800a22c <RCCEx_PLL2_Config>
 8009744:	4603      	mov	r3, r0
 8009746:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009748:	e00c      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3324      	adds	r3, #36	; 0x24
 800974e:	2101      	movs	r1, #1
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fe1d 	bl	800a390 <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	75fb      	strb	r3, [r7, #23]
      break;
 8009760:	e000      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8009762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800976a:	4b57      	ldr	r3, [pc, #348]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800976c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800976e:	f023 0207 	bic.w	r2, r3, #7
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	4953      	ldr	r1, [pc, #332]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800977a:	4313      	orrs	r3, r2
 800977c:	658b      	str	r3, [r1, #88]	; 0x58
 800977e:	e001      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
 8009782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	d04b      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800979a:	d02e      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800979c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097a0:	d828      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a6:	d02a      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ac:	d822      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b2:	d026      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80097b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097b8:	d81c      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097be:	d010      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80097c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c4:	d816      	bhi.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d01d      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80097ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ce:	d111      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fd28 	bl	800a22c <RCCEx_PLL2_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80097e0:	e012      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3324      	adds	r3, #36	; 0x24
 80097e6:	2102      	movs	r1, #2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fdd1 	bl	800a390 <RCCEx_PLL3_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80097f2:	e009      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	75fb      	strb	r3, [r7, #23]
      break;
 80097f8:	e006      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80097fa:	bf00      	nop
 80097fc:	e004      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80097fe:	bf00      	nop
 8009800:	e002      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009802:	bf00      	nop
 8009804:	e000      	b.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8009806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800980e:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800981c:	492a      	ldr	r1, [pc, #168]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800981e:	4313      	orrs	r3, r2
 8009820:	654b      	str	r3, [r1, #84]	; 0x54
 8009822:	e001      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d04d      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800983a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800983e:	d02e      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009840:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009844:	d828      	bhi.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800984a:	d02a      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009850:	d822      	bhi.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009856:	d026      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800985c:	d81c      	bhi.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800985e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009862:	d010      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009868:	d816      	bhi.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01d      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800986e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009872:	d111      	bne.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fcd6 	bl	800a22c <RCCEx_PLL2_Config>
 8009880:	4603      	mov	r3, r0
 8009882:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009884:	e012      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3324      	adds	r3, #36	; 0x24
 800988a:	2102      	movs	r1, #2
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fd7f 	bl	800a390 <RCCEx_PLL3_Config>
 8009892:	4603      	mov	r3, r0
 8009894:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009896:	e009      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]
      break;
 800989c:	e006      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800989e:	bf00      	nop
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098a2:	bf00      	nop
 80098a4:	e002      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098a6:	bf00      	nop
 80098a8:	e000      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80098aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098c0:	4901      	ldr	r1, [pc, #4]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	658b      	str	r3, [r1, #88]	; 0x58
 80098c6:	e003      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80098c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	7dfb      	ldrb	r3, [r7, #23]
 80098ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d04b      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80098e6:	d02e      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80098e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80098ec:	d828      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80098ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f2:	d02a      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f8:	d822      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80098fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80098fe:	d026      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8009900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009904:	d81c      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800990a:	d010      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800990c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009910:	d816      	bhi.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01d      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8009916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800991a:	d111      	bne.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3304      	adds	r3, #4
 8009920:	2100      	movs	r1, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fc82 	bl	800a22c <RCCEx_PLL2_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800992c:	e012      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3324      	adds	r3, #36	; 0x24
 8009932:	2102      	movs	r1, #2
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fd2b 	bl	800a390 <RCCEx_PLL3_Config>
 800993a:	4603      	mov	r3, r0
 800993c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800993e:	e009      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	75fb      	strb	r3, [r7, #23]
      break;
 8009944:	e006      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009946:	bf00      	nop
 8009948:	e004      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800994a:	bf00      	nop
 800994c:	e002      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800994e:	bf00      	nop
 8009950:	e000      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800995a:	4b9d      	ldr	r3, [pc, #628]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009968:	4999      	ldr	r1, [pc, #612]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800996a:	4313      	orrs	r3, r2
 800996c:	658b      	str	r3, [r1, #88]	; 0x58
 800996e:	e001      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0308 	and.w	r3, r3, #8
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01a      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998a:	d10a      	bne.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	2102      	movs	r1, #2
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fcfc 	bl	800a390 <RCCEx_PLL3_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80099a2:	4b8b      	ldr	r3, [pc, #556]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099b0:	4987      	ldr	r1, [pc, #540]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0310 	and.w	r3, r3, #16
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01a      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099cc:	d10a      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3324      	adds	r3, #36	; 0x24
 80099d2:	2102      	movs	r1, #2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fcdb 	bl	800a390 <RCCEx_PLL3_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099e4:	4b7a      	ldr	r3, [pc, #488]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099f2:	4977      	ldr	r1, [pc, #476]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d034      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a0e:	d01d      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a14:	d817      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a1e:	d009      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009a20:	e011      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3304      	adds	r3, #4
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 fbff 	bl	800a22c <RCCEx_PLL2_Config>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a32:	e00c      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3324      	adds	r3, #36	; 0x24
 8009a38:	2102      	movs	r1, #2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 fca8 	bl	800a390 <RCCEx_PLL3_Config>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a54:	4b5e      	ldr	r3, [pc, #376]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a62:	495b      	ldr	r1, [pc, #364]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	658b      	str	r3, [r1, #88]	; 0x58
 8009a68:	e001      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d033      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a84:	d01c      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8009a86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a8a:	d816      	bhi.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a90:	d003      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a96:	d007      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009a98:	e00f      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a9a:	4b4d      	ldr	r3, [pc, #308]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	4a4c      	ldr	r2, [pc, #304]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009aa6:	e00c      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3324      	adds	r3, #36	; 0x24
 8009aac:	2101      	movs	r1, #1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fc6e 	bl	800a390 <RCCEx_PLL3_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009ab8:	e003      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
      break;
 8009abe:	e000      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ac8:	4b41      	ldr	r3, [pc, #260]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad6:	493e      	ldr	r1, [pc, #248]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	654b      	str	r3, [r1, #84]	; 0x54
 8009adc:	e001      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ade:	7dfb      	ldrb	r3, [r7, #23]
 8009ae0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d029      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8009af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009afa:	d007      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8009afc:	e00f      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009afe:	4b34      	ldr	r3, [pc, #208]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	4a33      	ldr	r2, [pc, #204]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b0a:	e00b      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	2102      	movs	r1, #2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fb8a 	bl	800a22c <RCCEx_PLL2_Config>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009b1c:	e002      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	75fb      	strb	r3, [r7, #23]
      break;
 8009b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b2a:	4b29      	ldr	r3, [pc, #164]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b36:	4926      	ldr	r1, [pc, #152]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b3c:	e001      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3324      	adds	r3, #36	; 0x24
 8009b52:	2102      	movs	r1, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fc1b 	bl	800a390 <RCCEx_PLL3_Config>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d033      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b78:	d017      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b7e:	d811      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b84:	d013      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b8a:	d80b      	bhi.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d010      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b94:	d106      	bne.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b96:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009ba2:	e007      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba8:	e004      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009baa:	bf00      	nop
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10c      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bc6:	4902      	ldr	r1, [pc, #8]	; (8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	654b      	str	r3, [r1, #84]	; 0x54
 8009bcc:	e004      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009bce:	bf00      	nop
 8009bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d008      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009be4:	4b31      	ldr	r3, [pc, #196]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf0:	492e      	ldr	r1, [pc, #184]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d009      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c02:	4b2a      	ldr	r3, [pc, #168]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009c10:	4926      	ldr	r1, [pc, #152]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d008      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c22:	4b22      	ldr	r3, [pc, #136]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c2e:	491f      	ldr	r1, [pc, #124]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00d      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c40:	4b1a      	ldr	r3, [pc, #104]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	4a19      	ldr	r2, [pc, #100]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c4a:	6113      	str	r3, [r2, #16]
 8009c4c:	4b17      	ldr	r3, [pc, #92]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c4e:	691a      	ldr	r2, [r3, #16]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c56:	4915      	ldr	r1, [pc, #84]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	da08      	bge.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c70:	490e      	ldr	r1, [pc, #56]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d009      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c82:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	4906      	ldr	r1, [pc, #24]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009c96:	7dbb      	ldrb	r3, [r7, #22]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e000      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	58024400 	.word	0x58024400

08009cb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009cb4:	f7ff f85a 	bl	8008d6c <HAL_RCC_GetHCLKFreq>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	091b      	lsrs	r3, r3, #4
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	4904      	ldr	r1, [pc, #16]	; (8009cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009cc6:	5ccb      	ldrb	r3, [r1, r3]
 8009cc8:	f003 031f 	and.w	r3, r3, #31
 8009ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	0800d7bc 	.word	0x0800d7bc

08009cdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b089      	sub	sp, #36	; 0x24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ce4:	4ba1      	ldr	r3, [pc, #644]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009cee:	4b9f      	ldr	r3, [pc, #636]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf2:	0b1b      	lsrs	r3, r3, #12
 8009cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cfa:	4b9c      	ldr	r3, [pc, #624]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	091b      	lsrs	r3, r3, #4
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009d06:	4b99      	ldr	r3, [pc, #612]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0a:	08db      	lsrs	r3, r3, #3
 8009d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8111 	beq.w	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	f000 8083 	beq.w	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	f200 80a1 	bhi.w	8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d056      	beq.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009d46:	e099      	b.n	8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d48:	4b88      	ldr	r3, [pc, #544]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d02d      	beq.n	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d54:	4b85      	ldr	r3, [pc, #532]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	08db      	lsrs	r3, r3, #3
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	4a84      	ldr	r2, [pc, #528]	; (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
 8009d64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b7b      	ldr	r3, [pc, #492]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009dae:	e087      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b6a      	ldr	r3, [pc, #424]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df2:	e065      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e06:	4b59      	ldr	r3, [pc, #356]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e36:	e043      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	ee07 3a90 	vmov	s15, r3
 8009e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4a:	4b48      	ldr	r3, [pc, #288]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7a:	e021      	b.n	8009ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e8e:	4b37      	ldr	r3, [pc, #220]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ebe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009ec0:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec4:	0a5b      	lsrs	r3, r3, #9
 8009ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee6:	ee17 2a90 	vmov	r2, s15
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009eee:	4b1f      	ldr	r3, [pc, #124]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef8:	ee07 3a90 	vmov	s15, r3
 8009efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f14:	ee17 2a90 	vmov	r2, s15
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009f1c:	4b13      	ldr	r3, [pc, #76]	; (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	0e1b      	lsrs	r3, r3, #24
 8009f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f42:	ee17 2a90 	vmov	r2, s15
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f4a:	e008      	b.n	8009f5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	3724      	adds	r7, #36	; 0x24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	03d09000 	.word	0x03d09000
 8009f74:	46000000 	.word	0x46000000
 8009f78:	4c742400 	.word	0x4c742400
 8009f7c:	4a742400 	.word	0x4a742400
 8009f80:	4bbebc20 	.word	0x4bbebc20

08009f84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	; 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f8c:	4ba1      	ldr	r3, [pc, #644]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f90:	f003 0303 	and.w	r3, r3, #3
 8009f94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f96:	4b9f      	ldr	r3, [pc, #636]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9a:	0d1b      	lsrs	r3, r3, #20
 8009f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009fa2:	4b9c      	ldr	r3, [pc, #624]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	0a1b      	lsrs	r3, r3, #8
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009fae:	4b99      	ldr	r3, [pc, #612]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	fb02 f303 	mul.w	r3, r2, r3
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8111 	beq.w	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	f000 8083 	beq.w	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	f200 80a1 	bhi.w	800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d003      	beq.n	8009ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d056      	beq.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fee:	e099      	b.n	800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ff0:	4b88      	ldr	r3, [pc, #544]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d02d      	beq.n	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ffc:	4b85      	ldr	r3, [pc, #532]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	08db      	lsrs	r3, r3, #3
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	4a84      	ldr	r2, [pc, #528]	; (800a218 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a008:	fa22 f303 	lsr.w	r3, r2, r3
 800a00c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a026:	4b7b      	ldr	r3, [pc, #492]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a056:	e087      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a220 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	4b6a      	ldr	r3, [pc, #424]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a09a:	e065      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ae:	4b59      	ldr	r3, [pc, #356]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0de:	e043      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a228 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0f2:	4b48      	ldr	r3, [pc, #288]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a102:	ed97 6a03 	vldr	s12, [r7, #12]
 800a106:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a122:	e021      	b.n	800a168 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	ee07 3a90 	vmov	s15, r3
 800a12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a136:	4b37      	ldr	r3, [pc, #220]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a146:	ed97 6a03 	vldr	s12, [r7, #12]
 800a14a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a166:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a168:	4b2a      	ldr	r3, [pc, #168]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	0a5b      	lsrs	r3, r3, #9
 800a16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a17e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a182:	edd7 6a07 	vldr	s13, [r7, #28]
 800a186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a18a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a18e:	ee17 2a90 	vmov	r2, s15
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a196:	4b1f      	ldr	r3, [pc, #124]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1bc:	ee17 2a90 	vmov	r2, s15
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a1c4:	4b13      	ldr	r3, [pc, #76]	; (800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	0e1b      	lsrs	r3, r3, #24
 800a1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ea:	ee17 2a90 	vmov	r2, s15
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1f2:	e008      	b.n	800a206 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	609a      	str	r2, [r3, #8]
}
 800a206:	bf00      	nop
 800a208:	3724      	adds	r7, #36	; 0x24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	58024400 	.word	0x58024400
 800a218:	03d09000 	.word	0x03d09000
 800a21c:	46000000 	.word	0x46000000
 800a220:	4c742400 	.word	0x4c742400
 800a224:	4a742400 	.word	0x4a742400
 800a228:	4bbebc20 	.word	0x4bbebc20

0800a22c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a23a:	4b53      	ldr	r3, [pc, #332]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	2b03      	cmp	r3, #3
 800a244:	d101      	bne.n	800a24a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e099      	b.n	800a37e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a24a:	4b4f      	ldr	r3, [pc, #316]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a4e      	ldr	r2, [pc, #312]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a250:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a256:	f7f8 fc17 	bl	8002a88 <HAL_GetTick>
 800a25a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a25c:	e008      	b.n	800a270 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a25e:	f7f8 fc13 	bl	8002a88 <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d901      	bls.n	800a270 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e086      	b.n	800a37e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a270:	4b45      	ldr	r3, [pc, #276]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f0      	bne.n	800a25e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a27c:	4b42      	ldr	r3, [pc, #264]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	493f      	ldr	r1, [pc, #252]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a28c:	4313      	orrs	r3, r2
 800a28e:	628b      	str	r3, [r1, #40]	; 0x28
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	3b01      	subs	r3, #1
 800a296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	025b      	lsls	r3, r3, #9
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	041b      	lsls	r3, r3, #16
 800a2ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	061b      	lsls	r3, r3, #24
 800a2bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2c0:	4931      	ldr	r1, [pc, #196]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2c6:	4b30      	ldr	r3, [pc, #192]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	492d      	ldr	r1, [pc, #180]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2d8:	4b2b      	ldr	r3, [pc, #172]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	f023 0220 	bic.w	r2, r3, #32
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	4928      	ldr	r1, [pc, #160]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2ea:	4b27      	ldr	r3, [pc, #156]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	4a26      	ldr	r2, [pc, #152]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2f0:	f023 0310 	bic.w	r3, r3, #16
 800a2f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a2f6:	4b24      	ldr	r3, [pc, #144]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a2f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2fa:	4b24      	ldr	r3, [pc, #144]	; (800a38c <RCCEx_PLL2_Config+0x160>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	69d2      	ldr	r2, [r2, #28]
 800a302:	00d2      	lsls	r2, r2, #3
 800a304:	4920      	ldr	r1, [pc, #128]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a306:	4313      	orrs	r3, r2
 800a308:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a30a:	4b1f      	ldr	r3, [pc, #124]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30e:	4a1e      	ldr	r2, [pc, #120]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a310:	f043 0310 	orr.w	r3, r3, #16
 800a314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d106      	bne.n	800a32a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a31c:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	4a19      	ldr	r2, [pc, #100]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a326:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a328:	e00f      	b.n	800a34a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d106      	bne.n	800a33e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a330:	4b15      	ldr	r3, [pc, #84]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	4a14      	ldr	r2, [pc, #80]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a33a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a33c:	e005      	b.n	800a34a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a33e:	4b12      	ldr	r3, [pc, #72]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a342:	4a11      	ldr	r2, [pc, #68]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a348:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a34a:	4b0f      	ldr	r3, [pc, #60]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a0e      	ldr	r2, [pc, #56]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a350:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a356:	f7f8 fb97 	bl	8002a88 <HAL_GetTick>
 800a35a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a35c:	e008      	b.n	800a370 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a35e:	f7f8 fb93 	bl	8002a88 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d901      	bls.n	800a370 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e006      	b.n	800a37e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a370:	4b05      	ldr	r3, [pc, #20]	; (800a388 <RCCEx_PLL2_Config+0x15c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0f0      	beq.n	800a35e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	58024400 	.word	0x58024400
 800a38c:	ffff0007 	.word	0xffff0007

0800a390 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a39e:	4b53      	ldr	r3, [pc, #332]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d101      	bne.n	800a3ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e099      	b.n	800a4e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3ae:	4b4f      	ldr	r3, [pc, #316]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a4e      	ldr	r2, [pc, #312]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ba:	f7f8 fb65 	bl	8002a88 <HAL_GetTick>
 800a3be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3c0:	e008      	b.n	800a3d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3c2:	f7f8 fb61 	bl	8002a88 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d901      	bls.n	800a3d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e086      	b.n	800a4e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3d4:	4b45      	ldr	r3, [pc, #276]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1f0      	bne.n	800a3c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3e0:	4b42      	ldr	r3, [pc, #264]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	051b      	lsls	r3, r3, #20
 800a3ee:	493f      	ldr	r1, [pc, #252]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	628b      	str	r3, [r1, #40]	; 0x28
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	3b01      	subs	r3, #1
 800a404:	025b      	lsls	r3, r3, #9
 800a406:	b29b      	uxth	r3, r3
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	3b01      	subs	r3, #1
 800a410:	041b      	lsls	r3, r3, #16
 800a412:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	061b      	lsls	r3, r3, #24
 800a420:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a424:	4931      	ldr	r1, [pc, #196]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a426:	4313      	orrs	r3, r2
 800a428:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a42a:	4b30      	ldr	r3, [pc, #192]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	492d      	ldr	r1, [pc, #180]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a43c:	4b2b      	ldr	r3, [pc, #172]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	4928      	ldr	r1, [pc, #160]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a44e:	4b27      	ldr	r3, [pc, #156]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	4a26      	ldr	r2, [pc, #152]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a458:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a45a:	4b24      	ldr	r3, [pc, #144]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a45e:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <RCCEx_PLL3_Config+0x160>)
 800a460:	4013      	ands	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	69d2      	ldr	r2, [r2, #28]
 800a466:	00d2      	lsls	r2, r2, #3
 800a468:	4920      	ldr	r1, [pc, #128]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a46e:	4b1f      	ldr	r3, [pc, #124]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a472:	4a1e      	ldr	r2, [pc, #120]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d106      	bne.n	800a48e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a480:	4b1a      	ldr	r3, [pc, #104]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	4a19      	ldr	r2, [pc, #100]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a486:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a48a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a48c:	e00f      	b.n	800a4ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d106      	bne.n	800a4a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a494:	4b15      	ldr	r3, [pc, #84]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	4a14      	ldr	r2, [pc, #80]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a49a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a49e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4a0:	e005      	b.n	800a4ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4a2:	4b12      	ldr	r3, [pc, #72]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a4a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a0e      	ldr	r2, [pc, #56]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a4b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ba:	f7f8 fae5 	bl	8002a88 <HAL_GetTick>
 800a4be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4c0:	e008      	b.n	800a4d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4c2:	f7f8 fae1 	bl	8002a88 <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d901      	bls.n	800a4d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	e006      	b.n	800a4e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d0f0      	beq.n	800a4c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	ffff0007 	.word	0xffff0007

0800a4f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e049      	b.n	800a59a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7f7 fed8 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2202      	movs	r2, #2
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	f000 fa00 	bl	800a938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d001      	beq.n	800a5bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e054      	b.n	800a666 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a26      	ldr	r2, [pc, #152]	; (800a674 <HAL_TIM_Base_Start_IT+0xd0>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d022      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e6:	d01d      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a22      	ldr	r2, [pc, #136]	; (800a678 <HAL_TIM_Base_Start_IT+0xd4>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d018      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a21      	ldr	r2, [pc, #132]	; (800a67c <HAL_TIM_Base_Start_IT+0xd8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d013      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1f      	ldr	r2, [pc, #124]	; (800a680 <HAL_TIM_Base_Start_IT+0xdc>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d00e      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a1e      	ldr	r2, [pc, #120]	; (800a684 <HAL_TIM_Base_Start_IT+0xe0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d009      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1c      	ldr	r2, [pc, #112]	; (800a688 <HAL_TIM_Base_Start_IT+0xe4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d004      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x80>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a1b      	ldr	r2, [pc, #108]	; (800a68c <HAL_TIM_Base_Start_IT+0xe8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d115      	bne.n	800a650 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	4b19      	ldr	r3, [pc, #100]	; (800a690 <HAL_TIM_Base_Start_IT+0xec>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b06      	cmp	r3, #6
 800a634:	d015      	beq.n	800a662 <HAL_TIM_Base_Start_IT+0xbe>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63c:	d011      	beq.n	800a662 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0201 	orr.w	r2, r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a64e:	e008      	b.n	800a662 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f042 0201 	orr.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e000      	b.n	800a664 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40000400 	.word	0x40000400
 800a67c:	40000800 	.word	0x40000800
 800a680:	40000c00 	.word	0x40000c00
 800a684:	40010400 	.word	0x40010400
 800a688:	40001800 	.word	0x40001800
 800a68c:	40014000 	.word	0x40014000
 800a690:	00010007 	.word	0x00010007

0800a694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d122      	bne.n	800a6f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d11b      	bne.n	800a6f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f06f 0202 	mvn.w	r2, #2
 800a6c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f90f 	bl	800a8fa <HAL_TIM_IC_CaptureCallback>
 800a6dc:	e005      	b.n	800a6ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f901 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f912 	bl	800a90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b04      	cmp	r3, #4
 800a6fc:	d122      	bne.n	800a744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d11b      	bne.n	800a744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f06f 0204 	mvn.w	r2, #4
 800a714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2202      	movs	r2, #2
 800a71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f8e5 	bl	800a8fa <HAL_TIM_IC_CaptureCallback>
 800a730:	e005      	b.n	800a73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f8d7 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f8e8 	bl	800a90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f003 0308 	and.w	r3, r3, #8
 800a74e:	2b08      	cmp	r3, #8
 800a750:	d122      	bne.n	800a798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f003 0308 	and.w	r3, r3, #8
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d11b      	bne.n	800a798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f06f 0208 	mvn.w	r2, #8
 800a768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2204      	movs	r2, #4
 800a76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	f003 0303 	and.w	r3, r3, #3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f8bb 	bl	800a8fa <HAL_TIM_IC_CaptureCallback>
 800a784:	e005      	b.n	800a792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f8ad 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 f8be 	bl	800a90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	f003 0310 	and.w	r3, r3, #16
 800a7a2:	2b10      	cmp	r3, #16
 800a7a4:	d122      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d11b      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f06f 0210 	mvn.w	r2, #16
 800a7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f891 	bl	800a8fa <HAL_TIM_IC_CaptureCallback>
 800a7d8:	e005      	b.n	800a7e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f883 	bl	800a8e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f894 	bl	800a90e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d10e      	bne.n	800a818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b01      	cmp	r3, #1
 800a806:	d107      	bne.n	800a818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f06f 0201 	mvn.w	r2, #1
 800a810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f85d 	bl	800a8d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d10e      	bne.n	800a844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a830:	2b80      	cmp	r3, #128	; 0x80
 800a832:	d107      	bne.n	800a844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9ac 	bl	800ab9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a852:	d10e      	bne.n	800a872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85e:	2b80      	cmp	r3, #128	; 0x80
 800a860:	d107      	bne.n	800a872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f99f 	bl	800abb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d10e      	bne.n	800a89e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88a:	2b40      	cmp	r3, #64	; 0x40
 800a88c:	d107      	bne.n	800a89e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f842 	bl	800a922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f003 0320 	and.w	r3, r3, #32
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	d10e      	bne.n	800a8ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d107      	bne.n	800a8ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f06f 0220 	mvn.w	r2, #32
 800a8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f95f 	bl	800ab88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a916:	bf00      	nop
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a40      	ldr	r2, [pc, #256]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d013      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a956:	d00f      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a3d      	ldr	r2, [pc, #244]	; (800aa50 <TIM_Base_SetConfig+0x118>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d00b      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a3c      	ldr	r2, [pc, #240]	; (800aa54 <TIM_Base_SetConfig+0x11c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d007      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a3b      	ldr	r2, [pc, #236]	; (800aa58 <TIM_Base_SetConfig+0x120>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d003      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a3a      	ldr	r2, [pc, #232]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d108      	bne.n	800a98a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a2f      	ldr	r2, [pc, #188]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d01f      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a998:	d01b      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a2c      	ldr	r2, [pc, #176]	; (800aa50 <TIM_Base_SetConfig+0x118>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d017      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a2b      	ldr	r2, [pc, #172]	; (800aa54 <TIM_Base_SetConfig+0x11c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d013      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a2a      	ldr	r2, [pc, #168]	; (800aa58 <TIM_Base_SetConfig+0x120>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d00f      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a29      	ldr	r2, [pc, #164]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00b      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a28      	ldr	r2, [pc, #160]	; (800aa60 <TIM_Base_SetConfig+0x128>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d007      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a27      	ldr	r2, [pc, #156]	; (800aa64 <TIM_Base_SetConfig+0x12c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d003      	beq.n	800a9d2 <TIM_Base_SetConfig+0x9a>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a26      	ldr	r2, [pc, #152]	; (800aa68 <TIM_Base_SetConfig+0x130>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d108      	bne.n	800a9e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a10      	ldr	r2, [pc, #64]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d00f      	beq.n	800aa30 <TIM_Base_SetConfig+0xf8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a12      	ldr	r2, [pc, #72]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00b      	beq.n	800aa30 <TIM_Base_SetConfig+0xf8>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a11      	ldr	r2, [pc, #68]	; (800aa60 <TIM_Base_SetConfig+0x128>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d007      	beq.n	800aa30 <TIM_Base_SetConfig+0xf8>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a10      	ldr	r2, [pc, #64]	; (800aa64 <TIM_Base_SetConfig+0x12c>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d003      	beq.n	800aa30 <TIM_Base_SetConfig+0xf8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a0f      	ldr	r2, [pc, #60]	; (800aa68 <TIM_Base_SetConfig+0x130>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d103      	bne.n	800aa38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	615a      	str	r2, [r3, #20]
}
 800aa3e:	bf00      	nop
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40010400 	.word	0x40010400
 800aa60:	40014000 	.word	0x40014000
 800aa64:	40014400 	.word	0x40014400
 800aa68:	40014800 	.word	0x40014800

0800aa6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d101      	bne.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa80:	2302      	movs	r3, #2
 800aa82:	e06d      	b.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a30      	ldr	r2, [pc, #192]	; (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d004      	beq.n	800aab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a2f      	ldr	r2, [pc, #188]	; (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d108      	bne.n	800aaca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aabe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a20      	ldr	r2, [pc, #128]	; (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d022      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaf6:	d01d      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a1d      	ldr	r2, [pc, #116]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d018      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a1c      	ldr	r2, [pc, #112]	; (800ab78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d013      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a1a      	ldr	r2, [pc, #104]	; (800ab7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d00e      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d009      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a16      	ldr	r2, [pc, #88]	; (800ab80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d004      	beq.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d10c      	bne.n	800ab4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	40010000 	.word	0x40010000
 800ab70:	40010400 	.word	0x40010400
 800ab74:	40000400 	.word	0x40000400
 800ab78:	40000800 	.word	0x40000800
 800ab7c:	40000c00 	.word	0x40000c00
 800ab80:	40001800 	.word	0x40001800
 800ab84:	40014000 	.word	0x40014000

0800ab88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e042      	b.n	800ac5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7f7 fbb9 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2224      	movs	r2, #36	; 0x24
 800abf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 0201 	bic.w	r2, r2, #1
 800ac04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fce8 	bl	800b5dc <UART_SetConfig>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e022      	b.n	800ac5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fa44 	bl	800c0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f042 0201 	orr.w	r2, r2, #1
 800ac52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f001 facb 	bl	800c1f0 <UART_CheckIdleState>
 800ac5a:	4603      	mov	r3, r0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b091      	sub	sp, #68	; 0x44
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	f040 808c 	bne.w	800ad96 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <HAL_UART_Transmit_IT+0x26>
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e084      	b.n	800ad98 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d101      	bne.n	800ac9c <HAL_UART_Transmit_IT+0x38>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e07d      	b.n	800ad98 <HAL_UART_Transmit_IT+0x134>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	88fa      	ldrh	r2, [r7, #6]
 800acae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	88fa      	ldrh	r2, [r7, #6]
 800acb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2221      	movs	r2, #33	; 0x21
 800accc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd8:	d12e      	bne.n	800ad38 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace2:	d107      	bne.n	800acf4 <HAL_UART_Transmit_IT+0x90>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4a2d      	ldr	r2, [pc, #180]	; (800ada4 <HAL_UART_Transmit_IT+0x140>)
 800acf0:	675a      	str	r2, [r3, #116]	; 0x74
 800acf2:	e002      	b.n	800acfa <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4a2c      	ldr	r2, [pc, #176]	; (800ada8 <HAL_UART_Transmit_IT+0x144>)
 800acf8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3308      	adds	r3, #8
 800ad08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad22:	637a      	str	r2, [r7, #52]	; 0x34
 800ad24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e5      	bne.n	800ad02 <HAL_UART_Transmit_IT+0x9e>
 800ad36:	e02c      	b.n	800ad92 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad40:	d107      	bne.n	800ad52 <HAL_UART_Transmit_IT+0xee>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4a17      	ldr	r2, [pc, #92]	; (800adac <HAL_UART_Transmit_IT+0x148>)
 800ad4e:	675a      	str	r2, [r3, #116]	; 0x74
 800ad50:	e002      	b.n	800ad58 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4a16      	ldr	r2, [pc, #88]	; (800adb0 <HAL_UART_Transmit_IT+0x14c>)
 800ad56:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad7e:	623b      	str	r3, [r7, #32]
 800ad80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	69f9      	ldr	r1, [r7, #28]
 800ad84:	6a3a      	ldr	r2, [r7, #32]
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e6      	bne.n	800ad60 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e000      	b.n	800ad98 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ad96:	2302      	movs	r3, #2
  }
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3744      	adds	r7, #68	; 0x44
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	0800c9bf 	.word	0x0800c9bf
 800ada8:	0800c8df 	.word	0x0800c8df
 800adac:	0800c81d 	.word	0x0800c81d
 800adb0:	0800c765 	.word	0x0800c765

0800adb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	; 0x28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	4613      	mov	r3, r2
 800adc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	2b20      	cmp	r3, #32
 800adca:	d142      	bne.n	800ae52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_UART_Receive_IT+0x24>
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e03b      	b.n	800ae54 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d101      	bne.n	800adea <HAL_UART_Receive_IT+0x36>
 800ade6:	2302      	movs	r3, #2
 800ade8:	e034      	b.n	800ae54 <HAL_UART_Receive_IT+0xa0>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a17      	ldr	r2, [pc, #92]	; (800ae5c <HAL_UART_Receive_IT+0xa8>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d01f      	beq.n	800ae42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d018      	beq.n	800ae42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	623b      	str	r3, [r7, #32]
 800ae30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae32:	69f9      	ldr	r1, [r7, #28]
 800ae34:	6a3a      	ldr	r2, [r7, #32]
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e6      	bne.n	800ae10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	461a      	mov	r2, r3
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f001 fae5 	bl	800c418 <UART_Start_Receive_IT>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	e000      	b.n	800ae54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae52:	2302      	movs	r3, #2
  }
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3728      	adds	r7, #40	; 0x28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	58000c00 	.word	0x58000c00

0800ae60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b0ba      	sub	sp, #232	; 0xe8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ae8a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae8e:	4013      	ands	r3, r2
 800ae90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ae94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11b      	bne.n	800aed4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea0:	f003 0320 	and.w	r3, r3, #32
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d015      	beq.n	800aed4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d105      	bne.n	800aec0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aeb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d009      	beq.n	800aed4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 835a 	beq.w	800b57e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
      }
      return;
 800aed2:	e354      	b.n	800b57e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 811f 	beq.w	800b11c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aede:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aee2:	4b8b      	ldr	r3, [pc, #556]	; (800b110 <HAL_UART_IRQHandler+0x2b0>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aeea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aeee:	4b89      	ldr	r3, [pc, #548]	; (800b114 <HAL_UART_IRQHandler+0x2b4>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 8112 	beq.w	800b11c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <HAL_UART_IRQHandler+0xc8>
 800af04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00b      	beq.n	800af28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2201      	movs	r2, #1
 800af16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af1e:	f043 0201 	orr.w	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d011      	beq.n	800af58 <HAL_UART_IRQHandler+0xf8>
 800af34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00b      	beq.n	800af58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2202      	movs	r2, #2
 800af46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af4e:	f043 0204 	orr.w	r2, r3, #4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d011      	beq.n	800af88 <HAL_UART_IRQHandler+0x128>
 800af64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af68:	f003 0301 	and.w	r3, r3, #1
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2204      	movs	r2, #4
 800af76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af7e:	f043 0202 	orr.w	r2, r3, #2
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8c:	f003 0308 	and.w	r3, r3, #8
 800af90:	2b00      	cmp	r3, #0
 800af92:	d017      	beq.n	800afc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800afa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800afa4:	4b5a      	ldr	r3, [pc, #360]	; (800b110 <HAL_UART_IRQHandler+0x2b0>)
 800afa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00b      	beq.n	800afc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2208      	movs	r2, #8
 800afb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afba:	f043 0208 	orr.w	r2, r3, #8
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800afc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d012      	beq.n	800aff6 <HAL_UART_IRQHandler+0x196>
 800afd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00c      	beq.n	800aff6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800afe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afec:	f043 0220 	orr.w	r2, r3, #32
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 82c0 	beq.w	800b582 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d013      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d105      	bne.n	800b026 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b03c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04a:	2b40      	cmp	r3, #64	; 0x40
 800b04c:	d005      	beq.n	800b05a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b04e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b056:	2b00      	cmp	r3, #0
 800b058:	d04f      	beq.n	800b0fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fb06 	bl	800c66c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06a:	2b40      	cmp	r3, #64	; 0x40
 800b06c:	d141      	bne.n	800b0f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b09a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b09e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b0a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b0b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1d9      	bne.n	800b06e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d013      	beq.n	800b0ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c6:	4a14      	ldr	r2, [pc, #80]	; (800b118 <HAL_UART_IRQHandler+0x2b8>)
 800b0c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f9 fa12 	bl	80044f8 <HAL_DMA_Abort_IT>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d017      	beq.n	800b10a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0e8:	e00f      	b.n	800b10a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fa60 	bl	800b5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f0:	e00b      	b.n	800b10a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa5c 	bl	800b5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f8:	e007      	b.n	800b10a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fa58 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b108:	e23b      	b.n	800b582 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10a:	bf00      	nop
    return;
 800b10c:	e239      	b.n	800b582 <HAL_UART_IRQHandler+0x722>
 800b10e:	bf00      	nop
 800b110:	10000001 	.word	0x10000001
 800b114:	04000120 	.word	0x04000120
 800b118:	0800c739 	.word	0x0800c739

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 81ce 	bne.w	800b4c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f000 81c7 	beq.w	800b4c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 81c0 	beq.w	800b4c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2210      	movs	r2, #16
 800b148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	f040 813b 	bne.w	800b3d0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a8b      	ldr	r2, [pc, #556]	; (800b390 <HAL_UART_IRQHandler+0x530>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d059      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a89      	ldr	r2, [pc, #548]	; (800b394 <HAL_UART_IRQHandler+0x534>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d053      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a87      	ldr	r2, [pc, #540]	; (800b398 <HAL_UART_IRQHandler+0x538>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d04d      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a85      	ldr	r2, [pc, #532]	; (800b39c <HAL_UART_IRQHandler+0x53c>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d047      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a83      	ldr	r2, [pc, #524]	; (800b3a0 <HAL_UART_IRQHandler+0x540>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d041      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a81      	ldr	r2, [pc, #516]	; (800b3a4 <HAL_UART_IRQHandler+0x544>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d03b      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a7f      	ldr	r2, [pc, #508]	; (800b3a8 <HAL_UART_IRQHandler+0x548>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d035      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a7d      	ldr	r2, [pc, #500]	; (800b3ac <HAL_UART_IRQHandler+0x54c>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d02f      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a7b      	ldr	r2, [pc, #492]	; (800b3b0 <HAL_UART_IRQHandler+0x550>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d029      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a79      	ldr	r2, [pc, #484]	; (800b3b4 <HAL_UART_IRQHandler+0x554>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d023      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a77      	ldr	r2, [pc, #476]	; (800b3b8 <HAL_UART_IRQHandler+0x558>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d01d      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a75      	ldr	r2, [pc, #468]	; (800b3bc <HAL_UART_IRQHandler+0x55c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d017      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a73      	ldr	r2, [pc, #460]	; (800b3c0 <HAL_UART_IRQHandler+0x560>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d011      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a71      	ldr	r2, [pc, #452]	; (800b3c4 <HAL_UART_IRQHandler+0x564>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00b      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a6f      	ldr	r2, [pc, #444]	; (800b3c8 <HAL_UART_IRQHandler+0x568>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d005      	beq.n	800b21a <HAL_UART_IRQHandler+0x3ba>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a6d      	ldr	r2, [pc, #436]	; (800b3cc <HAL_UART_IRQHandler+0x56c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d105      	bne.n	800b226 <HAL_UART_IRQHandler+0x3c6>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	b29b      	uxth	r3, r3
 800b224:	e004      	b.n	800b230 <HAL_UART_IRQHandler+0x3d0>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	b29b      	uxth	r3, r3
 800b230:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 81a4 	beq.w	800b586 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b244:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b248:	429a      	cmp	r2, r3
 800b24a:	f080 819c 	bcs.w	800b586 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b262:	f000 8086 	beq.w	800b372 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b27a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b27e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b294:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b29c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2a0:	e841 2300 	strex	r3, r2, [r1]
 800b2a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1da      	bne.n	800b266 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2ba:	e853 3f00 	ldrex	r3, [r3]
 800b2be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2c2:	f023 0301 	bic.w	r3, r3, #1
 800b2c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b2d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b2e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e1      	bne.n	800b2b0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3308      	adds	r3, #8
 800b30c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b310:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b316:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b31e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e3      	bne.n	800b2ec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2220      	movs	r2, #32
 800b328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b33a:	e853 3f00 	ldrex	r3, [r3]
 800b33e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b342:	f023 0310 	bic.w	r3, r3, #16
 800b346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b354:	65bb      	str	r3, [r7, #88]	; 0x58
 800b356:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b35a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e4      	bne.n	800b332 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f8 fda5 	bl	8003ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b37e:	b29b      	uxth	r3, r3
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	b29b      	uxth	r3, r3
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f91c 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b38c:	e0fb      	b.n	800b586 <HAL_UART_IRQHandler+0x726>
 800b38e:	bf00      	nop
 800b390:	40020010 	.word	0x40020010
 800b394:	40020028 	.word	0x40020028
 800b398:	40020040 	.word	0x40020040
 800b39c:	40020058 	.word	0x40020058
 800b3a0:	40020070 	.word	0x40020070
 800b3a4:	40020088 	.word	0x40020088
 800b3a8:	400200a0 	.word	0x400200a0
 800b3ac:	400200b8 	.word	0x400200b8
 800b3b0:	40020410 	.word	0x40020410
 800b3b4:	40020428 	.word	0x40020428
 800b3b8:	40020440 	.word	0x40020440
 800b3bc:	40020458 	.word	0x40020458
 800b3c0:	40020470 	.word	0x40020470
 800b3c4:	40020488 	.word	0x40020488
 800b3c8:	400204a0 	.word	0x400204a0
 800b3cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80cc 	beq.w	800b58a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b3f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 80c7 	beq.w	800b58a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	e853 3f00 	ldrex	r3, [r3]
 800b408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	461a      	mov	r2, r3
 800b41a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b41e:	647b      	str	r3, [r7, #68]	; 0x44
 800b420:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e4      	bne.n	800b3fc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3308      	adds	r3, #8
 800b438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	e853 3f00 	ldrex	r3, [r3]
 800b440:	623b      	str	r3, [r7, #32]
   return(result);
 800b442:	6a3a      	ldr	r2, [r7, #32]
 800b444:	4b54      	ldr	r3, [pc, #336]	; (800b598 <HAL_UART_IRQHandler+0x738>)
 800b446:	4013      	ands	r3, r2
 800b448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3308      	adds	r3, #8
 800b452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b456:	633a      	str	r2, [r7, #48]	; 0x30
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e3      	bne.n	800b432 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	e853 3f00 	ldrex	r3, [r3]
 800b48a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 0310 	bic.w	r3, r3, #16
 800b492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b4a0:	61fb      	str	r3, [r7, #28]
 800b4a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	69b9      	ldr	r1, [r7, #24]
 800b4a6:	69fa      	ldr	r2, [r7, #28]
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e4      	bne.n	800b47e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f882 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4c0:	e063      	b.n	800b58a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00e      	beq.n	800b4ec <HAL_UART_IRQHandler+0x68c>
 800b4ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d008      	beq.n	800b4ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b4e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 ff67 	bl	800d3b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ea:	e051      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d014      	beq.n	800b522 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b500:	2b00      	cmp	r3, #0
 800b502:	d105      	bne.n	800b510 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d008      	beq.n	800b522 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b514:	2b00      	cmp	r3, #0
 800b516:	d03a      	beq.n	800b58e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	4798      	blx	r3
    }
    return;
 800b520:	e035      	b.n	800b58e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d009      	beq.n	800b542 <HAL_UART_IRQHandler+0x6e2>
 800b52e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fab4 	bl	800caa8 <UART_EndTransmit_IT>
    return;
 800b540:	e026      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d009      	beq.n	800b562 <HAL_UART_IRQHandler+0x702>
 800b54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b552:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 ff40 	bl	800d3e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b560:	e016      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d010      	beq.n	800b590 <HAL_UART_IRQHandler+0x730>
 800b56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b572:	2b00      	cmp	r3, #0
 800b574:	da0c      	bge.n	800b590 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 ff28 	bl	800d3cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b57c:	e008      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
      return;
 800b57e:	bf00      	nop
 800b580:	e006      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
    return;
 800b582:	bf00      	nop
 800b584:	e004      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
      return;
 800b586:	bf00      	nop
 800b588:	e002      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
      return;
 800b58a:	bf00      	nop
 800b58c:	e000      	b.n	800b590 <HAL_UART_IRQHandler+0x730>
    return;
 800b58e:	bf00      	nop
  }
}
 800b590:	37e8      	adds	r7, #232	; 0xe8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	effffffe 	.word	0xeffffffe

0800b59c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5e0:	b092      	sub	sp, #72	; 0x48
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	691b      	ldr	r3, [r3, #16]
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	695b      	ldr	r3, [r3, #20]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	4313      	orrs	r3, r2
 800b602:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4bbe      	ldr	r3, [pc, #760]	; (800b904 <UART_SetConfig+0x328>)
 800b60c:	4013      	ands	r3, r2
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b614:	430b      	orrs	r3, r1
 800b616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4ab3      	ldr	r2, [pc, #716]	; (800b908 <UART_SetConfig+0x32c>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b644:	4313      	orrs	r3, r2
 800b646:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	4baf      	ldr	r3, [pc, #700]	; (800b90c <UART_SetConfig+0x330>)
 800b650:	4013      	ands	r3, r2
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	6812      	ldr	r2, [r2, #0]
 800b656:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b658:	430b      	orrs	r3, r1
 800b65a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	f023 010f 	bic.w	r1, r3, #15
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	430a      	orrs	r2, r1
 800b670:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4aa6      	ldr	r2, [pc, #664]	; (800b910 <UART_SetConfig+0x334>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d177      	bne.n	800b76c <UART_SetConfig+0x190>
 800b67c:	4ba5      	ldr	r3, [pc, #660]	; (800b914 <UART_SetConfig+0x338>)
 800b67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b684:	2b28      	cmp	r3, #40	; 0x28
 800b686:	d86d      	bhi.n	800b764 <UART_SetConfig+0x188>
 800b688:	a201      	add	r2, pc, #4	; (adr r2, 800b690 <UART_SetConfig+0xb4>)
 800b68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68e:	bf00      	nop
 800b690:	0800b735 	.word	0x0800b735
 800b694:	0800b765 	.word	0x0800b765
 800b698:	0800b765 	.word	0x0800b765
 800b69c:	0800b765 	.word	0x0800b765
 800b6a0:	0800b765 	.word	0x0800b765
 800b6a4:	0800b765 	.word	0x0800b765
 800b6a8:	0800b765 	.word	0x0800b765
 800b6ac:	0800b765 	.word	0x0800b765
 800b6b0:	0800b73d 	.word	0x0800b73d
 800b6b4:	0800b765 	.word	0x0800b765
 800b6b8:	0800b765 	.word	0x0800b765
 800b6bc:	0800b765 	.word	0x0800b765
 800b6c0:	0800b765 	.word	0x0800b765
 800b6c4:	0800b765 	.word	0x0800b765
 800b6c8:	0800b765 	.word	0x0800b765
 800b6cc:	0800b765 	.word	0x0800b765
 800b6d0:	0800b745 	.word	0x0800b745
 800b6d4:	0800b765 	.word	0x0800b765
 800b6d8:	0800b765 	.word	0x0800b765
 800b6dc:	0800b765 	.word	0x0800b765
 800b6e0:	0800b765 	.word	0x0800b765
 800b6e4:	0800b765 	.word	0x0800b765
 800b6e8:	0800b765 	.word	0x0800b765
 800b6ec:	0800b765 	.word	0x0800b765
 800b6f0:	0800b74d 	.word	0x0800b74d
 800b6f4:	0800b765 	.word	0x0800b765
 800b6f8:	0800b765 	.word	0x0800b765
 800b6fc:	0800b765 	.word	0x0800b765
 800b700:	0800b765 	.word	0x0800b765
 800b704:	0800b765 	.word	0x0800b765
 800b708:	0800b765 	.word	0x0800b765
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b755 	.word	0x0800b755
 800b714:	0800b765 	.word	0x0800b765
 800b718:	0800b765 	.word	0x0800b765
 800b71c:	0800b765 	.word	0x0800b765
 800b720:	0800b765 	.word	0x0800b765
 800b724:	0800b765 	.word	0x0800b765
 800b728:	0800b765 	.word	0x0800b765
 800b72c:	0800b765 	.word	0x0800b765
 800b730:	0800b75d 	.word	0x0800b75d
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b73a:	e222      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b73c:	2304      	movs	r3, #4
 800b73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b742:	e21e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b744:	2308      	movs	r3, #8
 800b746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b74a:	e21a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b74c:	2310      	movs	r3, #16
 800b74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b752:	e216      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b754:	2320      	movs	r3, #32
 800b756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b75a:	e212      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b75c:	2340      	movs	r3, #64	; 0x40
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b762:	e20e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b764:	2380      	movs	r3, #128	; 0x80
 800b766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b76a:	e20a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a69      	ldr	r2, [pc, #420]	; (800b918 <UART_SetConfig+0x33c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d130      	bne.n	800b7d8 <UART_SetConfig+0x1fc>
 800b776:	4b67      	ldr	r3, [pc, #412]	; (800b914 <UART_SetConfig+0x338>)
 800b778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	2b05      	cmp	r3, #5
 800b780:	d826      	bhi.n	800b7d0 <UART_SetConfig+0x1f4>
 800b782:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <UART_SetConfig+0x1ac>)
 800b784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b788:	0800b7a1 	.word	0x0800b7a1
 800b78c:	0800b7a9 	.word	0x0800b7a9
 800b790:	0800b7b1 	.word	0x0800b7b1
 800b794:	0800b7b9 	.word	0x0800b7b9
 800b798:	0800b7c1 	.word	0x0800b7c1
 800b79c:	0800b7c9 	.word	0x0800b7c9
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7a6:	e1ec      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ae:	e1e8      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7b0:	2308      	movs	r3, #8
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7b6:	e1e4      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7b8:	2310      	movs	r3, #16
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7be:	e1e0      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7c6:	e1dc      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7c8:	2340      	movs	r3, #64	; 0x40
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ce:	e1d8      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7d0:	2380      	movs	r3, #128	; 0x80
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e1d4      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a4f      	ldr	r2, [pc, #316]	; (800b91c <UART_SetConfig+0x340>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d130      	bne.n	800b844 <UART_SetConfig+0x268>
 800b7e2:	4b4c      	ldr	r3, [pc, #304]	; (800b914 <UART_SetConfig+0x338>)
 800b7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	2b05      	cmp	r3, #5
 800b7ec:	d826      	bhi.n	800b83c <UART_SetConfig+0x260>
 800b7ee:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <UART_SetConfig+0x218>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b80d 	.word	0x0800b80d
 800b7f8:	0800b815 	.word	0x0800b815
 800b7fc:	0800b81d 	.word	0x0800b81d
 800b800:	0800b825 	.word	0x0800b825
 800b804:	0800b82d 	.word	0x0800b82d
 800b808:	0800b835 	.word	0x0800b835
 800b80c:	2300      	movs	r3, #0
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b812:	e1b6      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b814:	2304      	movs	r3, #4
 800b816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b81a:	e1b2      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b81c:	2308      	movs	r3, #8
 800b81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b822:	e1ae      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b824:	2310      	movs	r3, #16
 800b826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b82a:	e1aa      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b82c:	2320      	movs	r3, #32
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b832:	e1a6      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b834:	2340      	movs	r3, #64	; 0x40
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b83a:	e1a2      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b83c:	2380      	movs	r3, #128	; 0x80
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b842:	e19e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a35      	ldr	r2, [pc, #212]	; (800b920 <UART_SetConfig+0x344>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d130      	bne.n	800b8b0 <UART_SetConfig+0x2d4>
 800b84e:	4b31      	ldr	r3, [pc, #196]	; (800b914 <UART_SetConfig+0x338>)
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b05      	cmp	r3, #5
 800b858:	d826      	bhi.n	800b8a8 <UART_SetConfig+0x2cc>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <UART_SetConfig+0x284>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b879 	.word	0x0800b879
 800b864:	0800b881 	.word	0x0800b881
 800b868:	0800b889 	.word	0x0800b889
 800b86c:	0800b891 	.word	0x0800b891
 800b870:	0800b899 	.word	0x0800b899
 800b874:	0800b8a1 	.word	0x0800b8a1
 800b878:	2300      	movs	r3, #0
 800b87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b87e:	e180      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b880:	2304      	movs	r3, #4
 800b882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b886:	e17c      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b888:	2308      	movs	r3, #8
 800b88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b88e:	e178      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b890:	2310      	movs	r3, #16
 800b892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b896:	e174      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b898:	2320      	movs	r3, #32
 800b89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89e:	e170      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8a0:	2340      	movs	r3, #64	; 0x40
 800b8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a6:	e16c      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8a8:	2380      	movs	r3, #128	; 0x80
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ae:	e168      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a1b      	ldr	r2, [pc, #108]	; (800b924 <UART_SetConfig+0x348>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d142      	bne.n	800b940 <UART_SetConfig+0x364>
 800b8ba:	4b16      	ldr	r3, [pc, #88]	; (800b914 <UART_SetConfig+0x338>)
 800b8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8be:	f003 0307 	and.w	r3, r3, #7
 800b8c2:	2b05      	cmp	r3, #5
 800b8c4:	d838      	bhi.n	800b938 <UART_SetConfig+0x35c>
 800b8c6:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <UART_SetConfig+0x2f0>)
 800b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8cc:	0800b8e5 	.word	0x0800b8e5
 800b8d0:	0800b8ed 	.word	0x0800b8ed
 800b8d4:	0800b8f5 	.word	0x0800b8f5
 800b8d8:	0800b8fd 	.word	0x0800b8fd
 800b8dc:	0800b929 	.word	0x0800b929
 800b8e0:	0800b931 	.word	0x0800b931
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ea:	e14a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8ec:	2304      	movs	r3, #4
 800b8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8f2:	e146      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fa:	e142      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b8fc:	2310      	movs	r3, #16
 800b8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b902:	e13e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b904:	cfff69f3 	.word	0xcfff69f3
 800b908:	58000c00 	.word	0x58000c00
 800b90c:	11fff4ff 	.word	0x11fff4ff
 800b910:	40011000 	.word	0x40011000
 800b914:	58024400 	.word	0x58024400
 800b918:	40004400 	.word	0x40004400
 800b91c:	40004800 	.word	0x40004800
 800b920:	40004c00 	.word	0x40004c00
 800b924:	40005000 	.word	0x40005000
 800b928:	2320      	movs	r3, #32
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92e:	e128      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b930:	2340      	movs	r3, #64	; 0x40
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b936:	e124      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b938:	2380      	movs	r3, #128	; 0x80
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93e:	e120      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4acb      	ldr	r2, [pc, #812]	; (800bc74 <UART_SetConfig+0x698>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d176      	bne.n	800ba38 <UART_SetConfig+0x45c>
 800b94a:	4bcb      	ldr	r3, [pc, #812]	; (800bc78 <UART_SetConfig+0x69c>)
 800b94c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b952:	2b28      	cmp	r3, #40	; 0x28
 800b954:	d86c      	bhi.n	800ba30 <UART_SetConfig+0x454>
 800b956:	a201      	add	r2, pc, #4	; (adr r2, 800b95c <UART_SetConfig+0x380>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800ba01 	.word	0x0800ba01
 800b960:	0800ba31 	.word	0x0800ba31
 800b964:	0800ba31 	.word	0x0800ba31
 800b968:	0800ba31 	.word	0x0800ba31
 800b96c:	0800ba31 	.word	0x0800ba31
 800b970:	0800ba31 	.word	0x0800ba31
 800b974:	0800ba31 	.word	0x0800ba31
 800b978:	0800ba31 	.word	0x0800ba31
 800b97c:	0800ba09 	.word	0x0800ba09
 800b980:	0800ba31 	.word	0x0800ba31
 800b984:	0800ba31 	.word	0x0800ba31
 800b988:	0800ba31 	.word	0x0800ba31
 800b98c:	0800ba31 	.word	0x0800ba31
 800b990:	0800ba31 	.word	0x0800ba31
 800b994:	0800ba31 	.word	0x0800ba31
 800b998:	0800ba31 	.word	0x0800ba31
 800b99c:	0800ba11 	.word	0x0800ba11
 800b9a0:	0800ba31 	.word	0x0800ba31
 800b9a4:	0800ba31 	.word	0x0800ba31
 800b9a8:	0800ba31 	.word	0x0800ba31
 800b9ac:	0800ba31 	.word	0x0800ba31
 800b9b0:	0800ba31 	.word	0x0800ba31
 800b9b4:	0800ba31 	.word	0x0800ba31
 800b9b8:	0800ba31 	.word	0x0800ba31
 800b9bc:	0800ba19 	.word	0x0800ba19
 800b9c0:	0800ba31 	.word	0x0800ba31
 800b9c4:	0800ba31 	.word	0x0800ba31
 800b9c8:	0800ba31 	.word	0x0800ba31
 800b9cc:	0800ba31 	.word	0x0800ba31
 800b9d0:	0800ba31 	.word	0x0800ba31
 800b9d4:	0800ba31 	.word	0x0800ba31
 800b9d8:	0800ba31 	.word	0x0800ba31
 800b9dc:	0800ba21 	.word	0x0800ba21
 800b9e0:	0800ba31 	.word	0x0800ba31
 800b9e4:	0800ba31 	.word	0x0800ba31
 800b9e8:	0800ba31 	.word	0x0800ba31
 800b9ec:	0800ba31 	.word	0x0800ba31
 800b9f0:	0800ba31 	.word	0x0800ba31
 800b9f4:	0800ba31 	.word	0x0800ba31
 800b9f8:	0800ba31 	.word	0x0800ba31
 800b9fc:	0800ba29 	.word	0x0800ba29
 800ba00:	2301      	movs	r3, #1
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba06:	e0bc      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba08:	2304      	movs	r3, #4
 800ba0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba0e:	e0b8      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba10:	2308      	movs	r3, #8
 800ba12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba16:	e0b4      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba18:	2310      	movs	r3, #16
 800ba1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba1e:	e0b0      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba20:	2320      	movs	r3, #32
 800ba22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba26:	e0ac      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba2e:	e0a8      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba30:	2380      	movs	r3, #128	; 0x80
 800ba32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba36:	e0a4      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a8f      	ldr	r2, [pc, #572]	; (800bc7c <UART_SetConfig+0x6a0>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d130      	bne.n	800baa4 <UART_SetConfig+0x4c8>
 800ba42:	4b8d      	ldr	r3, [pc, #564]	; (800bc78 <UART_SetConfig+0x69c>)
 800ba44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	d826      	bhi.n	800ba9c <UART_SetConfig+0x4c0>
 800ba4e:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <UART_SetConfig+0x478>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800ba6d 	.word	0x0800ba6d
 800ba58:	0800ba75 	.word	0x0800ba75
 800ba5c:	0800ba7d 	.word	0x0800ba7d
 800ba60:	0800ba85 	.word	0x0800ba85
 800ba64:	0800ba8d 	.word	0x0800ba8d
 800ba68:	0800ba95 	.word	0x0800ba95
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba72:	e086      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba74:	2304      	movs	r3, #4
 800ba76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba7a:	e082      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba7c:	2308      	movs	r3, #8
 800ba7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba82:	e07e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba84:	2310      	movs	r3, #16
 800ba86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba8a:	e07a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba92:	e076      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba94:	2340      	movs	r3, #64	; 0x40
 800ba96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba9a:	e072      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800ba9c:	2380      	movs	r3, #128	; 0x80
 800ba9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baa2:	e06e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a75      	ldr	r2, [pc, #468]	; (800bc80 <UART_SetConfig+0x6a4>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d130      	bne.n	800bb10 <UART_SetConfig+0x534>
 800baae:	4b72      	ldr	r3, [pc, #456]	; (800bc78 <UART_SetConfig+0x69c>)
 800bab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	2b05      	cmp	r3, #5
 800bab8:	d826      	bhi.n	800bb08 <UART_SetConfig+0x52c>
 800baba:	a201      	add	r2, pc, #4	; (adr r2, 800bac0 <UART_SetConfig+0x4e4>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bad9 	.word	0x0800bad9
 800bac4:	0800bae1 	.word	0x0800bae1
 800bac8:	0800bae9 	.word	0x0800bae9
 800bacc:	0800baf1 	.word	0x0800baf1
 800bad0:	0800baf9 	.word	0x0800baf9
 800bad4:	0800bb01 	.word	0x0800bb01
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bade:	e050      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bae0:	2304      	movs	r3, #4
 800bae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bae6:	e04c      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bae8:	2308      	movs	r3, #8
 800baea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baee:	e048      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800baf0:	2310      	movs	r3, #16
 800baf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf6:	e044      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800baf8:	2320      	movs	r3, #32
 800bafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bafe:	e040      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb00:	2340      	movs	r3, #64	; 0x40
 800bb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb06:	e03c      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb08:	2380      	movs	r3, #128	; 0x80
 800bb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb0e:	e038      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a5b      	ldr	r2, [pc, #364]	; (800bc84 <UART_SetConfig+0x6a8>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d130      	bne.n	800bb7c <UART_SetConfig+0x5a0>
 800bb1a:	4b57      	ldr	r3, [pc, #348]	; (800bc78 <UART_SetConfig+0x69c>)
 800bb1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d826      	bhi.n	800bb74 <UART_SetConfig+0x598>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <UART_SetConfig+0x550>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb45 	.word	0x0800bb45
 800bb30:	0800bb4d 	.word	0x0800bb4d
 800bb34:	0800bb55 	.word	0x0800bb55
 800bb38:	0800bb5d 	.word	0x0800bb5d
 800bb3c:	0800bb65 	.word	0x0800bb65
 800bb40:	0800bb6d 	.word	0x0800bb6d
 800bb44:	2302      	movs	r3, #2
 800bb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb4a:	e01a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb52:	e016      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb54:	2308      	movs	r3, #8
 800bb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5a:	e012      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb62:	e00e      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb64:	2320      	movs	r3, #32
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6a:	e00a      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb72:	e006      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb74:	2380      	movs	r3, #128	; 0x80
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb7a:	e002      	b.n	800bb82 <UART_SetConfig+0x5a6>
 800bb7c:	2380      	movs	r3, #128	; 0x80
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a3f      	ldr	r2, [pc, #252]	; (800bc84 <UART_SetConfig+0x6a8>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	f040 80f8 	bne.w	800bd7e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb92:	2b20      	cmp	r3, #32
 800bb94:	dc46      	bgt.n	800bc24 <UART_SetConfig+0x648>
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	f2c0 8082 	blt.w	800bca0 <UART_SetConfig+0x6c4>
 800bb9c:	3b02      	subs	r3, #2
 800bb9e:	2b1e      	cmp	r3, #30
 800bba0:	d87e      	bhi.n	800bca0 <UART_SetConfig+0x6c4>
 800bba2:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <UART_SetConfig+0x5cc>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bc2b 	.word	0x0800bc2b
 800bbac:	0800bca1 	.word	0x0800bca1
 800bbb0:	0800bc33 	.word	0x0800bc33
 800bbb4:	0800bca1 	.word	0x0800bca1
 800bbb8:	0800bca1 	.word	0x0800bca1
 800bbbc:	0800bca1 	.word	0x0800bca1
 800bbc0:	0800bc43 	.word	0x0800bc43
 800bbc4:	0800bca1 	.word	0x0800bca1
 800bbc8:	0800bca1 	.word	0x0800bca1
 800bbcc:	0800bca1 	.word	0x0800bca1
 800bbd0:	0800bca1 	.word	0x0800bca1
 800bbd4:	0800bca1 	.word	0x0800bca1
 800bbd8:	0800bca1 	.word	0x0800bca1
 800bbdc:	0800bca1 	.word	0x0800bca1
 800bbe0:	0800bc53 	.word	0x0800bc53
 800bbe4:	0800bca1 	.word	0x0800bca1
 800bbe8:	0800bca1 	.word	0x0800bca1
 800bbec:	0800bca1 	.word	0x0800bca1
 800bbf0:	0800bca1 	.word	0x0800bca1
 800bbf4:	0800bca1 	.word	0x0800bca1
 800bbf8:	0800bca1 	.word	0x0800bca1
 800bbfc:	0800bca1 	.word	0x0800bca1
 800bc00:	0800bca1 	.word	0x0800bca1
 800bc04:	0800bca1 	.word	0x0800bca1
 800bc08:	0800bca1 	.word	0x0800bca1
 800bc0c:	0800bca1 	.word	0x0800bca1
 800bc10:	0800bca1 	.word	0x0800bca1
 800bc14:	0800bca1 	.word	0x0800bca1
 800bc18:	0800bca1 	.word	0x0800bca1
 800bc1c:	0800bca1 	.word	0x0800bca1
 800bc20:	0800bc93 	.word	0x0800bc93
 800bc24:	2b40      	cmp	r3, #64	; 0x40
 800bc26:	d037      	beq.n	800bc98 <UART_SetConfig+0x6bc>
 800bc28:	e03a      	b.n	800bca0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bc2a:	f7fe f841 	bl	8009cb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc30:	e03c      	b.n	800bcac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe f850 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc40:	e034      	b.n	800bcac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc42:	f107 0318 	add.w	r3, r7, #24
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe f99c 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc50:	e02c      	b.n	800bcac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc52:	4b09      	ldr	r3, [pc, #36]	; (800bc78 <UART_SetConfig+0x69c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d016      	beq.n	800bc8c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc5e:	4b06      	ldr	r3, [pc, #24]	; (800bc78 <UART_SetConfig+0x69c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	08db      	lsrs	r3, r3, #3
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	4a07      	ldr	r2, [pc, #28]	; (800bc88 <UART_SetConfig+0x6ac>)
 800bc6a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc70:	e01c      	b.n	800bcac <UART_SetConfig+0x6d0>
 800bc72:	bf00      	nop
 800bc74:	40011400 	.word	0x40011400
 800bc78:	58024400 	.word	0x58024400
 800bc7c:	40007800 	.word	0x40007800
 800bc80:	40007c00 	.word	0x40007c00
 800bc84:	58000c00 	.word	0x58000c00
 800bc88:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bc8c:	4b9d      	ldr	r3, [pc, #628]	; (800bf04 <UART_SetConfig+0x928>)
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc90:	e00c      	b.n	800bcac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc92:	4b9d      	ldr	r3, [pc, #628]	; (800bf08 <UART_SetConfig+0x92c>)
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc96:	e009      	b.n	800bcac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc9e:	e005      	b.n	800bcac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bcaa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 81de 	beq.w	800c070 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	4a94      	ldr	r2, [pc, #592]	; (800bf0c <UART_SetConfig+0x930>)
 800bcba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcc6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	4613      	mov	r3, r2
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	4413      	add	r3, r2
 800bcd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d305      	bcc.n	800bce4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d903      	bls.n	800bcec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bcea:	e1c1      	b.n	800c070 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcee:	2200      	movs	r2, #0
 800bcf0:	60bb      	str	r3, [r7, #8]
 800bcf2:	60fa      	str	r2, [r7, #12]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf8:	4a84      	ldr	r2, [pc, #528]	; (800bf0c <UART_SetConfig+0x930>)
 800bcfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	2200      	movs	r2, #0
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd0e:	f7f4 fae3 	bl	80002d8 <__aeabi_uldivmod>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4610      	mov	r0, r2
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f04f 0200 	mov.w	r2, #0
 800bd1e:	f04f 0300 	mov.w	r3, #0
 800bd22:	020b      	lsls	r3, r1, #8
 800bd24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd28:	0202      	lsls	r2, r0, #8
 800bd2a:	6979      	ldr	r1, [r7, #20]
 800bd2c:	6849      	ldr	r1, [r1, #4]
 800bd2e:	0849      	lsrs	r1, r1, #1
 800bd30:	2000      	movs	r0, #0
 800bd32:	460c      	mov	r4, r1
 800bd34:	4605      	mov	r5, r0
 800bd36:	eb12 0804 	adds.w	r8, r2, r4
 800bd3a:	eb43 0905 	adc.w	r9, r3, r5
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	469a      	mov	sl, r3
 800bd46:	4693      	mov	fp, r2
 800bd48:	4652      	mov	r2, sl
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4649      	mov	r1, r9
 800bd50:	f7f4 fac2 	bl	80002d8 <__aeabi_uldivmod>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4613      	mov	r3, r2
 800bd5a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd62:	d308      	bcc.n	800bd76 <UART_SetConfig+0x79a>
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd6a:	d204      	bcs.n	800bd76 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd72:	60da      	str	r2, [r3, #12]
 800bd74:	e17c      	b.n	800c070 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bd7c:	e178      	b.n	800c070 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd86:	f040 80c5 	bne.w	800bf14 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bd8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	dc48      	bgt.n	800be24 <UART_SetConfig+0x848>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db7b      	blt.n	800be8e <UART_SetConfig+0x8b2>
 800bd96:	2b20      	cmp	r3, #32
 800bd98:	d879      	bhi.n	800be8e <UART_SetConfig+0x8b2>
 800bd9a:	a201      	add	r2, pc, #4	; (adr r2, 800bda0 <UART_SetConfig+0x7c4>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800be2b 	.word	0x0800be2b
 800bda4:	0800be33 	.word	0x0800be33
 800bda8:	0800be8f 	.word	0x0800be8f
 800bdac:	0800be8f 	.word	0x0800be8f
 800bdb0:	0800be3b 	.word	0x0800be3b
 800bdb4:	0800be8f 	.word	0x0800be8f
 800bdb8:	0800be8f 	.word	0x0800be8f
 800bdbc:	0800be8f 	.word	0x0800be8f
 800bdc0:	0800be4b 	.word	0x0800be4b
 800bdc4:	0800be8f 	.word	0x0800be8f
 800bdc8:	0800be8f 	.word	0x0800be8f
 800bdcc:	0800be8f 	.word	0x0800be8f
 800bdd0:	0800be8f 	.word	0x0800be8f
 800bdd4:	0800be8f 	.word	0x0800be8f
 800bdd8:	0800be8f 	.word	0x0800be8f
 800bddc:	0800be8f 	.word	0x0800be8f
 800bde0:	0800be5b 	.word	0x0800be5b
 800bde4:	0800be8f 	.word	0x0800be8f
 800bde8:	0800be8f 	.word	0x0800be8f
 800bdec:	0800be8f 	.word	0x0800be8f
 800bdf0:	0800be8f 	.word	0x0800be8f
 800bdf4:	0800be8f 	.word	0x0800be8f
 800bdf8:	0800be8f 	.word	0x0800be8f
 800bdfc:	0800be8f 	.word	0x0800be8f
 800be00:	0800be8f 	.word	0x0800be8f
 800be04:	0800be8f 	.word	0x0800be8f
 800be08:	0800be8f 	.word	0x0800be8f
 800be0c:	0800be8f 	.word	0x0800be8f
 800be10:	0800be8f 	.word	0x0800be8f
 800be14:	0800be8f 	.word	0x0800be8f
 800be18:	0800be8f 	.word	0x0800be8f
 800be1c:	0800be8f 	.word	0x0800be8f
 800be20:	0800be81 	.word	0x0800be81
 800be24:	2b40      	cmp	r3, #64	; 0x40
 800be26:	d02e      	beq.n	800be86 <UART_SetConfig+0x8aa>
 800be28:	e031      	b.n	800be8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be2a:	f7fc ffcf 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 800be2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be30:	e033      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be32:	f7fc ffe1 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
 800be36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be38:	e02f      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fd ff4c 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	e027      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be4a:	f107 0318 	add.w	r3, r7, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe f898 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be58:	e01f      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be5a:	4b2d      	ldr	r3, [pc, #180]	; (800bf10 <UART_SetConfig+0x934>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be66:	4b2a      	ldr	r3, [pc, #168]	; (800bf10 <UART_SetConfig+0x934>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	08db      	lsrs	r3, r3, #3
 800be6c:	f003 0303 	and.w	r3, r3, #3
 800be70:	4a24      	ldr	r2, [pc, #144]	; (800bf04 <UART_SetConfig+0x928>)
 800be72:	fa22 f303 	lsr.w	r3, r2, r3
 800be76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be78:	e00f      	b.n	800be9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800be7a:	4b22      	ldr	r3, [pc, #136]	; (800bf04 <UART_SetConfig+0x928>)
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7e:	e00c      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be80:	4b21      	ldr	r3, [pc, #132]	; (800bf08 <UART_SetConfig+0x92c>)
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be84:	e009      	b.n	800be9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be8c:	e005      	b.n	800be9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80e7 	beq.w	800c070 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	4a19      	ldr	r2, [pc, #100]	; (800bf0c <UART_SetConfig+0x930>)
 800bea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beac:	461a      	mov	r2, r3
 800beae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800beb4:	005a      	lsls	r2, r3, #1
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	085b      	lsrs	r3, r3, #1
 800bebc:	441a      	add	r2, r3
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beca:	2b0f      	cmp	r3, #15
 800becc:	d916      	bls.n	800befc <UART_SetConfig+0x920>
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed4:	d212      	bcs.n	800befc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	b29b      	uxth	r3, r3
 800beda:	f023 030f 	bic.w	r3, r3, #15
 800bede:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	085b      	lsrs	r3, r3, #1
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	f003 0307 	and.w	r3, r3, #7
 800beea:	b29a      	uxth	r2, r3
 800beec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800beee:	4313      	orrs	r3, r2
 800bef0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bef8:	60da      	str	r2, [r3, #12]
 800befa:	e0b9      	b.n	800c070 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bf02:	e0b5      	b.n	800c070 <UART_SetConfig+0xa94>
 800bf04:	03d09000 	.word	0x03d09000
 800bf08:	003d0900 	.word	0x003d0900
 800bf0c:	0800d7d4 	.word	0x0800d7d4
 800bf10:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf18:	2b20      	cmp	r3, #32
 800bf1a:	dc49      	bgt.n	800bfb0 <UART_SetConfig+0x9d4>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	db7c      	blt.n	800c01a <UART_SetConfig+0xa3e>
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	d87a      	bhi.n	800c01a <UART_SetConfig+0xa3e>
 800bf24:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <UART_SetConfig+0x950>)
 800bf26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2a:	bf00      	nop
 800bf2c:	0800bfb7 	.word	0x0800bfb7
 800bf30:	0800bfbf 	.word	0x0800bfbf
 800bf34:	0800c01b 	.word	0x0800c01b
 800bf38:	0800c01b 	.word	0x0800c01b
 800bf3c:	0800bfc7 	.word	0x0800bfc7
 800bf40:	0800c01b 	.word	0x0800c01b
 800bf44:	0800c01b 	.word	0x0800c01b
 800bf48:	0800c01b 	.word	0x0800c01b
 800bf4c:	0800bfd7 	.word	0x0800bfd7
 800bf50:	0800c01b 	.word	0x0800c01b
 800bf54:	0800c01b 	.word	0x0800c01b
 800bf58:	0800c01b 	.word	0x0800c01b
 800bf5c:	0800c01b 	.word	0x0800c01b
 800bf60:	0800c01b 	.word	0x0800c01b
 800bf64:	0800c01b 	.word	0x0800c01b
 800bf68:	0800c01b 	.word	0x0800c01b
 800bf6c:	0800bfe7 	.word	0x0800bfe7
 800bf70:	0800c01b 	.word	0x0800c01b
 800bf74:	0800c01b 	.word	0x0800c01b
 800bf78:	0800c01b 	.word	0x0800c01b
 800bf7c:	0800c01b 	.word	0x0800c01b
 800bf80:	0800c01b 	.word	0x0800c01b
 800bf84:	0800c01b 	.word	0x0800c01b
 800bf88:	0800c01b 	.word	0x0800c01b
 800bf8c:	0800c01b 	.word	0x0800c01b
 800bf90:	0800c01b 	.word	0x0800c01b
 800bf94:	0800c01b 	.word	0x0800c01b
 800bf98:	0800c01b 	.word	0x0800c01b
 800bf9c:	0800c01b 	.word	0x0800c01b
 800bfa0:	0800c01b 	.word	0x0800c01b
 800bfa4:	0800c01b 	.word	0x0800c01b
 800bfa8:	0800c01b 	.word	0x0800c01b
 800bfac:	0800c00d 	.word	0x0800c00d
 800bfb0:	2b40      	cmp	r3, #64	; 0x40
 800bfb2:	d02e      	beq.n	800c012 <UART_SetConfig+0xa36>
 800bfb4:	e031      	b.n	800c01a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfb6:	f7fc ff09 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 800bfba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfbc:	e033      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfbe:	f7fc ff1b 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
 800bfc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfc4:	e02f      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd fe86 	bl	8009cdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd4:	e027      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfd6:	f107 0318 	add.w	r3, r7, #24
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fd ffd2 	bl	8009f84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe4:	e01f      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	; (800c09c <UART_SetConfig+0xac0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bff2:	4b2a      	ldr	r3, [pc, #168]	; (800c09c <UART_SetConfig+0xac0>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	08db      	lsrs	r3, r3, #3
 800bff8:	f003 0303 	and.w	r3, r3, #3
 800bffc:	4a28      	ldr	r2, [pc, #160]	; (800c0a0 <UART_SetConfig+0xac4>)
 800bffe:	fa22 f303 	lsr.w	r3, r2, r3
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c004:	e00f      	b.n	800c026 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c006:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <UART_SetConfig+0xac4>)
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c00a:	e00c      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c00c:	4b25      	ldr	r3, [pc, #148]	; (800c0a4 <UART_SetConfig+0xac8>)
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c010:	e009      	b.n	800c026 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c018:	e005      	b.n	800c026 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c024:	bf00      	nop
    }

    if (pclk != 0U)
 800c026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d021      	beq.n	800c070 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	4a1d      	ldr	r2, [pc, #116]	; (800c0a8 <UART_SetConfig+0xacc>)
 800c032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c036:	461a      	mov	r2, r3
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	085b      	lsrs	r3, r3, #1
 800c044:	441a      	add	r2, r3
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c04e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	2b0f      	cmp	r3, #15
 800c054:	d909      	bls.n	800c06a <UART_SetConfig+0xa8e>
 800c056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c05c:	d205      	bcs.n	800c06a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	b29a      	uxth	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60da      	str	r2, [r3, #12]
 800c068:	e002      	b.n	800c070 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2201      	movs	r2, #1
 800c074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2200      	movs	r2, #0
 800c084:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2200      	movs	r2, #0
 800c08a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c08c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c090:	4618      	mov	r0, r3
 800c092:	3748      	adds	r7, #72	; 0x48
 800c094:	46bd      	mov	sp, r7
 800c096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c09a:	bf00      	nop
 800c09c:	58024400 	.word	0x58024400
 800c0a0:	03d09000 	.word	0x03d09000
 800c0a4:	003d0900 	.word	0x003d0900
 800c0a8:	0800d7d4 	.word	0x0800d7d4

0800c0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00a      	beq.n	800c0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	f003 0302 	and.w	r3, r3, #2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00a      	beq.n	800c0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fc:	f003 0304 	and.w	r3, r3, #4
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00a      	beq.n	800c11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11e:	f003 0308 	and.w	r3, r3, #8
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00a      	beq.n	800c13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c140:	f003 0310 	and.w	r3, r3, #16
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00a      	beq.n	800c15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	430a      	orrs	r2, r1
 800c15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c162:	f003 0320 	and.w	r3, r3, #32
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	430a      	orrs	r2, r1
 800c17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01a      	beq.n	800c1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1aa:	d10a      	bne.n	800c1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
  }
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af02      	add	r7, sp, #8
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c200:	f7f6 fc42 	bl	8002a88 <HAL_GetTick>
 800c204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0308 	and.w	r3, r3, #8
 800c210:	2b08      	cmp	r3, #8
 800c212:	d10e      	bne.n	800c232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f82f 	bl	800c286 <UART_WaitOnFlagUntilTimeout>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e025      	b.n	800c27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0304 	and.w	r3, r3, #4
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d10e      	bne.n	800c25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f819 	bl	800c286 <UART_WaitOnFlagUntilTimeout>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c25a:	2303      	movs	r3, #3
 800c25c:	e00f      	b.n	800c27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2220      	movs	r2, #32
 800c262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2220      	movs	r2, #32
 800c26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b09c      	sub	sp, #112	; 0x70
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	60b9      	str	r1, [r7, #8]
 800c290:	603b      	str	r3, [r7, #0]
 800c292:	4613      	mov	r3, r2
 800c294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c296:	e0a9      	b.n	800c3ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c29e:	f000 80a5 	beq.w	800c3ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2a2:	f7f6 fbf1 	bl	8002a88 <HAL_GetTick>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d302      	bcc.n	800c2b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c2b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d140      	bne.n	800c33a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c0:	e853 3f00 	ldrex	r3, [r3]
 800c2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2de:	e841 2300 	strex	r3, r2, [r1]
 800c2e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1e6      	bne.n	800c2b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3308      	adds	r3, #8
 800c2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f4:	e853 3f00 	ldrex	r3, [r3]
 800c2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	f023 0301 	bic.w	r3, r3, #1
 800c300:	663b      	str	r3, [r7, #96]	; 0x60
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3308      	adds	r3, #8
 800c308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c30a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c30c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c312:	e841 2300 	strex	r3, r2, [r1]
 800c316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1e5      	bne.n	800c2ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2220      	movs	r2, #32
 800c322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2220      	movs	r2, #32
 800c32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e069      	b.n	800c40e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b00      	cmp	r3, #0
 800c346:	d051      	beq.n	800c3ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c356:	d149      	bne.n	800c3ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c376:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c380:	637b      	str	r3, [r7, #52]	; 0x34
 800c382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3308      	adds	r3, #8
 800c39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f023 0301 	bic.w	r3, r3, #1
 800c3aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c3b4:	623a      	str	r2, [r7, #32]
 800c3b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	69f9      	ldr	r1, [r7, #28]
 800c3ba:	6a3a      	ldr	r2, [r7, #32]
 800c3bc:	e841 2300 	strex	r3, r2, [r1]
 800c3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e5      	bne.n	800c394 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2220      	movs	r2, #32
 800c3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e010      	b.n	800c40e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	69da      	ldr	r2, [r3, #28]
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	bf0c      	ite	eq
 800c3fc:	2301      	moveq	r3, #1
 800c3fe:	2300      	movne	r3, #0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	461a      	mov	r2, r3
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	429a      	cmp	r2, r3
 800c408:	f43f af46 	beq.w	800c298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3770      	adds	r7, #112	; 0x70
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c418:	b480      	push	{r7}
 800c41a:	b0a3      	sub	sp, #140	; 0x8c
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	88fa      	ldrh	r2, [r7, #6]
 800c430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	88fa      	ldrh	r2, [r7, #6]
 800c438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c44a:	d10e      	bne.n	800c46a <UART_Start_Receive_IT+0x52>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d105      	bne.n	800c460 <UART_Start_Receive_IT+0x48>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c45a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c45e:	e02d      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	22ff      	movs	r2, #255	; 0xff
 800c464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c468:	e028      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10d      	bne.n	800c48e <UART_Start_Receive_IT+0x76>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d104      	bne.n	800c484 <UART_Start_Receive_IT+0x6c>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	22ff      	movs	r2, #255	; 0xff
 800c47e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c482:	e01b      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	227f      	movs	r2, #127	; 0x7f
 800c488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c48c:	e016      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c496:	d10d      	bne.n	800c4b4 <UART_Start_Receive_IT+0x9c>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d104      	bne.n	800c4aa <UART_Start_Receive_IT+0x92>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	227f      	movs	r2, #127	; 0x7f
 800c4a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4a8:	e008      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	223f      	movs	r2, #63	; 0x3f
 800c4ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c4b2:	e003      	b.n	800c4bc <UART_Start_Receive_IT+0xa4>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2222      	movs	r2, #34	; 0x22
 800c4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4d6:	e853 3f00 	ldrex	r3, [r3]
 800c4da:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c4dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4de:	f043 0301 	orr.w	r3, r3, #1
 800c4e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	3308      	adds	r3, #8
 800c4ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c4f0:	673a      	str	r2, [r7, #112]	; 0x70
 800c4f2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c4f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c4f8:	e841 2300 	strex	r3, r2, [r1]
 800c4fc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c4fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e3      	bne.n	800c4cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c50c:	d153      	bne.n	800c5b6 <UART_Start_Receive_IT+0x19e>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c514:	88fa      	ldrh	r2, [r7, #6]
 800c516:	429a      	cmp	r2, r3
 800c518:	d34d      	bcc.n	800c5b6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c522:	d107      	bne.n	800c534 <UART_Start_Receive_IT+0x11c>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	4a4b      	ldr	r2, [pc, #300]	; (800c65c <UART_Start_Receive_IT+0x244>)
 800c530:	671a      	str	r2, [r3, #112]	; 0x70
 800c532:	e002      	b.n	800c53a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4a4a      	ldr	r2, [pc, #296]	; (800c660 <UART_Start_Receive_IT+0x248>)
 800c538:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d01a      	beq.n	800c580 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c55e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c56c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c56e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c572:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e4      	bne.n	800c54a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c596:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3308      	adds	r3, #8
 800c59e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c5a0:	64ba      	str	r2, [r7, #72]	; 0x48
 800c5a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e5      	bne.n	800c580 <UART_Start_Receive_IT+0x168>
 800c5b4:	e04a      	b.n	800c64c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5be:	d107      	bne.n	800c5d0 <UART_Start_Receive_IT+0x1b8>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a26      	ldr	r2, [pc, #152]	; (800c664 <UART_Start_Receive_IT+0x24c>)
 800c5cc:	671a      	str	r2, [r3, #112]	; 0x70
 800c5ce:	e002      	b.n	800c5d6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4a25      	ldr	r2, [pc, #148]	; (800c668 <UART_Start_Receive_IT+0x250>)
 800c5d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d019      	beq.n	800c61a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ee:	e853 3f00 	ldrex	r3, [r3]
 800c5f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c5fa:	677b      	str	r3, [r7, #116]	; 0x74
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
 800c606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e6      	bne.n	800c5e6 <UART_Start_Receive_IT+0x1ce>
 800c618:	e018      	b.n	800c64c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	e853 3f00 	ldrex	r3, [r3]
 800c626:	613b      	str	r3, [r7, #16]
   return(result);
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f043 0320 	orr.w	r3, r3, #32
 800c62e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	461a      	mov	r2, r3
 800c636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c638:	623b      	str	r3, [r7, #32]
 800c63a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63c:	69f9      	ldr	r1, [r7, #28]
 800c63e:	6a3a      	ldr	r2, [r7, #32]
 800c640:	e841 2300 	strex	r3, r2, [r1]
 800c644:	61bb      	str	r3, [r7, #24]
   return(result);
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1e6      	bne.n	800c61a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	378c      	adds	r7, #140	; 0x8c
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	0800d0b9 	.word	0x0800d0b9
 800c660:	0800cdc1 	.word	0x0800cdc1
 800c664:	0800cc5f 	.word	0x0800cc5f
 800c668:	0800caff 	.word	0x0800caff

0800c66c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b095      	sub	sp, #84	; 0x54
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	e853 3f00 	ldrex	r3, [r3]
 800c680:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c692:	643b      	str	r3, [r7, #64]	; 0x40
 800c694:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c69a:	e841 2300 	strex	r3, r2, [r1]
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1e6      	bne.n	800c674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3308      	adds	r3, #8
 800c6ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	6a3b      	ldr	r3, [r7, #32]
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6b6:	69fa      	ldr	r2, [r7, #28]
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <UART_EndRxTransfer+0xc8>)
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e5      	bne.n	800c6a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d118      	bne.n	800c714 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f023 0310 	bic.w	r3, r3, #16
 800c6f6:	647b      	str	r3, [r7, #68]	; 0x44
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c700:	61bb      	str	r3, [r7, #24]
 800c702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c704:	6979      	ldr	r1, [r7, #20]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	e841 2300 	strex	r3, r2, [r1]
 800c70c:	613b      	str	r3, [r7, #16]
   return(result);
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e6      	bne.n	800c6e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c728:	bf00      	nop
 800c72a:	3754      	adds	r7, #84	; 0x54
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	effffffe 	.word	0xeffffffe

0800c738 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7fe ff2a 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c75c:	bf00      	nop
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c764:	b480      	push	{r7}
 800c766:	b08f      	sub	sp, #60	; 0x3c
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c772:	2b21      	cmp	r3, #33	; 0x21
 800c774:	d14c      	bne.n	800c810 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d132      	bne.n	800c7e8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c796:	637b      	str	r3, [r7, #52]	; 0x34
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e6      	bne.n	800c782 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	e853 3f00 	ldrex	r3, [r3]
 800c7c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c8:	633b      	str	r3, [r7, #48]	; 0x30
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	61bb      	str	r3, [r7, #24]
 800c7d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d6:	6979      	ldr	r1, [r7, #20]
 800c7d8:	69ba      	ldr	r2, [r7, #24]
 800c7da:	e841 2300 	strex	r3, r2, [r1]
 800c7de:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1e6      	bne.n	800c7b4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c7e6:	e013      	b.n	800c810 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ec:	781a      	ldrb	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c804:	b29b      	uxth	r3, r3
 800c806:	3b01      	subs	r3, #1
 800c808:	b29a      	uxth	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c810:	bf00      	nop
 800c812:	373c      	adds	r7, #60	; 0x3c
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b091      	sub	sp, #68	; 0x44
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c82a:	2b21      	cmp	r3, #33	; 0x21
 800c82c:	d151      	bne.n	800c8d2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c834:	b29b      	uxth	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d132      	bne.n	800c8a0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	e853 3f00 	ldrex	r3, [r3]
 800c846:	623b      	str	r3, [r7, #32]
   return(result);
 800c848:	6a3b      	ldr	r3, [r7, #32]
 800c84a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c84e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	461a      	mov	r2, r3
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	633b      	str	r3, [r7, #48]	; 0x30
 800c85a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c860:	e841 2300 	strex	r3, r2, [r1]
 800c864:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1e6      	bne.n	800c83a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	e853 3f00 	ldrex	r3, [r3]
 800c878:	60fb      	str	r3, [r7, #12]
   return(result);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88a:	61fb      	str	r3, [r7, #28]
 800c88c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88e:	69b9      	ldr	r1, [r7, #24]
 800c890:	69fa      	ldr	r2, [r7, #28]
 800c892:	e841 2300 	strex	r3, r2, [r1]
 800c896:	617b      	str	r3, [r7, #20]
   return(result);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1e6      	bne.n	800c86c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c89e:	e018      	b.n	800c8d2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a8:	881b      	ldrh	r3, [r3, #0]
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8b4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ba:	1c9a      	adds	r2, r3, #2
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c8d2:	bf00      	nop
 800c8d4:	3744      	adds	r7, #68	; 0x44
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b091      	sub	sp, #68	; 0x44
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ec:	2b21      	cmp	r3, #33	; 0x21
 800c8ee:	d160      	bne.n	800c9b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c8f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c8f8:	e057      	b.n	800c9aa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d133      	bne.n	800c96e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	3308      	adds	r3, #8
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	e853 3f00 	ldrex	r3, [r3]
 800c914:	623b      	str	r3, [r7, #32]
   return(result);
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c91c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	3308      	adds	r3, #8
 800c924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c926:	633a      	str	r2, [r7, #48]	; 0x30
 800c928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c92e:	e841 2300 	strex	r3, r2, [r1]
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1e5      	bne.n	800c906 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	e853 3f00 	ldrex	r3, [r3]
 800c946:	60fb      	str	r3, [r7, #12]
   return(result);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94e:	637b      	str	r3, [r7, #52]	; 0x34
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	461a      	mov	r2, r3
 800c956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c958:	61fb      	str	r3, [r7, #28]
 800c95a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95c:	69b9      	ldr	r1, [r7, #24]
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	e841 2300 	strex	r3, r2, [r1]
 800c964:	617b      	str	r3, [r7, #20]
   return(result);
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1e6      	bne.n	800c93a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800c96c:	e021      	b.n	800c9b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c980:	781a      	ldrb	r2, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c98c:	1c5a      	adds	r2, r3, #1
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c998:	b29b      	uxth	r3, r3
 800c99a:	3b01      	subs	r3, #1
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c9aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1a4      	bne.n	800c8fa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800c9b0:	e7ff      	b.n	800c9b2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800c9b2:	bf00      	nop
 800c9b4:	3744      	adds	r7, #68	; 0x44
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b091      	sub	sp, #68	; 0x44
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9cc:	2b21      	cmp	r3, #33	; 0x21
 800c9ce:	d165      	bne.n	800ca9c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c9d8:	e05c      	b.n	800ca94 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d133      	bne.n	800ca4e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3308      	adds	r3, #8
 800ca04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca0e:	e841 2300 	strex	r3, r2, [r1]
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1e5      	bne.n	800c9e6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	e853 3f00 	ldrex	r3, [r3]
 800ca26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3c:	6979      	ldr	r1, [r7, #20]
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	e841 2300 	strex	r3, r2, [r1]
 800ca44:	613b      	str	r3, [r7, #16]
   return(result);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e6      	bne.n	800ca1a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ca4c:	e026      	b.n	800ca9c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	69db      	ldr	r3, [r3, #28]
 800ca54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d018      	beq.n	800ca8e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca60:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca70:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca76:	1c9a      	adds	r2, r3, #2
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	3b01      	subs	r3, #1
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ca8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca90:	3b01      	subs	r3, #1
 800ca92:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ca94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d19f      	bne.n	800c9da <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ca9a:	e7ff      	b.n	800ca9c <UART_TxISR_16BIT_FIFOEN+0xde>
 800ca9c:	bf00      	nop
 800ca9e:	3744      	adds	r7, #68	; 0x44
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b088      	sub	sp, #32
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	e853 3f00 	ldrex	r3, [r3]
 800cabc:	60bb      	str	r3, [r7, #8]
   return(result);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac4:	61fb      	str	r3, [r7, #28]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	61bb      	str	r3, [r7, #24]
 800cad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	6979      	ldr	r1, [r7, #20]
 800cad4:	69ba      	ldr	r2, [r7, #24]
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	613b      	str	r3, [r7, #16]
   return(result);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e6      	bne.n	800cab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2220      	movs	r2, #32
 800cae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fe fd53 	bl	800b59c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800caf6:	bf00      	nop
 800caf8:	3720      	adds	r7, #32
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b096      	sub	sp, #88	; 0x58
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb16:	2b22      	cmp	r3, #34	; 0x22
 800cb18:	f040 8095 	bne.w	800cc46 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cb2a:	b2d9      	uxtb	r1, r3
 800cb2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb36:	400a      	ands	r2, r1
 800cb38:	b2d2      	uxtb	r2, r2
 800cb3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d178      	bne.n	800cc56 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6c:	e853 3f00 	ldrex	r3, [r3]
 800cb70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb78:	653b      	str	r3, [r7, #80]	; 0x50
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb82:	647b      	str	r3, [r7, #68]	; 0x44
 800cb84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb8a:	e841 2300 	strex	r3, r2, [r1]
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e6      	bne.n	800cb64 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3308      	adds	r3, #8
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	623b      	str	r3, [r7, #32]
   return(result);
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	f023 0301 	bic.w	r3, r3, #1
 800cbac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbb6:	633a      	str	r2, [r7, #48]	; 0x30
 800cbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbbe:	e841 2300 	strex	r3, r2, [r1]
 800cbc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1e5      	bne.n	800cb96 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2220      	movs	r2, #32
 800cbce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d12e      	bne.n	800cc3e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	e853 3f00 	ldrex	r3, [r3]
 800cbf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f023 0310 	bic.w	r3, r3, #16
 800cbfa:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc04:	61fb      	str	r3, [r7, #28]
 800cc06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	69b9      	ldr	r1, [r7, #24]
 800cc0a:	69fa      	ldr	r2, [r7, #28]
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	617b      	str	r3, [r7, #20]
   return(result);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e6      	bne.n	800cbe6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f003 0310 	and.w	r3, r3, #16
 800cc22:	2b10      	cmp	r3, #16
 800cc24:	d103      	bne.n	800cc2e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7fe fcc4 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc3c:	e00b      	b.n	800cc56 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f5 fda8 	bl	8002794 <HAL_UART_RxCpltCallback>
}
 800cc44:	e007      	b.n	800cc56 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	699a      	ldr	r2, [r3, #24]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f042 0208 	orr.w	r2, r2, #8
 800cc54:	619a      	str	r2, [r3, #24]
}
 800cc56:	bf00      	nop
 800cc58:	3758      	adds	r7, #88	; 0x58
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b096      	sub	sp, #88	; 0x58
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc6c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc76:	2b22      	cmp	r3, #34	; 0x22
 800cc78:	f040 8095 	bne.w	800cda6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc8a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc8c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cc90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cc94:	4013      	ands	r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca0:	1c9a      	adds	r2, r3, #2
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d178      	bne.n	800cdb6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	461a      	mov	r2, r3
 800cce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce2:	643b      	str	r3, [r7, #64]	; 0x40
 800cce4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e6      	bne.n	800ccc4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	f023 0301 	bic.w	r3, r3, #1
 800cd0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3308      	adds	r3, #8
 800cd14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1e5      	bne.n	800ccf6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d12e      	bne.n	800cd9e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	e853 3f00 	ldrex	r3, [r3]
 800cd52:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f023 0310 	bic.w	r3, r3, #16
 800cd5a:	647b      	str	r3, [r7, #68]	; 0x44
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd64:	61bb      	str	r3, [r7, #24]
 800cd66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	6979      	ldr	r1, [r7, #20]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	e841 2300 	strex	r3, r2, [r1]
 800cd70:	613b      	str	r3, [r7, #16]
   return(result);
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e6      	bne.n	800cd46 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	f003 0310 	and.w	r3, r3, #16
 800cd82:	2b10      	cmp	r3, #16
 800cd84:	d103      	bne.n	800cd8e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2210      	movs	r2, #16
 800cd8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd94:	4619      	mov	r1, r3
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7fe fc14 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd9c:	e00b      	b.n	800cdb6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7f5 fcf8 	bl	8002794 <HAL_UART_RxCpltCallback>
}
 800cda4:	e007      	b.n	800cdb6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f042 0208 	orr.w	r2, r2, #8
 800cdb4:	619a      	str	r2, [r3, #24]
}
 800cdb6:	bf00      	nop
 800cdb8:	3758      	adds	r7, #88	; 0x58
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b0a6      	sub	sp, #152	; 0x98
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	69db      	ldr	r3, [r3, #28]
 800cdd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdf6:	2b22      	cmp	r3, #34	; 0x22
 800cdf8:	f040 814d 	bne.w	800d096 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce02:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce06:	e0f4      	b.n	800cff2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ce12:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800ce16:	b2d9      	uxtb	r1, r3
 800ce18:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce22:	400a      	ands	r2, r1
 800ce24:	b2d2      	uxtb	r2, r2
 800ce26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce52:	f003 0307 	and.w	r3, r3, #7
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d053      	beq.n	800cf02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d011      	beq.n	800ce8a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ce66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2201      	movs	r2, #1
 800ce78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce80:	f043 0201 	orr.w	r2, r3, #1
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d011      	beq.n	800ceba <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ce96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00b      	beq.n	800ceba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2202      	movs	r2, #2
 800cea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceb0:	f043 0204 	orr.w	r2, r3, #4
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ceba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d011      	beq.n	800ceea <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cec6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ceca:	f003 0301 	and.w	r3, r3, #1
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00b      	beq.n	800ceea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2204      	movs	r2, #4
 800ced8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee0:	f043 0202 	orr.w	r2, r3, #2
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d006      	beq.n	800cf02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7fe fb5b 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d171      	bne.n	800cff2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cf1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cf30:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf32:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf34:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf38:	e841 2300 	strex	r3, r2, [r1]
 800cf3c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cf3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e4      	bne.n	800cf0e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3308      	adds	r3, #8
 800cf4a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf4e:	e853 3f00 	ldrex	r3, [r3]
 800cf52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf56:	4b56      	ldr	r3, [pc, #344]	; (800d0b0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	3308      	adds	r3, #8
 800cf62:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cf64:	657a      	str	r2, [r7, #84]	; 0x54
 800cf66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf6c:	e841 2300 	strex	r3, r2, [r1]
 800cf70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e5      	bne.n	800cf44 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2220      	movs	r2, #32
 800cf7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d12e      	bne.n	800cfec <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	f023 0310 	bic.w	r3, r3, #16
 800cfa8:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cfb2:	643b      	str	r3, [r7, #64]	; 0x40
 800cfb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e6      	bne.n	800cf94 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	f003 0310 	and.w	r3, r3, #16
 800cfd0:	2b10      	cmp	r3, #16
 800cfd2:	d103      	bne.n	800cfdc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2210      	movs	r2, #16
 800cfda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7fe faed 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
 800cfea:	e002      	b.n	800cff2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7f5 fbd1 	bl	8002794 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cff2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d006      	beq.n	800d008 <UART_RxISR_8BIT_FIFOEN+0x248>
 800cffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cffe:	f003 0320 	and.w	r3, r3, #32
 800d002:	2b00      	cmp	r3, #0
 800d004:	f47f af00 	bne.w	800ce08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d00e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d012:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d016:	2b00      	cmp	r3, #0
 800d018:	d045      	beq.n	800d0a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d020:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d024:	429a      	cmp	r2, r3
 800d026:	d23e      	bcs.n	800d0a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3308      	adds	r3, #8
 800d02e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d030:	6a3b      	ldr	r3, [r7, #32]
 800d032:	e853 3f00 	ldrex	r3, [r3]
 800d036:	61fb      	str	r3, [r7, #28]
   return(result);
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d03e:	673b      	str	r3, [r7, #112]	; 0x70
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3308      	adds	r3, #8
 800d046:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d04e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e5      	bne.n	800d028 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a15      	ldr	r2, [pc, #84]	; (800d0b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d060:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	e853 3f00 	ldrex	r3, [r3]
 800d06e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	f043 0320 	orr.w	r3, r3, #32
 800d076:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	461a      	mov	r2, r3
 800d07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d080:	61bb      	str	r3, [r7, #24]
 800d082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d084:	6979      	ldr	r1, [r7, #20]
 800d086:	69ba      	ldr	r2, [r7, #24]
 800d088:	e841 2300 	strex	r3, r2, [r1]
 800d08c:	613b      	str	r3, [r7, #16]
   return(result);
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e6      	bne.n	800d062 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d094:	e007      	b.n	800d0a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	699a      	ldr	r2, [r3, #24]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f042 0208 	orr.w	r2, r2, #8
 800d0a4:	619a      	str	r2, [r3, #24]
}
 800d0a6:	bf00      	nop
 800d0a8:	3798      	adds	r7, #152	; 0x98
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	effffffe 	.word	0xeffffffe
 800d0b4:	0800caff 	.word	0x0800caff

0800d0b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b0a8      	sub	sp, #160	; 0xa0
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0ee:	2b22      	cmp	r3, #34	; 0x22
 800d0f0:	f040 8151 	bne.w	800d396 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d0fe:	e0f8      	b.n	800d2f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d10e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d112:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d116:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d11a:	4013      	ands	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d122:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d128:	1c9a      	adds	r2, r3, #2
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d134:	b29b      	uxth	r3, r3
 800d136:	3b01      	subs	r3, #1
 800d138:	b29a      	uxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	69db      	ldr	r3, [r3, #28]
 800d146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d14a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	2b00      	cmp	r3, #0
 800d154:	d053      	beq.n	800d1fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d011      	beq.n	800d186 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2201      	movs	r2, #1
 800d174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d17c:	f043 0201 	orr.w	r2, r3, #1
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d18a:	f003 0302 	and.w	r3, r3, #2
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d011      	beq.n	800d1b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00b      	beq.n	800d1b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ac:	f043 0204 	orr.w	r2, r3, #4
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d011      	beq.n	800d1e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d1c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2204      	movs	r2, #4
 800d1d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1dc:	f043 0202 	orr.w	r2, r3, #2
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d006      	beq.n	800d1fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7fe f9dd 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d204:	b29b      	uxth	r3, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	d173      	bne.n	800d2f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d212:	e853 3f00 	ldrex	r3, [r3]
 800d216:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d21a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d21e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d22c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d22e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d232:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e4      	bne.n	800d20a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d252:	4b57      	ldr	r3, [pc, #348]	; (800d3b0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800d254:	4013      	ands	r3, r2
 800d256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3308      	adds	r3, #8
 800d260:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d264:	65ba      	str	r2, [r7, #88]	; 0x58
 800d266:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e3      	bne.n	800d240 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2220      	movs	r2, #32
 800d27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d12e      	bne.n	800d2ec <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29c:	e853 3f00 	ldrex	r3, [r3]
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	f023 0310 	bic.w	r3, r3, #16
 800d2a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ba:	e841 2300 	strex	r3, r2, [r1]
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e6      	bne.n	800d294 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	f003 0310 	and.w	r3, r3, #16
 800d2d0:	2b10      	cmp	r3, #16
 800d2d2:	d103      	bne.n	800d2dc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	2210      	movs	r2, #16
 800d2da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7fe f96d 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
 800d2ea:	e002      	b.n	800d2f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7f5 fa51 	bl	8002794 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d2f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d006      	beq.n	800d308 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d2fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2fe:	f003 0320 	and.w	r3, r3, #32
 800d302:	2b00      	cmp	r3, #0
 800d304:	f47f aefc 	bne.w	800d100 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d30e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d312:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d316:	2b00      	cmp	r3, #0
 800d318:	d045      	beq.n	800d3a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d320:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d324:	429a      	cmp	r2, r3
 800d326:	d23e      	bcs.n	800d3a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3308      	adds	r3, #8
 800d32e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	623b      	str	r3, [r7, #32]
   return(result);
 800d338:	6a3b      	ldr	r3, [r7, #32]
 800d33a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d33e:	677b      	str	r3, [r7, #116]	; 0x74
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3308      	adds	r3, #8
 800d346:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d348:	633a      	str	r2, [r7, #48]	; 0x30
 800d34a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e5      	bne.n	800d328 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a15      	ldr	r2, [pc, #84]	; (800d3b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d360:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	e853 3f00 	ldrex	r3, [r3]
 800d36e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f043 0320 	orr.w	r3, r3, #32
 800d376:	673b      	str	r3, [r7, #112]	; 0x70
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d380:	61fb      	str	r3, [r7, #28]
 800d382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	69b9      	ldr	r1, [r7, #24]
 800d386:	69fa      	ldr	r2, [r7, #28]
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	617b      	str	r3, [r7, #20]
   return(result);
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e6      	bne.n	800d362 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d394:	e007      	b.n	800d3a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	699a      	ldr	r2, [r3, #24]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f042 0208 	orr.w	r2, r2, #8
 800d3a4:	619a      	str	r2, [r3, #24]
}
 800d3a6:	bf00      	nop
 800d3a8:	37a0      	adds	r7, #160	; 0xa0
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	effffffe 	.word	0xeffffffe
 800d3b4:	0800cc5f 	.word	0x0800cc5f

0800d3b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d402:	2b01      	cmp	r3, #1
 800d404:	d101      	bne.n	800d40a <HAL_UARTEx_DisableFifoMode+0x16>
 800d406:	2302      	movs	r3, #2
 800d408:	e027      	b.n	800d45a <HAL_UARTEx_DisableFifoMode+0x66>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2224      	movs	r2, #36	; 0x24
 800d416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 0201 	bic.w	r2, r2, #1
 800d430:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d438:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2220      	movs	r2, #32
 800d44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d476:	2b01      	cmp	r3, #1
 800d478:	d101      	bne.n	800d47e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d47a:	2302      	movs	r3, #2
 800d47c:	e02d      	b.n	800d4da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2224      	movs	r2, #36	; 0x24
 800d48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f022 0201 	bic.w	r2, r2, #1
 800d4a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f850 	bl	800d560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2220      	movs	r2, #32
 800d4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b084      	sub	sp, #16
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d101      	bne.n	800d4fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	e02d      	b.n	800d556 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2224      	movs	r2, #36	; 0x24
 800d506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f022 0201 	bic.w	r2, r2, #1
 800d520:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f812 	bl	800d560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2220      	movs	r2, #32
 800d548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d108      	bne.n	800d582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d580:	e031      	b.n	800d5e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d582:	2310      	movs	r3, #16
 800d584:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d586:	2310      	movs	r3, #16
 800d588:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	0e5b      	lsrs	r3, r3, #25
 800d592:	b2db      	uxtb	r3, r3
 800d594:	f003 0307 	and.w	r3, r3, #7
 800d598:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	0f5b      	lsrs	r3, r3, #29
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0307 	and.w	r3, r3, #7
 800d5a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	7b3a      	ldrb	r2, [r7, #12]
 800d5ae:	4911      	ldr	r1, [pc, #68]	; (800d5f4 <UARTEx_SetNbDataToProcess+0x94>)
 800d5b0:	5c8a      	ldrb	r2, [r1, r2]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5b6:	7b3a      	ldrb	r2, [r7, #12]
 800d5b8:	490f      	ldr	r1, [pc, #60]	; (800d5f8 <UARTEx_SetNbDataToProcess+0x98>)
 800d5ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ca:	7b7a      	ldrb	r2, [r7, #13]
 800d5cc:	4909      	ldr	r1, [pc, #36]	; (800d5f4 <UARTEx_SetNbDataToProcess+0x94>)
 800d5ce:	5c8a      	ldrb	r2, [r1, r2]
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d5d4:	7b7a      	ldrb	r2, [r7, #13]
 800d5d6:	4908      	ldr	r1, [pc, #32]	; (800d5f8 <UARTEx_SetNbDataToProcess+0x98>)
 800d5d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5da:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d5e6:	bf00      	nop
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	0800d7ec 	.word	0x0800d7ec
 800d5f8:	0800d7f4 	.word	0x0800d7f4

0800d5fc <_ZdaPv>:
 800d5fc:	f000 b800 	b.w	800d600 <_ZdlPv>

0800d600 <_ZdlPv>:
 800d600:	f000 b824 	b.w	800d64c <free>

0800d604 <__libc_init_array>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	4d0d      	ldr	r5, [pc, #52]	; (800d63c <__libc_init_array+0x38>)
 800d608:	4c0d      	ldr	r4, [pc, #52]	; (800d640 <__libc_init_array+0x3c>)
 800d60a:	1b64      	subs	r4, r4, r5
 800d60c:	10a4      	asrs	r4, r4, #2
 800d60e:	2600      	movs	r6, #0
 800d610:	42a6      	cmp	r6, r4
 800d612:	d109      	bne.n	800d628 <__libc_init_array+0x24>
 800d614:	4d0b      	ldr	r5, [pc, #44]	; (800d644 <__libc_init_array+0x40>)
 800d616:	4c0c      	ldr	r4, [pc, #48]	; (800d648 <__libc_init_array+0x44>)
 800d618:	f000 f882 	bl	800d720 <_init>
 800d61c:	1b64      	subs	r4, r4, r5
 800d61e:	10a4      	asrs	r4, r4, #2
 800d620:	2600      	movs	r6, #0
 800d622:	42a6      	cmp	r6, r4
 800d624:	d105      	bne.n	800d632 <__libc_init_array+0x2e>
 800d626:	bd70      	pop	{r4, r5, r6, pc}
 800d628:	f855 3b04 	ldr.w	r3, [r5], #4
 800d62c:	4798      	blx	r3
 800d62e:	3601      	adds	r6, #1
 800d630:	e7ee      	b.n	800d610 <__libc_init_array+0xc>
 800d632:	f855 3b04 	ldr.w	r3, [r5], #4
 800d636:	4798      	blx	r3
 800d638:	3601      	adds	r6, #1
 800d63a:	e7f2      	b.n	800d622 <__libc_init_array+0x1e>
 800d63c:	0800d864 	.word	0x0800d864
 800d640:	0800d864 	.word	0x0800d864
 800d644:	0800d864 	.word	0x0800d864
 800d648:	0800d86c 	.word	0x0800d86c

0800d64c <free>:
 800d64c:	4b02      	ldr	r3, [pc, #8]	; (800d658 <free+0xc>)
 800d64e:	4601      	mov	r1, r0
 800d650:	6818      	ldr	r0, [r3, #0]
 800d652:	f000 b80b 	b.w	800d66c <_free_r>
 800d656:	bf00      	nop
 800d658:	24000040 	.word	0x24000040

0800d65c <memset>:
 800d65c:	4402      	add	r2, r0
 800d65e:	4603      	mov	r3, r0
 800d660:	4293      	cmp	r3, r2
 800d662:	d100      	bne.n	800d666 <memset+0xa>
 800d664:	4770      	bx	lr
 800d666:	f803 1b01 	strb.w	r1, [r3], #1
 800d66a:	e7f9      	b.n	800d660 <memset+0x4>

0800d66c <_free_r>:
 800d66c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d66e:	2900      	cmp	r1, #0
 800d670:	d044      	beq.n	800d6fc <_free_r+0x90>
 800d672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d676:	9001      	str	r0, [sp, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f1a1 0404 	sub.w	r4, r1, #4
 800d67e:	bfb8      	it	lt
 800d680:	18e4      	addlt	r4, r4, r3
 800d682:	f000 f83f 	bl	800d704 <__malloc_lock>
 800d686:	4a1e      	ldr	r2, [pc, #120]	; (800d700 <_free_r+0x94>)
 800d688:	9801      	ldr	r0, [sp, #4]
 800d68a:	6813      	ldr	r3, [r2, #0]
 800d68c:	b933      	cbnz	r3, 800d69c <_free_r+0x30>
 800d68e:	6063      	str	r3, [r4, #4]
 800d690:	6014      	str	r4, [r2, #0]
 800d692:	b003      	add	sp, #12
 800d694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d698:	f000 b83a 	b.w	800d710 <__malloc_unlock>
 800d69c:	42a3      	cmp	r3, r4
 800d69e:	d908      	bls.n	800d6b2 <_free_r+0x46>
 800d6a0:	6825      	ldr	r5, [r4, #0]
 800d6a2:	1961      	adds	r1, r4, r5
 800d6a4:	428b      	cmp	r3, r1
 800d6a6:	bf01      	itttt	eq
 800d6a8:	6819      	ldreq	r1, [r3, #0]
 800d6aa:	685b      	ldreq	r3, [r3, #4]
 800d6ac:	1949      	addeq	r1, r1, r5
 800d6ae:	6021      	streq	r1, [r4, #0]
 800d6b0:	e7ed      	b.n	800d68e <_free_r+0x22>
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	b10b      	cbz	r3, 800d6bc <_free_r+0x50>
 800d6b8:	42a3      	cmp	r3, r4
 800d6ba:	d9fa      	bls.n	800d6b2 <_free_r+0x46>
 800d6bc:	6811      	ldr	r1, [r2, #0]
 800d6be:	1855      	adds	r5, r2, r1
 800d6c0:	42a5      	cmp	r5, r4
 800d6c2:	d10b      	bne.n	800d6dc <_free_r+0x70>
 800d6c4:	6824      	ldr	r4, [r4, #0]
 800d6c6:	4421      	add	r1, r4
 800d6c8:	1854      	adds	r4, r2, r1
 800d6ca:	42a3      	cmp	r3, r4
 800d6cc:	6011      	str	r1, [r2, #0]
 800d6ce:	d1e0      	bne.n	800d692 <_free_r+0x26>
 800d6d0:	681c      	ldr	r4, [r3, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	6053      	str	r3, [r2, #4]
 800d6d6:	4421      	add	r1, r4
 800d6d8:	6011      	str	r1, [r2, #0]
 800d6da:	e7da      	b.n	800d692 <_free_r+0x26>
 800d6dc:	d902      	bls.n	800d6e4 <_free_r+0x78>
 800d6de:	230c      	movs	r3, #12
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	e7d6      	b.n	800d692 <_free_r+0x26>
 800d6e4:	6825      	ldr	r5, [r4, #0]
 800d6e6:	1961      	adds	r1, r4, r5
 800d6e8:	428b      	cmp	r3, r1
 800d6ea:	bf04      	itt	eq
 800d6ec:	6819      	ldreq	r1, [r3, #0]
 800d6ee:	685b      	ldreq	r3, [r3, #4]
 800d6f0:	6063      	str	r3, [r4, #4]
 800d6f2:	bf04      	itt	eq
 800d6f4:	1949      	addeq	r1, r1, r5
 800d6f6:	6021      	streq	r1, [r4, #0]
 800d6f8:	6054      	str	r4, [r2, #4]
 800d6fa:	e7ca      	b.n	800d692 <_free_r+0x26>
 800d6fc:	b003      	add	sp, #12
 800d6fe:	bd30      	pop	{r4, r5, pc}
 800d700:	24045a48 	.word	0x24045a48

0800d704 <__malloc_lock>:
 800d704:	4801      	ldr	r0, [pc, #4]	; (800d70c <__malloc_lock+0x8>)
 800d706:	f000 b809 	b.w	800d71c <__retarget_lock_acquire_recursive>
 800d70a:	bf00      	nop
 800d70c:	24045a4c 	.word	0x24045a4c

0800d710 <__malloc_unlock>:
 800d710:	4801      	ldr	r0, [pc, #4]	; (800d718 <__malloc_unlock+0x8>)
 800d712:	f000 b804 	b.w	800d71e <__retarget_lock_release_recursive>
 800d716:	bf00      	nop
 800d718:	24045a4c 	.word	0x24045a4c

0800d71c <__retarget_lock_acquire_recursive>:
 800d71c:	4770      	bx	lr

0800d71e <__retarget_lock_release_recursive>:
 800d71e:	4770      	bx	lr

0800d720 <_init>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr

0800d72c <_fini>:
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72e:	bf00      	nop
 800d730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d732:	bc08      	pop	{r3}
 800d734:	469e      	mov	lr, r3
 800d736:	4770      	bx	lr
