
drifting_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b74c  0800b74c  0001b74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b754  0800b754  0001b754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b758  0800b758  0001b758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800b75c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  24000074  0800b7d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003dc  0800b7d0  000203dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d370  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ef1  00000000  00000000  0003d412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001560  00000000  00000000  00040308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001460  00000000  00000000  00041868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037735  00000000  00000000  00042cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc11  00000000  00000000  0007a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a40d  00000000  00000000  0009800e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020241b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ff8  00000000  00000000  0020246c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aee4 	.word	0x0800aee4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800aee4 	.word	0x0800aee4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void flash(uint8_t count) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < count; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e010      	b.n	80006c6 <flash+0x32>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006a4:	2102      	movs	r1, #2
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <flash+0x48>)
 80006a8:	f002 fb2b 	bl	8002d02 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f001 fa3f 	bl	8001b30 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006b2:	2102      	movs	r1, #2
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <flash+0x48>)
 80006b6:	f002 fb24 	bl	8002d02 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f001 fa38 	bl	8001b30 <HAL_Delay>
  for (int i = 0; i < count; i++) {
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	dbea      	blt.n	80006a4 <flash+0x10>
  }

  HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f001 fa2e 	bl	8001b30 <HAL_Delay>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	58020000 	.word	0x58020000

080006e0 <console>:

// Monitor console
void console(const char *str) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, (uint16_t)strlen(str));
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff fdf9 	bl	80002e0 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <console+0x24>)
 80006f8:	f007 fa92 	bl	8007c20 <HAL_UART_Transmit_IT>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	240001fc 	.word	0x240001fc

08000708 <send_data>:

void send_data(
  float x1, float x2, float x3,
  float x4, float x5, float x6,
  float x7, float x8, float x9) {
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b093      	sub	sp, #76	; 0x4c
 800070c:	af08      	add	r7, sp, #32
 800070e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000712:	edc7 0a08 	vstr	s1, [r7, #32]
 8000716:	ed87 1a07 	vstr	s2, [r7, #28]
 800071a:	edc7 1a06 	vstr	s3, [r7, #24]
 800071e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000722:	edc7 2a04 	vstr	s5, [r7, #16]
 8000726:	ed87 3a03 	vstr	s6, [r7, #12]
 800072a:	edc7 3a02 	vstr	s7, [r7, #8]
 800072e:	ed87 4a01 	vstr	s8, [r7, #4]
  memset(g_console_msg, 0, 256);
 8000732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000736:	2100      	movs	r1, #0
 8000738:	4837      	ldr	r0, [pc, #220]	; (8000818 <send_data+0x110>)
 800073a:	f009 ff5d 	bl	800a5f8 <memset>
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
      (int)(x1*100000),
 800073e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000742:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800081c <send_data+0x114>
 8000746:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800074a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
      (int)(x2*100000),
 800074e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000752:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800081c <send_data+0x114>
 8000756:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800075a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
      (int)(x3*100000),
 800075e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000762:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800081c <send_data+0x114>
 8000766:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800076a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076e:	ee17 3a90 	vmov	r3, s15
      (int)(x4*100000),
 8000772:	edd7 7a06 	vldr	s15, [r7, #24]
 8000776:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800081c <send_data+0x114>
 800077a:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 800077e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000782:	ee17 2a90 	vmov	r2, s15
      (int)(x5*100000),
 8000786:	edd7 7a05 	vldr	s15, [r7, #20]
 800078a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800081c <send_data+0x114>
 800078e:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 8000792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000796:	ee17 1a90 	vmov	r1, s15
      (int)(x6*100000),
 800079a:	edd7 7a04 	vldr	s15, [r7, #16]
 800079e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800081c <send_data+0x114>
 80007a2:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80007a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007aa:	ee17 0a90 	vmov	r0, s15
      (int)(x7*100000),
 80007ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800081c <send_data+0x114>
 80007b6:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80007ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007be:	ee17 4a90 	vmov	r4, s15
      (int)(x8*100000),
 80007c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80007c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800081c <send_data+0x114>
 80007ca:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80007ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d2:	ee17 5a90 	vmov	r5, s15
      (int)(x9*100000));
 80007d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80007da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800081c <send_data+0x114>
 80007de:	ee67 7a87 	vmul.f32	s15, s15, s14
  sprintf(g_console_msg, "[%d,%d,%d,%d,%d,%d,%d,%d,%d]\n",
 80007e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e6:	ee17 6a90 	vmov	r6, s15
 80007ea:	9606      	str	r6, [sp, #24]
 80007ec:	9505      	str	r5, [sp, #20]
 80007ee:	9404      	str	r4, [sp, #16]
 80007f0:	9003      	str	r0, [sp, #12]
 80007f2:	9102      	str	r1, [sp, #8]
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	ee16 3a10 	vmov	r3, s12
 80007fc:	ee16 2a90 	vmov	r2, s13
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <send_data+0x118>)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <send_data+0x110>)
 8000804:	f009 ff00 	bl	800a608 <siprintf>
  console(g_console_msg);
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <send_data+0x110>)
 800080a:	f7ff ff69 	bl	80006e0 <console>
}
 800080e:	bf00      	nop
 8000810:	372c      	adds	r7, #44	; 0x2c
 8000812:	46bd      	mov	sp, r7
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000816:	bf00      	nop
 8000818:	24000294 	.word	0x24000294
 800081c:	47c35000 	.word	0x47c35000
 8000820:	0800aefc 	.word	0x0800aefc

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800082a:	f000 fb55 	bl	8000ed8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f001 f8ed 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f849 	bl	80008c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000836:	f000 f8c5 	bl	80009c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 fac7 	bl	8000dcc <MX_GPIO_Init>
  MX_I2C1_Init();
 800083e:	f000 f8dd 	bl	80009fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000842:	f000 f91b 	bl	8000a7c <MX_SPI1_Init>
  MX_TIM6_Init();
 8000846:	f000 fa3f 	bl	8000cc8 <MX_TIM6_Init>
  MX_TIM1_Init();
 800084a:	f000 f96d 	bl	8000b28 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800084e:	f000 fa71 	bl	8000d34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  flash(5);
 8000852:	2005      	movs	r0, #5
 8000854:	f7ff ff1e 	bl	8000694 <flash>

  // Initialise GY-86
  while (1) {
    int error = adns3080_init(&g_of, &hspi1);
 8000858:	4915      	ldr	r1, [pc, #84]	; (80008b0 <main+0x8c>)
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <main+0x90>)
 800085c:	f000 fb6e 	bl	8000f3c <adns3080_init>
 8000860:	6078      	str	r0, [r7, #4]
    if (error == 0) break;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d005      	beq.n	8000874 <main+0x50>
    flash(error);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff11 	bl	8000694 <flash>
  while (1) {
 8000872:	e7f1      	b.n	8000858 <main+0x34>
    if (error == 0) break;
 8000874:	bf00      	nop
  }

  flash(5);
 8000876:	2005      	movs	r0, #5
 8000878:	f7ff ff0c 	bl	8000694 <flash>

  // For output PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <main+0x94>)
 8000880:	f005 ffb4 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000884:	2104      	movs	r1, #4
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <main+0x94>)
 8000888:	f005 ffb0 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800088c:	2108      	movs	r1, #8
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <main+0x94>)
 8000890:	f005 ffac 	bl	80067ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000894:	210c      	movs	r1, #12
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <main+0x94>)
 8000898:	f005 ffa8 	bl	80067ec <HAL_TIM_PWM_Start>

  // Optical flow timer
  HAL_TIM_Base_Start_IT(&htim6);
 800089c:	4807      	ldr	r0, [pc, #28]	; (80008bc <main+0x98>)
 800089e:	f005 fecb 	bl	8006638 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Receive_IT(&huart1, g_uart_rx_buffer, 1);
 80008a2:	2201      	movs	r2, #1
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <main+0x9c>)
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <main+0xa0>)
 80008a8:	f007 fa62 	bl	8007d70 <HAL_UART_Receive_IT>
 80008ac:	e7f9      	b.n	80008a2 <main+0x7e>
 80008ae:	bf00      	nop
 80008b0:	240000dc 	.word	0x240000dc
 80008b4:	2400028c 	.word	0x2400028c
 80008b8:	24000164 	.word	0x24000164
 80008bc:	240001b0 	.word	0x240001b0
 80008c0:	24000394 	.word	0x24000394
 80008c4:	240001fc 	.word	0x240001fc

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	; 0x70
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	224c      	movs	r2, #76	; 0x4c
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f009 fe8e 	bl	800a5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2220      	movs	r2, #32
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f009 fe88 	bl	800a5f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f002 fb4d 	bl	8002f88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <SystemClock_Config+0xf4>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <SystemClock_Config+0xf4>)
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <SystemClock_Config+0xf4>)
 8000900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <SystemClock_Config+0xf8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <SystemClock_Config+0xf8>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <SystemClock_Config+0xf8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <SystemClock_Config+0xf8>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000930:	2303      	movs	r3, #3
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800094a:	2305      	movs	r3, #5
 800094c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800095e:	2308      	movs	r3, #8
 8000960:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000962:	2300      	movs	r3, #0
 8000964:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fb44 	bl	8002ffc <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800097a:	f000 fad9 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	233f      	movs	r3, #63	; 0x3f
 8000980:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2303      	movs	r3, #3
 8000984:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800098a:	2308      	movs	r3, #8
 800098c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800098e:	2340      	movs	r3, #64	; 0x40
 8000990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2102      	movs	r1, #2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 ff57 	bl	8003858 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80009b0:	f000 fabe 	bl	8000f30 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3770      	adds	r7, #112	; 0x70
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	58000400 	.word	0x58000400
 80009c0:	58024800 	.word	0x58024800

080009c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b0      	sub	sp, #192	; 0xc0
 80009c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	22bc      	movs	r2, #188	; 0xbc
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 fe11 	bl	800a5f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80009d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80009da:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fac4 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80009ee:	f000 fa9f 	bl	8000f30 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	37c0      	adds	r7, #192	; 0xc0
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f002 f97e 	bl	8002d38 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a42:	f000 fa75 	bl	8000f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f002 fa05 	bl	8002e58 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a54:	f000 fa6c 	bl	8000f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f002 fa47 	bl	8002eee <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 fa63 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000090 	.word	0x24000090
 8000a74:	40005400 	.word	0x40005400
 8000a78:	10c0ecff 	.word	0x10c0ecff

08000a7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a82:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <MX_SPI1_Init+0xa8>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a96:	2207      	movs	r2, #7
 8000a98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aa8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ab0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ab4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0xa4>)
 8000b0e:	f004 fd97 	bl	8005640 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b18:	f000 fa0a 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240000dc 	.word	0x240000dc
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09a      	sub	sp, #104	; 0x68
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
 8000b58:	615a      	str	r2, [r3, #20]
 8000b5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	222c      	movs	r2, #44	; 0x2c
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f009 fd48 	bl	800a5f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b68:	4b55      	ldr	r3, [pc, #340]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b6a:	4a56      	ldr	r2, [pc, #344]	; (8000cc4 <MX_TIM1_Init+0x19c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000b6e:	4b54      	ldr	r3, [pc, #336]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b52      	ldr	r3, [pc, #328]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000;
 8000b7a:	4b51      	ldr	r3, [pc, #324]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b7c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b4f      	ldr	r3, [pc, #316]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b88:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b4c      	ldr	r3, [pc, #304]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b94:	484a      	ldr	r0, [pc, #296]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000b96:	f005 fcf8 	bl	800658a <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ba0:	f000 f9c6 	bl	8000f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4843      	ldr	r0, [pc, #268]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000bb2:	f006 f95d 	bl	8006e70 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bbc:	f000 f9b8 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc0:	483f      	ldr	r0, [pc, #252]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000bc2:	f005 fdb1 	bl	8006728 <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bcc:	f000 f9b0 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4837      	ldr	r0, [pc, #220]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000be4:	f006 fea2 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000bee:	f000 f99f 	bl	8000f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf2:	2360      	movs	r3, #96	; 0x60
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	482a      	ldr	r0, [pc, #168]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000c18:	f006 f816 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c22:	f000 f985 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000c30:	f006 f80a 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c3a:	f000 f979 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c42:	2208      	movs	r2, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000c48:	f005 fffe 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000c52:	f000 f96d 	bl	8000f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000c60:	f005 fff2 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000c6a:	f000 f961 	bl	8000f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000ca4:	f006 fed0 	bl	8007a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000cae:	f000 f93f 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <MX_TIM1_Init+0x198>)
 8000cb4:	f000 fc6e 	bl	8001594 <HAL_TIM_MspPostInit>

}
 8000cb8:	bf00      	nop
 8000cba:	3768      	adds	r7, #104	; 0x68
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24000164 	.word	0x24000164
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <MX_TIM6_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000ce0:	2264      	movs	r2, #100	; 0x64
 8000ce2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 25000;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cec:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000cf0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000cfa:	f005 fc46 	bl	800658a <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d04:	f000 f914 	bl	8000f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM6_Init+0x64>)
 8000d16:	f006 fe09 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d20:	f000 f906 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	240001b0 	.word	0x240001b0
 8000d30:	40001000 	.word	0x40001000

08000d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <MX_USART1_UART_Init+0x94>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7c:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d7e:	f006 feff 	bl	8007b80 <HAL_UART_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f8d2 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000d90:	f009 fb3d 	bl	800a40e <HAL_UARTEx_SetTxFifoThreshold>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 f8c9 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000da2:	f009 fb72 	bl	800a48a <HAL_UARTEx_SetRxFifoThreshold>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f8c0 	bl	8000f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_USART1_UART_Init+0x90>)
 8000db2:	f009 faf3 	bl	800a39c <HAL_UARTEx_DisableFifoMode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f8b8 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	240001fc 	.word	0x240001fc
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de2:	4b3a      	ldr	r3, [pc, #232]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_GPIO_Init+0x100>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000e7e:	f001 ff27 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000e88:	f001 ff22 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <MX_GPIO_Init+0x104>)
 8000ea4:	f001 fd64 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_GPIO_Init+0x108>)
 8000ec0:	f001 fd56 	bl	8002970 <HAL_GPIO_Init>

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58020800 	.word	0x58020800
 8000ed4:	58020000 	.word	0x58020000

08000ed8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eea:	f000 ff61 	bl	8001db0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000efa:	231f      	movs	r3, #31
 8000efc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000efe:	2387      	movs	r3, #135	; 0x87
 8000f00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f06:	2300      	movs	r3, #0
 8000f08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 ff7f 	bl	8001e20 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f22:	2004      	movs	r0, #4
 8000f24:	f000 ff5c 	bl	8001de0 <HAL_MPU_Enable>

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <adns3080_init>:
  0x06, 0xa2, 0x43, 0xa2, 0xbc, 0xf2, 0xa4, 0x4d, 0x04, 0x6f, 0xb3, 0xd0, 0xaf, 0xd5, 0xf2, 0xa8,
  0xc4, 0xd8, 0x92, 0xa7, 0x36, 0xe2, 0xe9, 0xdf, 0x6d, 0x84, 0xa9, 0x36, 0x5f, 0x20, 0x51, 0x0d,
  0x00, 0x88
};

int adns3080_init(adns3080_t *of, SPI_HandleTypeDef *spi) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint8_t in[2];
  uint8_t out[2];

  of->spi = spi;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	601a      	str	r2, [r3, #0]

  // Check product ID
  int retry = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  while (retry < 100) {
 8000f50:	e02d      	b.n	8000fae <adns3080_init+0x72>
    MOUSECAM_CS_LOW
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	48c3      	ldr	r0, [pc, #780]	; (8001264 <adns3080_init+0x328>)
 8000f58:	f001 feba 	bl	8002cd0 <HAL_GPIO_WritePin>
    in[0] = ADNS3080_PRODUCT_ID;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	743b      	strb	r3, [r7, #16]
    if (HAL_SPI_Transmit(of->spi, in, 1, 10) != HAL_OK) return 1;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	f107 0110 	add.w	r1, r7, #16
 8000f68:	230a      	movs	r3, #10
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f004 fc6e 	bl	800584c <HAL_SPI_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <adns3080_init+0x3e>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e19d      	b.n	80012b6 <adns3080_init+0x37a>
    out[0] = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	733b      	strb	r3, [r7, #12]
    if (HAL_SPI_Receive(of->spi, out, 1, 10) != HAL_OK) return 2;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	f107 010c 	add.w	r1, r7, #12
 8000f86:	230a      	movs	r3, #10
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f004 fe51 	bl	8005c30 <HAL_SPI_Receive>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <adns3080_init+0x5c>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e18e      	b.n	80012b6 <adns3080_init+0x37a>
    MOUSECAM_CS_HIG
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	48b1      	ldr	r0, [pc, #708]	; (8001264 <adns3080_init+0x328>)
 8000f9e:	f001 fe97 	bl	8002cd0 <HAL_GPIO_WritePin>
    if (out[0] == 0x17) break;
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	2b17      	cmp	r3, #23
 8000fa6:	d006      	beq.n	8000fb6 <adns3080_init+0x7a>
    retry += 1;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  while (retry < 100) {
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2b63      	cmp	r3, #99	; 0x63
 8000fb2:	ddce      	ble.n	8000f52 <adns3080_init+0x16>
 8000fb4:	e000      	b.n	8000fb8 <adns3080_init+0x7c>
    if (out[0] == 0x17) break;
 8000fb6:	bf00      	nop
  }

  if (retry >= 100) return 3;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2b63      	cmp	r3, #99	; 0x63
 8000fbc:	dd01      	ble.n	8000fc2 <adns3080_init+0x86>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e179      	b.n	80012b6 <adns3080_init+0x37a>

  // Locking frame rate
  // Read ADNS3080_EXTENDED_CONFIG
  MOUSECAM_CS_LOW
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	48a7      	ldr	r0, [pc, #668]	; (8001264 <adns3080_init+0x328>)
 8000fc8:	f001 fe82 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_EXTENDED_CONFIG;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	743b      	strb	r3, [r7, #16]
  if (HAL_SPI_Transmit(of->spi, in, 1, 10) != HAL_OK) return 4;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f107 0110 	add.w	r1, r7, #16
 8000fd8:	230a      	movs	r3, #10
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f004 fc36 	bl	800584c <HAL_SPI_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <adns3080_init+0xae>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e165      	b.n	80012b6 <adns3080_init+0x37a>
  out[0] = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	733b      	strb	r3, [r7, #12]
  if (HAL_SPI_Receive(of->spi, out, 1, 10) != HAL_OK) return 5;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	f107 010c 	add.w	r1, r7, #12
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f004 fe19 	bl	8005c30 <HAL_SPI_Receive>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <adns3080_init+0xcc>
 8001004:	2305      	movs	r3, #5
 8001006:	e156      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 8001008:	2201      	movs	r2, #1
 800100a:	2101      	movs	r1, #1
 800100c:	4895      	ldr	r0, [pc, #596]	; (8001264 <adns3080_init+0x328>)
 800100e:	f001 fe5f 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 8001012:	2032      	movs	r0, #50	; 0x32
 8001014:	f000 fd8c 	bl	8001b30 <HAL_Delay>

  // Write ADNS3080_EXTENDED_CONFIG
  MOUSECAM_CS_LOW
 8001018:	2200      	movs	r2, #0
 800101a:	2101      	movs	r1, #1
 800101c:	4891      	ldr	r0, [pc, #580]	; (8001264 <adns3080_init+0x328>)
 800101e:	f001 fe57 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_EXTENDED_CONFIG | 0x80;
 8001022:	238b      	movs	r3, #139	; 0x8b
 8001024:	743b      	strb	r3, [r7, #16]
  in[1] = (out[0] & ~0x01) | 0x01;
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 6;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 0110 	add.w	r1, r7, #16
 8001038:	230a      	movs	r3, #10
 800103a:	2202      	movs	r2, #2
 800103c:	f004 fc06 	bl	800584c <HAL_SPI_Transmit>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <adns3080_init+0x10e>
 8001046:	2306      	movs	r3, #6
 8001048:	e135      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 800104a:	2201      	movs	r2, #1
 800104c:	2101      	movs	r1, #1
 800104e:	4885      	ldr	r0, [pc, #532]	; (8001264 <adns3080_init+0x328>)
 8001050:	f001 fe3e 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 8001054:	2032      	movs	r0, #50	; 0x32
 8001056:	f000 fd6b 	bl	8001b30 <HAL_Delay>

  // Write ADNS3080_FRAME_PERIOD_MAX_BOUND_LOWER
  MOUSECAM_CS_LOW
 800105a:	2200      	movs	r2, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4881      	ldr	r0, [pc, #516]	; (8001264 <adns3080_init+0x328>)
 8001060:	f001 fe36 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_FRAME_PERIOD_MAX_BOUND_LOWER | 0x80;
 8001064:	2399      	movs	r3, #153	; 0x99
 8001066:	743b      	strb	r3, [r7, #16]
  in[1] = 0x2E;
 8001068:	232e      	movs	r3, #46	; 0x2e
 800106a:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 7;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	f107 0110 	add.w	r1, r7, #16
 8001074:	230a      	movs	r3, #10
 8001076:	2202      	movs	r2, #2
 8001078:	f004 fbe8 	bl	800584c <HAL_SPI_Transmit>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <adns3080_init+0x14a>
 8001082:	2307      	movs	r3, #7
 8001084:	e117      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 8001086:	2201      	movs	r2, #1
 8001088:	2101      	movs	r1, #1
 800108a:	4876      	ldr	r0, [pc, #472]	; (8001264 <adns3080_init+0x328>)
 800108c:	f001 fe20 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 8001090:	2032      	movs	r0, #50	; 0x32
 8001092:	f000 fd4d 	bl	8001b30 <HAL_Delay>

  // Write ADNS3080_FRAME_PERIOD_MAX_BOUND_UPPER
  MOUSECAM_CS_LOW
 8001096:	2200      	movs	r2, #0
 8001098:	2101      	movs	r1, #1
 800109a:	4872      	ldr	r0, [pc, #456]	; (8001264 <adns3080_init+0x328>)
 800109c:	f001 fe18 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_FRAME_PERIOD_MAX_BOUND_UPPER | 0x80;
 80010a0:	239a      	movs	r3, #154	; 0x9a
 80010a2:	743b      	strb	r3, [r7, #16]
  in[1] = 0xE0;
 80010a4:	23e0      	movs	r3, #224	; 0xe0
 80010a6:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 8;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	f107 0110 	add.w	r1, r7, #16
 80010b0:	230a      	movs	r3, #10
 80010b2:	2202      	movs	r2, #2
 80010b4:	f004 fbca 	bl	800584c <HAL_SPI_Transmit>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <adns3080_init+0x186>
 80010be:	2308      	movs	r3, #8
 80010c0:	e0f9      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4867      	ldr	r0, [pc, #412]	; (8001264 <adns3080_init+0x328>)
 80010c8:	f001 fe02 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f000 fd2f 	bl	8001b30 <HAL_Delay>

  // Read ADNS3080_CONFIGURATION_BITS
  MOUSECAM_CS_LOW
 80010d2:	2200      	movs	r2, #0
 80010d4:	2101      	movs	r1, #1
 80010d6:	4863      	ldr	r0, [pc, #396]	; (8001264 <adns3080_init+0x328>)
 80010d8:	f001 fdfa 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_CONFIGURATION_BITS;
 80010dc:	230a      	movs	r3, #10
 80010de:	743b      	strb	r3, [r7, #16]
  if (HAL_SPI_Transmit(of->spi, in, 1, 10) != HAL_OK) return 9;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 0110 	add.w	r1, r7, #16
 80010e8:	230a      	movs	r3, #10
 80010ea:	2201      	movs	r2, #1
 80010ec:	f004 fbae 	bl	800584c <HAL_SPI_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <adns3080_init+0x1be>
 80010f6:	2309      	movs	r3, #9
 80010f8:	e0dd      	b.n	80012b6 <adns3080_init+0x37a>
  out[0] = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	733b      	strb	r3, [r7, #12]
  if (HAL_SPI_Receive(of->spi, out, 1, 10) != HAL_OK) return 10;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f107 010c 	add.w	r1, r7, #12
 8001106:	230a      	movs	r3, #10
 8001108:	2201      	movs	r2, #1
 800110a:	f004 fd91 	bl	8005c30 <HAL_SPI_Receive>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <adns3080_init+0x1dc>
 8001114:	230a      	movs	r3, #10
 8001116:	e0ce      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	4851      	ldr	r0, [pc, #324]	; (8001264 <adns3080_init+0x328>)
 800111e:	f001 fdd7 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 8001122:	2032      	movs	r0, #50	; 0x32
 8001124:	f000 fd04 	bl	8001b30 <HAL_Delay>

  // Write ADNS3080_CONFIGURATION_BITS
  MOUSECAM_CS_LOW
 8001128:	2200      	movs	r2, #0
 800112a:	2101      	movs	r1, #1
 800112c:	484d      	ldr	r0, [pc, #308]	; (8001264 <adns3080_init+0x328>)
 800112e:	f001 fdcf 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_CONFIGURATION_BITS | 0x80;
 8001132:	238a      	movs	r3, #138	; 0x8a
 8001134:	743b      	strb	r3, [r7, #16]
  in[1] = out[0] | 0x10;
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	b2db      	uxtb	r3, r3
 800113e:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 11;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 0110 	add.w	r1, r7, #16
 8001148:	230a      	movs	r3, #10
 800114a:	2202      	movs	r2, #2
 800114c:	f004 fb7e 	bl	800584c <HAL_SPI_Transmit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <adns3080_init+0x21e>
 8001156:	230b      	movs	r3, #11
 8001158:	e0ad      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 800115a:	2201      	movs	r2, #1
 800115c:	2101      	movs	r1, #1
 800115e:	4841      	ldr	r0, [pc, #260]	; (8001264 <adns3080_init+0x328>)
 8001160:	f001 fdb6 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 8001164:	2032      	movs	r0, #50	; 0x32
 8001166:	f000 fce3 	bl	8001b30 <HAL_Delay>

  // Write SROM
  MOUSECAM_CS_LOW
 800116a:	2200      	movs	r2, #0
 800116c:	2101      	movs	r1, #1
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <adns3080_init+0x328>)
 8001170:	f001 fdae 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = 0x20 | 0x80;
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	743b      	strb	r3, [r7, #16]
  in[1] = 0x44;
 8001178:	2344      	movs	r3, #68	; 0x44
 800117a:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 12;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	230a      	movs	r3, #10
 8001186:	2202      	movs	r2, #2
 8001188:	f004 fb60 	bl	800584c <HAL_SPI_Transmit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <adns3080_init+0x25a>
 8001192:	230c      	movs	r3, #12
 8001194:	e08f      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <adns3080_init+0x328>)
 800119c:	f001 fd98 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 80011a0:	2032      	movs	r0, #50	; 0x32
 80011a2:	f000 fcc5 	bl	8001b30 <HAL_Delay>

  MOUSECAM_CS_LOW
 80011a6:	2200      	movs	r2, #0
 80011a8:	2101      	movs	r1, #1
 80011aa:	482e      	ldr	r0, [pc, #184]	; (8001264 <adns3080_init+0x328>)
 80011ac:	f001 fd90 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = 0x23 | 0x80;
 80011b0:	23a3      	movs	r3, #163	; 0xa3
 80011b2:	743b      	strb	r3, [r7, #16]
  in[1] = 0x07;
 80011b4:	2307      	movs	r3, #7
 80011b6:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 13;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f107 0110 	add.w	r1, r7, #16
 80011c0:	230a      	movs	r3, #10
 80011c2:	2202      	movs	r2, #2
 80011c4:	f004 fb42 	bl	800584c <HAL_SPI_Transmit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <adns3080_init+0x296>
 80011ce:	230d      	movs	r3, #13
 80011d0:	e071      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 80011d2:	2201      	movs	r2, #1
 80011d4:	2101      	movs	r1, #1
 80011d6:	4823      	ldr	r0, [pc, #140]	; (8001264 <adns3080_init+0x328>)
 80011d8:	f001 fd7a 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f000 fca7 	bl	8001b30 <HAL_Delay>

  MOUSECAM_CS_LOW
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	481f      	ldr	r0, [pc, #124]	; (8001264 <adns3080_init+0x328>)
 80011e8:	f001 fd72 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = 0x24 | 0x80;
 80011ec:	23a4      	movs	r3, #164	; 0xa4
 80011ee:	743b      	strb	r3, [r7, #16]
  in[1] = 0x88;
 80011f0:	2388      	movs	r3, #136	; 0x88
 80011f2:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 14;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f107 0110 	add.w	r1, r7, #16
 80011fc:	230a      	movs	r3, #10
 80011fe:	2202      	movs	r2, #2
 8001200:	f004 fb24 	bl	800584c <HAL_SPI_Transmit>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <adns3080_init+0x2d2>
 800120a:	230e      	movs	r3, #14
 800120c:	e053      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 800120e:	2201      	movs	r2, #1
 8001210:	2101      	movs	r1, #1
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <adns3080_init+0x328>)
 8001214:	f001 fd5c 	bl	8002cd0 <HAL_GPIO_WritePin>

  MOUSECAM_CS_LOW
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <adns3080_init+0x328>)
 800121e:	f001 fd57 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_SROM_ENABLE | 0x80;
 8001222:	2394      	movs	r3, #148	; 0x94
 8001224:	743b      	strb	r3, [r7, #16]
  in[1] = 0x18;
 8001226:	2318      	movs	r3, #24
 8001228:	747b      	strb	r3, [r7, #17]
  if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 15;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	f107 0110 	add.w	r1, r7, #16
 8001232:	230a      	movs	r3, #10
 8001234:	2202      	movs	r2, #2
 8001236:	f004 fb09 	bl	800584c <HAL_SPI_Transmit>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <adns3080_init+0x308>
 8001240:	230f      	movs	r3, #15
 8001242:	e038      	b.n	80012b6 <adns3080_init+0x37a>
  MOUSECAM_CS_HIG
 8001244:	2201      	movs	r2, #1
 8001246:	2101      	movs	r1, #1
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <adns3080_init+0x328>)
 800124a:	f001 fd41 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_Delay(50);
 800124e:	2032      	movs	r0, #50	; 0x32
 8001250:	f000 fc6e 	bl	8001b30 <HAL_Delay>

  MOUSECAM_CS_LOW
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <adns3080_init+0x328>)
 800125a:	f001 fd39 	bl	8002cd0 <HAL_GPIO_WritePin>
  for (int16_t i = 0; i <= 1985; i += 1) {
 800125e:	2300      	movs	r3, #0
 8001260:	827b      	strh	r3, [r7, #18]
 8001262:	e01c      	b.n	800129e <adns3080_init+0x362>
 8001264:	58020800 	.word	0x58020800
    in[0] = 0x60 | 0x80;
 8001268:	23e0      	movs	r3, #224	; 0xe0
 800126a:	743b      	strb	r3, [r7, #16]
    in[1] = SROM[i];
 800126c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <adns3080_init+0x384>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	747b      	strb	r3, [r7, #17]
    if (HAL_SPI_Transmit(of->spi, in, 2, 10) != HAL_OK) return 16;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f107 0110 	add.w	r1, r7, #16
 800127e:	230a      	movs	r3, #10
 8001280:	2202      	movs	r2, #2
 8001282:	f004 fae3 	bl	800584c <HAL_SPI_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <adns3080_init+0x354>
 800128c:	2310      	movs	r3, #16
 800128e:	e012      	b.n	80012b6 <adns3080_init+0x37a>
    HAL_Delay(1); // 10us
 8001290:	2001      	movs	r0, #1
 8001292:	f000 fc4d 	bl	8001b30 <HAL_Delay>
  for (int16_t i = 0; i <= 1985; i += 1) {
 8001296:	8a7b      	ldrh	r3, [r7, #18]
 8001298:	3301      	adds	r3, #1
 800129a:	b29b      	uxth	r3, r3
 800129c:	827b      	strh	r3, [r7, #18]
 800129e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012a2:	f240 72c1 	movw	r2, #1985	; 0x7c1
 80012a6:	4293      	cmp	r3, r2
 80012a8:	ddde      	ble.n	8001268 <adns3080_init+0x32c>
  }
  MOUSECAM_CS_HIG
 80012aa:	2201      	movs	r2, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <adns3080_init+0x388>)
 80012b0:	f001 fd0e 	bl	8002cd0 <HAL_GPIO_WritePin>

  return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800af1c 	.word	0x0800af1c
 80012c4:	58020800 	.word	0x58020800

080012c8 <adns3080_update>:

void adns3080_update(adns3080_t *of) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint8_t in[1];
  uint8_t out[3];

  MOUSECAM_CS_LOW
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <adns3080_update+0x80>)
 80012d6:	f001 fcfb 	bl	8002cd0 <HAL_GPIO_WritePin>
  in[0] = ADNS3080_MOTION_BURST;
 80012da:	2350      	movs	r3, #80	; 0x50
 80012dc:	733b      	strb	r3, [r7, #12]
  if (HAL_SPI_Transmit(of->spi, in, 1, 10) != HAL_OK) return;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	230a      	movs	r3, #10
 80012e8:	2201      	movs	r2, #1
 80012ea:	f004 faaf 	bl	800584c <HAL_SPI_Transmit>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d123      	bne.n	800133c <adns3080_update+0x74>
  memset(out, 0, 3);
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	2203      	movs	r2, #3
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f009 f97b 	bl	800a5f8 <memset>
  if (HAL_SPI_Receive(of->spi, out, 3, 10) != HAL_OK) return;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f107 0108 	add.w	r1, r7, #8
 800130a:	230a      	movs	r3, #10
 800130c:	2203      	movs	r2, #3
 800130e:	f004 fc8f 	bl	8005c30 <HAL_SPI_Receive>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d113      	bne.n	8001340 <adns3080_update+0x78>
  MOUSECAM_CS_HIG
 8001318:	2201      	movs	r2, #1
 800131a:	2101      	movs	r1, #1
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <adns3080_update+0x80>)
 800131e:	f001 fcd7 	bl	8002cd0 <HAL_GPIO_WritePin>

  of->motion = out[0];
 8001322:	7a3b      	ldrb	r3, [r7, #8]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	711a      	strb	r2, [r3, #4]
  of->dx = out[1];
 800132a:	7a7b      	ldrb	r3, [r7, #9]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	715a      	strb	r2, [r3, #5]
  of->dy = out[2];
 8001332:	7abb      	ldrb	r3, [r7, #10]
 8001334:	b25a      	sxtb	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	719a      	strb	r2, [r3, #6]
 800133a:	e002      	b.n	8001342 <adns3080_update+0x7a>
  if (HAL_SPI_Transmit(of->spi, in, 1, 10) != HAL_OK) return;
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <adns3080_update+0x7a>
  if (HAL_SPI_Receive(of->spi, out, 3, 10) != HAL_OK) return;
 8001340:	bf00      	nop
}
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	58020800 	.word	0x58020800

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_MspInit+0x30>)
 8001354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x30>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x30>)
 8001364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b8      	sub	sp, #224	; 0xe0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	22bc      	movs	r2, #188	; 0xbc
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 f929 	bl	800a5f8 <memset>
  if(hi2c->Instance==I2C1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a24      	ldr	r2, [pc, #144]	; (800143c <HAL_I2C_MspInit+0xbc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d141      	bne.n	8001434 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b0:	2308      	movs	r3, #8
 80013b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fdd6 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013ca:	f7ff fdb1 	bl	8000f30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	2312      	movs	r3, #18
 80013f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001404:	2304      	movs	r3, #4
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_I2C_MspInit+0xc4>)
 8001412:	f001 faad 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_I2C_MspInit+0xc0>)
 8001428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	37e0      	adds	r7, #224	; 0xe0
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40005400 	.word	0x40005400
 8001440:	58024400 	.word	0x58024400
 8001444:	58020400 	.word	0x58020400

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0b8      	sub	sp, #224	; 0xe0
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	22bc      	movs	r2, #188	; 0xbc
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f009 f8c5 	bl	800a5f8 <memset>
  if(hspi->Instance==SPI1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a25      	ldr	r2, [pc, #148]	; (8001508 <HAL_SPI_MspInit+0xc0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d142      	bne.n	80014fe <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800147e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001482:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fd71 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001494:	f7ff fd4c 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_SPI_MspInit+0xc4>)
 800149a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_SPI_MspInit+0xc4>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014d4:	23e0      	movs	r3, #224	; 0xe0
 80014d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ec:	2305      	movs	r3, #5
 80014ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <HAL_SPI_MspInit+0xc8>)
 80014fa:	f001 fa39 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	37e0      	adds	r7, #224	; 0xe0
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40013000 	.word	0x40013000
 800150c:	58024400 	.word	0x58024400
 8001510:	58020000 	.word	0x58020000

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_TIM_Base_MspInit+0x74>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10f      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 8001528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 8001538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001544:	e01b      	b.n	800157e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_TIM_Base_MspInit+0x7c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d116      	bne.n	800157e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 8001552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_TIM_Base_MspInit+0x78>)
 8001562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2036      	movs	r0, #54	; 0x36
 8001574:	f000 fbe7 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001578:	2036      	movs	r0, #54	; 0x36
 800157a:	f000 fbfe 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40010000 	.word	0x40010000
 800158c:	58024400 	.word	0x58024400
 8001590:	40001000 	.word	0x40001000

08001594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_TIM_MspPostInit+0x6c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d11f      	bne.n	80015f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <HAL_TIM_MspPostInit+0x70>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015bc:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_TIM_MspPostInit+0x70>)
 80015be:	f043 0310 	orr.w	r3, r3, #16
 80015c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_TIM_MspPostInit+0x70>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80015d4:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80015d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_TIM_MspPostInit+0x74>)
 80015f2:	f001 f9bd 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010000 	.word	0x40010000
 8001604:	58024400 	.word	0x58024400
 8001608:	58021000 	.word	0x58021000

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b8      	sub	sp, #224	; 0xe0
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	22bc      	movs	r2, #188	; 0xbc
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f008 ffe3 	bl	800a5f8 <memset>
  if(huart->Instance==USART1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_UART_MspInit+0xd0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d14a      	bne.n	80016d2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fc90 	bl	8003f70 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001656:	f7ff fc6b 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 800165c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 8001662:	f043 0310 	orr.w	r3, r3, #16
 8001666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_UART_MspInit+0xd4>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001696:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800169a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016b0:	2304      	movs	r3, #4
 80016b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <HAL_UART_MspInit+0xd8>)
 80016be:	f001 f957 	bl	8002970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2025      	movs	r0, #37	; 0x25
 80016c8:	f000 fb3d 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016cc:	2025      	movs	r0, #37	; 0x25
 80016ce:	f000 fb54 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	37e0      	adds	r7, #224	; 0xe0
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40011000 	.word	0x40011000
 80016e0:	58024400 	.word	0x58024400
 80016e4:	58020400 	.word	0x58020400

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f9dc 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <USART1_IRQHandler+0x10>)
 8001742:	f006 fb6b 	bl	8007e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240001fc 	.word	0x240001fc

08001750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  update();
 8001754:	f000 f852 	bl	80017fc <update>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM6_DAC_IRQHandler+0x14>)
 800175a:	f005 f955 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	240001b0 	.word	0x240001b0

08001768 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001770:	2102      	movs	r1, #2
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <HAL_UART_TxCpltCallback+0x18>)
 8001774:	f001 fac5 	bl	8002d02 <HAL_GPIO_TogglePin>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58020000 	.word	0x58020000

08001784 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  // To know whether this timer is hanging
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800178c:	2102      	movs	r1, #2
 800178e:	4819      	ldr	r0, [pc, #100]	; (80017f4 <HAL_UART_RxCpltCallback+0x70>)
 8001790:	f001 fab7 	bl	8002d02 <HAL_GPIO_TogglePin>

  // Update monitor
  send_data(monitor[0], monitor[1], monitor[2],
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 800179c:	ed93 7a01 	vldr	s14, [r3, #4]
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017a8:	ed93 6a03 	vldr	s12, [r3, #12]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017ae:	edd3 5a04 	vldr	s11, [r3, #16]
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017b4:	ed93 5a05 	vldr	s10, [r3, #20]
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017ba:	edd3 4a06 	vldr	s9, [r3, #24]
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017c0:	edd3 3a07 	vldr	s7, [r3, #28]
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_UART_RxCpltCallback+0x74>)
 80017c6:	ed93 4a08 	vldr	s8, [r3, #32]
 80017ca:	eeb0 3a64 	vmov.f32	s6, s9
 80017ce:	eef0 2a45 	vmov.f32	s5, s10
 80017d2:	eeb0 2a65 	vmov.f32	s4, s11
 80017d6:	eef0 1a46 	vmov.f32	s3, s12
 80017da:	eeb0 1a66 	vmov.f32	s2, s13
 80017de:	eef0 0a47 	vmov.f32	s1, s14
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	f7fe ff8f 	bl	8000708 <send_data>
      monitor[3], monitor[4], monitor[5],
      monitor[6], monitor[7], monitor[8]);
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	58020000 	.word	0x58020000
 80017f8:	240003a0 	.word	0x240003a0

080017fc <update>:

void update(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  adns3080_update(&g_of);
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <update+0x38>)
 8001802:	f7ff fd61 	bl	80012c8 <adns3080_update>

//  monitor[0] = g_of.motion;
  monitor[1] = g_of.dx;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <update+0x38>)
 8001808:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <update+0x3c>)
 8001816:	edc3 7a01 	vstr	s15, [r3, #4]
  monitor[2] = g_of.dy;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <update+0x38>)
 800181c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <update+0x3c>)
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2400028c 	.word	0x2400028c
 8001838:	240003a0 	.word	0x240003a0

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f008 fe9a 	bl	800a5a4 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	24080000 	.word	0x24080000
 800189c:	00000400 	.word	0x00000400
 80018a0:	240003c4 	.word	0x240003c4
 80018a4:	240003e0 	.word	0x240003e0

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ac:	4b37      	ldr	r3, [pc, #220]	; (800198c <SystemInit+0xe4>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <SystemInit+0xe4>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018bc:	4b34      	ldr	r3, [pc, #208]	; (8001990 <SystemInit+0xe8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d807      	bhi.n	80018d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <SystemInit+0xe8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 030f 	bic.w	r3, r3, #15
 80018d0:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <SystemInit+0xe8>)
 80018d2:	f043 0307 	orr.w	r3, r3, #7
 80018d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <SystemInit+0xec>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <SystemInit+0xec>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <SystemInit+0xec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <SystemInit+0xec>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4929      	ldr	r1, [pc, #164]	; (8001994 <SystemInit+0xec>)
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <SystemInit+0xf0>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <SystemInit+0xe8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <SystemInit+0xe8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 030f 	bic.w	r3, r3, #15
 800190a:	4a21      	ldr	r2, [pc, #132]	; (8001990 <SystemInit+0xe8>)
 800190c:	f043 0307 	orr.w	r3, r3, #7
 8001910:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <SystemInit+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <SystemInit+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <SystemInit+0xec>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <SystemInit+0xec>)
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <SystemInit+0xf4>)
 8001928:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <SystemInit+0xec>)
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <SystemInit+0xf8>)
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001930:	4b18      	ldr	r3, [pc, #96]	; (8001994 <SystemInit+0xec>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <SystemInit+0xfc>)
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <SystemInit+0xec>)
 8001938:	2200      	movs	r2, #0
 800193a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <SystemInit+0xec>)
 800193e:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <SystemInit+0xfc>)
 8001940:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <SystemInit+0xec>)
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <SystemInit+0xec>)
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <SystemInit+0xfc>)
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <SystemInit+0xec>)
 8001950:	2200      	movs	r2, #0
 8001952:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <SystemInit+0xec>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <SystemInit+0xec>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <SystemInit+0xec>)
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0x100>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <SystemInit+0x104>)
 800196c:	4013      	ands	r3, r2
 800196e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001972:	d202      	bcs.n	800197a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <SystemInit+0x108>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <SystemInit+0x10c>)
 800197c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001980:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	52002000 	.word	0x52002000
 8001994:	58024400 	.word	0x58024400
 8001998:	eaf6ed7f 	.word	0xeaf6ed7f
 800199c:	02020200 	.word	0x02020200
 80019a0:	01ff0000 	.word	0x01ff0000
 80019a4:	01010280 	.word	0x01010280
 80019a8:	5c001000 	.word	0x5c001000
 80019ac:	ffff0000 	.word	0xffff0000
 80019b0:	51008108 	.word	0x51008108
 80019b4:	52004000 	.word	0x52004000

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019bc:	f7ff ff74 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	; (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f008 fde3 	bl	800a5b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7fe ff1b 	bl	8000824 <main>
  bx  lr
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019f8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80019fc:	0800b75c 	.word	0x0800b75c
  ldr r2, =_sbss
 8001a00:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001a04:	240003dc 	.word	0x240003dc

08001a08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC3_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a12:	2003      	movs	r0, #3
 8001a14:	f000 f98c 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a18:	f002 f8d4 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_Init+0x68>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <HAL_Init+0x6c>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <HAL_Init+0x68>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_Init+0x6c>)
 8001a40:	5cd3      	ldrb	r3, [r2, r3]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_Init+0x70>)
 8001a4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_Init+0x74>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	200f      	movs	r0, #15
 8001a58:	f000 f814 	bl	8001a84 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e002      	b.n	8001a6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a66:	f7ff fc71 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	58024400 	.word	0x58024400
 8001a78:	0800b6e0 	.word	0x0800b6e0
 8001a7c:	24000004 	.word	0x24000004
 8001a80:	24000000 	.word	0x24000000

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e021      	b.n	8001adc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_InitTick+0x64>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f971 	bl	8001d96 <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f000 f93b 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x68>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2400000c 	.word	0x2400000c
 8001ae8:	24000000 	.word	0x24000000
 8001aec:	24000008 	.word	0x24000008

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2400000c 	.word	0x2400000c
 8001b14:	240003c8 	.word	0x240003c8

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	240003c8 	.word	0x240003c8

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2400000c 	.word	0x2400000c

08001b78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetREVID+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0c1b      	lsrs	r3, r3, #16
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	5c001000 	.word	0x5c001000

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00
 8001bd4:	05fa0000 	.word	0x05fa0000

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff40 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff33 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa4 	bl	8001cec <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001db4:	f3bf 8f5f 	dmb	sy
}
 8001db8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_MPU_Disable+0x28>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_MPU_Disable+0x28>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_MPU_Disable+0x2c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	e000ed90 	.word	0xe000ed90

08001de0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_MPU_Enable+0x38>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_MPU_Enable+0x3c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_MPU_Enable+0x3c>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dfe:	f3bf 8f4f 	dsb	sy
}
 8001e02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e04:	f3bf 8f6f 	isb	sy
}
 8001e08:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed90 	.word	0xe000ed90
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	785a      	ldrb	r2, [r3, #1]
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_MPU_ConfigRegion+0x84>)
 8001e2e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d029      	beq.n	8001e8c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <HAL_MPU_ConfigRegion+0x84>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
 8001e44:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7adb      	ldrb	r3, [r3, #11]
 8001e4a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7a9b      	ldrb	r3, [r3, #10]
 8001e52:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b5b      	ldrb	r3, [r3, #13]
 8001e5a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7b9b      	ldrb	r3, [r3, #14]
 8001e62:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7bdb      	ldrb	r3, [r3, #15]
 8001e6a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7a5b      	ldrb	r3, [r3, #9]
 8001e72:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7a1b      	ldrb	r3, [r3, #8]
 8001e7a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e7c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e86:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e88:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001e8a:	e005      	b.n	8001e98 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_MPU_ConfigRegion+0x84>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_MPU_ConfigRegion+0x84>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed90 	.word	0xe000ed90

08001ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fe32 	bl	8001b18 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e2dc      	b.n	800247a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d008      	beq.n	8001ede <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e2cd      	b.n	800247a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a76      	ldr	r2, [pc, #472]	; (80020bc <HAL_DMA_Abort+0x214>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04a      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a74      	ldr	r2, [pc, #464]	; (80020c0 <HAL_DMA_Abort+0x218>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d045      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a73      	ldr	r2, [pc, #460]	; (80020c4 <HAL_DMA_Abort+0x21c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d040      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a71      	ldr	r2, [pc, #452]	; (80020c8 <HAL_DMA_Abort+0x220>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d03b      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_DMA_Abort+0x224>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d036      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_DMA_Abort+0x228>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d031      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6d      	ldr	r2, [pc, #436]	; (80020d4 <HAL_DMA_Abort+0x22c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d02c      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_DMA_Abort+0x230>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d027      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_DMA_Abort+0x234>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d022      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_DMA_Abort+0x238>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01d      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_DMA_Abort+0x23c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d018      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_DMA_Abort+0x240>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a64      	ldr	r2, [pc, #400]	; (80020ec <HAL_DMA_Abort+0x244>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00e      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a62      	ldr	r2, [pc, #392]	; (80020f0 <HAL_DMA_Abort+0x248>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a61      	ldr	r2, [pc, #388]	; (80020f4 <HAL_DMA_Abort+0x24c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_Abort+0xd6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a5f      	ldr	r2, [pc, #380]	; (80020f8 <HAL_DMA_Abort+0x250>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_DMA_Abort+0xda>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_Abort+0xdc>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 021e 	bic.w	r2, r2, #30
 8001f96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e00a      	b.n	8001fc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020e 	bic.w	r2, r2, #14
 8001fbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <HAL_DMA_Abort+0x214>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d072      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <HAL_DMA_Abort+0x218>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d06d      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_DMA_Abort+0x21c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d068      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a37      	ldr	r2, [pc, #220]	; (80020c8 <HAL_DMA_Abort+0x220>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d063      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <HAL_DMA_Abort+0x224>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d05e      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <HAL_DMA_Abort+0x228>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d059      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <HAL_DMA_Abort+0x22c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d054      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a31      	ldr	r2, [pc, #196]	; (80020d8 <HAL_DMA_Abort+0x230>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d04f      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_DMA_Abort+0x234>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d04a      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <HAL_DMA_Abort+0x238>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d045      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2d      	ldr	r2, [pc, #180]	; (80020e4 <HAL_DMA_Abort+0x23c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d040      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_DMA_Abort+0x240>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d03b      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_DMA_Abort+0x244>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d036      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_DMA_Abort+0x248>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <HAL_DMA_Abort+0x24c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d02c      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a25      	ldr	r2, [pc, #148]	; (80020f8 <HAL_DMA_Abort+0x250>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d027      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_DMA_Abort+0x254>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d022      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_DMA_Abort+0x258>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01d      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <HAL_DMA_Abort+0x25c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_DMA_Abort+0x260>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_DMA_Abort+0x264>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00e      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_DMA_Abort+0x268>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d009      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_DMA_Abort+0x26c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_DMA_Abort+0x20e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_DMA_Abort+0x270>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d132      	bne.n	800211c <HAL_DMA_Abort+0x274>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e031      	b.n	800211e <HAL_DMA_Abort+0x276>
 80020ba:	bf00      	nop
 80020bc:	40020010 	.word	0x40020010
 80020c0:	40020028 	.word	0x40020028
 80020c4:	40020040 	.word	0x40020040
 80020c8:	40020058 	.word	0x40020058
 80020cc:	40020070 	.word	0x40020070
 80020d0:	40020088 	.word	0x40020088
 80020d4:	400200a0 	.word	0x400200a0
 80020d8:	400200b8 	.word	0x400200b8
 80020dc:	40020410 	.word	0x40020410
 80020e0:	40020428 	.word	0x40020428
 80020e4:	40020440 	.word	0x40020440
 80020e8:	40020458 	.word	0x40020458
 80020ec:	40020470 	.word	0x40020470
 80020f0:	40020488 	.word	0x40020488
 80020f4:	400204a0 	.word	0x400204a0
 80020f8:	400204b8 	.word	0x400204b8
 80020fc:	58025408 	.word	0x58025408
 8002100:	5802541c 	.word	0x5802541c
 8002104:	58025430 	.word	0x58025430
 8002108:	58025444 	.word	0x58025444
 800210c:	58025458 	.word	0x58025458
 8002110:	5802546c 	.word	0x5802546c
 8002114:	58025480 	.word	0x58025480
 8002118:	58025494 	.word	0x58025494
 800211c:	2300      	movs	r3, #0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6d      	ldr	r2, [pc, #436]	; (80022ec <HAL_DMA_Abort+0x444>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d04a      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a6b      	ldr	r2, [pc, #428]	; (80022f0 <HAL_DMA_Abort+0x448>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d045      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6a      	ldr	r2, [pc, #424]	; (80022f4 <HAL_DMA_Abort+0x44c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d040      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_DMA_Abort+0x450>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d03b      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a67      	ldr	r2, [pc, #412]	; (80022fc <HAL_DMA_Abort+0x454>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d036      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_DMA_Abort+0x458>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d031      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a64      	ldr	r2, [pc, #400]	; (8002304 <HAL_DMA_Abort+0x45c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d02c      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a62      	ldr	r2, [pc, #392]	; (8002308 <HAL_DMA_Abort+0x460>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d027      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_DMA_Abort+0x464>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_DMA_Abort+0x468>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01d      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5e      	ldr	r2, [pc, #376]	; (8002314 <HAL_DMA_Abort+0x46c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d018      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_DMA_Abort+0x470>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5b      	ldr	r2, [pc, #364]	; (800231c <HAL_DMA_Abort+0x474>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00e      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_DMA_Abort+0x478>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_DMA_Abort+0x47c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_DMA_Abort+0x32a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_DMA_Abort+0x480>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_Abort+0x33c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e007      	b.n	80021f4 <HAL_DMA_Abort+0x34c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021f4:	e013      	b.n	800221e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f6:	f7ff fc8f 	bl	8001b18 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b05      	cmp	r3, #5
 8002202:	d90c      	bls.n	800221e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e12d      	b.n	800247a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e5      	bne.n	80021f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2f      	ldr	r2, [pc, #188]	; (80022ec <HAL_DMA_Abort+0x444>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d04a      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_DMA_Abort+0x448>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d045      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <HAL_DMA_Abort+0x44c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d040      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_DMA_Abort+0x450>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d03b      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_DMA_Abort+0x454>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d036      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a27      	ldr	r2, [pc, #156]	; (8002300 <HAL_DMA_Abort+0x458>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d031      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_DMA_Abort+0x45c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d02c      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <HAL_DMA_Abort+0x460>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d027      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <HAL_DMA_Abort+0x464>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d022      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_DMA_Abort+0x468>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_DMA_Abort+0x46c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d018      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_DMA_Abort+0x470>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_DMA_Abort+0x474>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_DMA_Abort+0x478>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_DMA_Abort+0x47c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_DMA_Abort+0x422>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <HAL_DMA_Abort+0x480>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_Abort+0x426>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_DMA_Abort+0x428>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02b      	beq.n	800232c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	223f      	movs	r2, #63	; 0x3f
 80022e4:	409a      	lsls	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	e02a      	b.n	8002342 <HAL_DMA_Abort+0x49a>
 80022ec:	40020010 	.word	0x40020010
 80022f0:	40020028 	.word	0x40020028
 80022f4:	40020040 	.word	0x40020040
 80022f8:	40020058 	.word	0x40020058
 80022fc:	40020070 	.word	0x40020070
 8002300:	40020088 	.word	0x40020088
 8002304:	400200a0 	.word	0x400200a0
 8002308:	400200b8 	.word	0x400200b8
 800230c:	40020410 	.word	0x40020410
 8002310:	40020428 	.word	0x40020428
 8002314:	40020440 	.word	0x40020440
 8002318:	40020458 	.word	0x40020458
 800231c:	40020470 	.word	0x40020470
 8002320:	40020488 	.word	0x40020488
 8002324:	400204a0 	.word	0x400204a0
 8002328:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_DMA_Abort+0x5dc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d072      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_DMA_Abort+0x5e0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d06d      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_DMA_Abort+0x5e4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d068      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_DMA_Abort+0x5e8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d063      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_DMA_Abort+0x5ec>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_DMA_Abort+0x5f0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d059      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a46      	ldr	r2, [pc, #280]	; (800249c <HAL_DMA_Abort+0x5f4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d054      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_DMA_Abort+0x5f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04f      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_DMA_Abort+0x5fc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04a      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_DMA_Abort+0x600>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d045      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_DMA_Abort+0x604>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d040      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_DMA_Abort+0x608>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d03b      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <HAL_DMA_Abort+0x60c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d036      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <HAL_DMA_Abort+0x610>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_DMA_Abort+0x614>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02c      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <HAL_DMA_Abort+0x618>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a37      	ldr	r2, [pc, #220]	; (80024c4 <HAL_DMA_Abort+0x61c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a35      	ldr	r2, [pc, #212]	; (80024c8 <HAL_DMA_Abort+0x620>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a34      	ldr	r2, [pc, #208]	; (80024cc <HAL_DMA_Abort+0x624>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d018      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_DMA_Abort+0x628>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_DMA_Abort+0x62c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_DMA_Abort+0x630>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <HAL_DMA_Abort+0x634>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort+0x58a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <HAL_DMA_Abort+0x638>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_DMA_Abort+0x58e>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_DMA_Abort+0x590>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002444:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800245c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002466:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40020010 	.word	0x40020010
 8002488:	40020028 	.word	0x40020028
 800248c:	40020040 	.word	0x40020040
 8002490:	40020058 	.word	0x40020058
 8002494:	40020070 	.word	0x40020070
 8002498:	40020088 	.word	0x40020088
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	400200b8 	.word	0x400200b8
 80024a4:	40020410 	.word	0x40020410
 80024a8:	40020428 	.word	0x40020428
 80024ac:	40020440 	.word	0x40020440
 80024b0:	40020458 	.word	0x40020458
 80024b4:	40020470 	.word	0x40020470
 80024b8:	40020488 	.word	0x40020488
 80024bc:	400204a0 	.word	0x400204a0
 80024c0:	400204b8 	.word	0x400204b8
 80024c4:	58025408 	.word	0x58025408
 80024c8:	5802541c 	.word	0x5802541c
 80024cc:	58025430 	.word	0x58025430
 80024d0:	58025444 	.word	0x58025444
 80024d4:	58025458 	.word	0x58025458
 80024d8:	5802546c 	.word	0x5802546c
 80024dc:	58025480 	.word	0x58025480
 80024e0:	58025494 	.word	0x58025494

080024e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e237      	b.n	8002966 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d004      	beq.n	800250c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e22c      	b.n	8002966 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_DMA_Abort_IT+0x1a0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d04a      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5b      	ldr	r2, [pc, #364]	; (8002688 <HAL_DMA_Abort_IT+0x1a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d045      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a59      	ldr	r2, [pc, #356]	; (800268c <HAL_DMA_Abort_IT+0x1a8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d040      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_DMA_Abort_IT+0x1ac>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d03b      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_DMA_Abort_IT+0x1b0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d036      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a55      	ldr	r2, [pc, #340]	; (8002698 <HAL_DMA_Abort_IT+0x1b4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d031      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a53      	ldr	r2, [pc, #332]	; (800269c <HAL_DMA_Abort_IT+0x1b8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02c      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_DMA_Abort_IT+0x1bc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d027      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a50      	ldr	r2, [pc, #320]	; (80026a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d022      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_DMA_Abort_IT+0x1c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01d      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_DMA_Abort_IT+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d018      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d013      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_DMA_Abort_IT+0x1d0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00e      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d009      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_DMA_Abort_IT+0x1d8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Abort_IT+0xc8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a46      	ldr	r2, [pc, #280]	; (80026c0 <HAL_DMA_Abort_IT+0x1dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_DMA_Abort_IT+0xcc>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_DMA_Abort_IT+0xce>
 80025b0:	2300      	movs	r3, #0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8086 	beq.w	80026c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <HAL_DMA_Abort_IT+0x1a0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d04a      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2e      	ldr	r2, [pc, #184]	; (8002688 <HAL_DMA_Abort_IT+0x1a4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2c      	ldr	r2, [pc, #176]	; (800268c <HAL_DMA_Abort_IT+0x1a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a2b      	ldr	r2, [pc, #172]	; (8002690 <HAL_DMA_Abort_IT+0x1ac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d03b      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_DMA_Abort_IT+0x1b0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d036      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_DMA_Abort_IT+0x1b4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a26      	ldr	r2, [pc, #152]	; (800269c <HAL_DMA_Abort_IT+0x1b8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <HAL_DMA_Abort_IT+0x1bc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d027      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_DMA_Abort_IT+0x1c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_DMA_Abort_IT+0x1c4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <HAL_DMA_Abort_IT+0x1c8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_DMA_Abort_IT+0x1cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_DMA_Abort_IT+0x1d0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_DMA_Abort_IT+0x1d4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_DMA_Abort_IT+0x1d8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_Abort_IT+0x17c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_DMA_Abort_IT+0x1dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <HAL_DMA_Abort_IT+0x18e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e178      	b.n	8002964 <HAL_DMA_Abort_IT+0x480>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e16f      	b.n	8002964 <HAL_DMA_Abort_IT+0x480>
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020e 	bic.w	r2, r2, #14
 80026d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6c      	ldr	r2, [pc, #432]	; (800288c <HAL_DMA_Abort_IT+0x3a8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6b      	ldr	r2, [pc, #428]	; (8002890 <HAL_DMA_Abort_IT+0x3ac>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d045      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_DMA_Abort_IT+0x3b0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d040      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_DMA_Abort_IT+0x3b4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d03b      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_DMA_Abort_IT+0x3b8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d036      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_Abort_IT+0x3bc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d031      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_DMA_Abort_IT+0x3c0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02c      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_Abort_IT+0x3c4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d027      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_DMA_Abort_IT+0x3c8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d022      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_Abort_IT+0x3cc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d01d      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <HAL_DMA_Abort_IT+0x3d0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d018      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5c      	ldr	r2, [pc, #368]	; (80028b8 <HAL_DMA_Abort_IT+0x3d4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5a      	ldr	r2, [pc, #360]	; (80028bc <HAL_DMA_Abort_IT+0x3d8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <HAL_DMA_Abort_IT+0x3dc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x290>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a56      	ldr	r2, [pc, #344]	; (80028c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <HAL_DMA_Abort_IT+0x2a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e007      	b.n	8002796 <HAL_DMA_Abort_IT+0x2b2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_DMA_Abort_IT+0x3a8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d072      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a3a      	ldr	r2, [pc, #232]	; (8002890 <HAL_DMA_Abort_IT+0x3ac>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d06d      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_DMA_Abort_IT+0x3b0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d068      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a37      	ldr	r2, [pc, #220]	; (8002898 <HAL_DMA_Abort_IT+0x3b4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d063      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a36      	ldr	r2, [pc, #216]	; (800289c <HAL_DMA_Abort_IT+0x3b8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d05e      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <HAL_DMA_Abort_IT+0x3bc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d059      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a33      	ldr	r2, [pc, #204]	; (80028a4 <HAL_DMA_Abort_IT+0x3c0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d054      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a31      	ldr	r2, [pc, #196]	; (80028a8 <HAL_DMA_Abort_IT+0x3c4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04f      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a30      	ldr	r2, [pc, #192]	; (80028ac <HAL_DMA_Abort_IT+0x3c8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d04a      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2e      	ldr	r2, [pc, #184]	; (80028b0 <HAL_DMA_Abort_IT+0x3cc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d045      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2d      	ldr	r2, [pc, #180]	; (80028b4 <HAL_DMA_Abort_IT+0x3d0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d040      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a2b      	ldr	r2, [pc, #172]	; (80028b8 <HAL_DMA_Abort_IT+0x3d4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d03b      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <HAL_DMA_Abort_IT+0x3d8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d036      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a28      	ldr	r2, [pc, #160]	; (80028c0 <HAL_DMA_Abort_IT+0x3dc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d031      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d02c      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d027      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a24      	ldr	r2, [pc, #144]	; (80028cc <HAL_DMA_Abort_IT+0x3e8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <HAL_DMA_Abort_IT+0x3ec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a21      	ldr	r2, [pc, #132]	; (80028d4 <HAL_DMA_Abort_IT+0x3f0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d018      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_DMA_Abort_IT+0x3f4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_DMA_Abort_IT+0x3f8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_DMA_Abort_IT+0x3fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_DMA_Abort_IT+0x400>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Abort_IT+0x3a2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_DMA_Abort_IT+0x404>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d132      	bne.n	80028ec <HAL_DMA_Abort_IT+0x408>
 8002886:	2301      	movs	r3, #1
 8002888:	e031      	b.n	80028ee <HAL_DMA_Abort_IT+0x40a>
 800288a:	bf00      	nop
 800288c:	40020010 	.word	0x40020010
 8002890:	40020028 	.word	0x40020028
 8002894:	40020040 	.word	0x40020040
 8002898:	40020058 	.word	0x40020058
 800289c:	40020070 	.word	0x40020070
 80028a0:	40020088 	.word	0x40020088
 80028a4:	400200a0 	.word	0x400200a0
 80028a8:	400200b8 	.word	0x400200b8
 80028ac:	40020410 	.word	0x40020410
 80028b0:	40020428 	.word	0x40020428
 80028b4:	40020440 	.word	0x40020440
 80028b8:	40020458 	.word	0x40020458
 80028bc:	40020470 	.word	0x40020470
 80028c0:	40020488 	.word	0x40020488
 80028c4:	400204a0 	.word	0x400204a0
 80028c8:	400204b8 	.word	0x400204b8
 80028cc:	58025408 	.word	0x58025408
 80028d0:	5802541c 	.word	0x5802541c
 80028d4:	58025430 	.word	0x58025430
 80028d8:	58025444 	.word	0x58025444
 80028dc:	58025458 	.word	0x58025458
 80028e0:	5802546c 	.word	0x5802546c
 80028e4:	58025480 	.word	0x58025480
 80028e8:	58025494 	.word	0x58025494
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d028      	beq.n	8002944 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002900:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2201      	movs	r2, #1
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002920:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002942:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_GPIO_Init+0x234>)
 8002980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002982:	e194      	b.n	8002cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8186 	beq.w	8002ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d005      	beq.n	80029b4 <HAL_GPIO_Init+0x44>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0201 	and.w	r2, r3, #1
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d017      	beq.n	8002a52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d123      	bne.n	8002aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	69b9      	ldr	r1, [r7, #24]
 8002aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0203 	and.w	r2, r3, #3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80e0 	beq.w	8002ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x238>)
 8002aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aee:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <HAL_GPIO_Init+0x238>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_GPIO_Init+0x238>)
 8002afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b06:	4a29      	ldr	r2, [pc, #164]	; (8002bac <HAL_GPIO_Init+0x23c>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_GPIO_Init+0x240>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d052      	beq.n	8002bd8 <HAL_GPIO_Init+0x268>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_GPIO_Init+0x244>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d031      	beq.n	8002b9e <HAL_GPIO_Init+0x22e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_GPIO_Init+0x248>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02b      	beq.n	8002b9a <HAL_GPIO_Init+0x22a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_GPIO_Init+0x24c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_GPIO_Init+0x250>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_GPIO_Init+0x254>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_GPIO_Init+0x258>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_GPIO_Init+0x25c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x216>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_GPIO_Init+0x260>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_GPIO_Init+0x264>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x20e>
 8002b7a:	2309      	movs	r3, #9
 8002b7c:	e02d      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b7e:	230a      	movs	r3, #10
 8002b80:	e02b      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b82:	2308      	movs	r3, #8
 8002b84:	e029      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b86:	2307      	movs	r3, #7
 8002b88:	e027      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e025      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b8e:	2305      	movs	r3, #5
 8002b90:	e023      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b92:	2304      	movs	r3, #4
 8002b94:	e021      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e01f      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e01d      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e01b      	b.n	8002bda <HAL_GPIO_Init+0x26a>
 8002ba2:	bf00      	nop
 8002ba4:	58000080 	.word	0x58000080
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58000400 	.word	0x58000400
 8002bb0:	58020000 	.word	0x58020000
 8002bb4:	58020400 	.word	0x58020400
 8002bb8:	58020800 	.word	0x58020800
 8002bbc:	58020c00 	.word	0x58020c00
 8002bc0:	58021000 	.word	0x58021000
 8002bc4:	58021400 	.word	0x58021400
 8002bc8:	58021800 	.word	0x58021800
 8002bcc:	58021c00 	.word	0x58021c00
 8002bd0:	58022000 	.word	0x58022000
 8002bd4:	58022400 	.word	0x58022400
 8002bd8:	2300      	movs	r3, #0
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	f002 0203 	and.w	r2, r2, #3
 8002be0:	0092      	lsls	r2, r2, #2
 8002be2:	4093      	lsls	r3, r2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <HAL_GPIO_Init+0x35c>)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f ae63 	bne.w	8002984 <HAL_GPIO_Init+0x14>
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3724      	adds	r7, #36	; 0x24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	58000400 	.word	0x58000400

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	041a      	lsls	r2, r3, #16
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	400b      	ands	r3, r1
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07f      	b.n	8002e4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fb0e 	bl	8001380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e006      	b.n	8002dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d104      	bne.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_I2C_Init+0x11c>)
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	02008000 	.word	0x02008000

08002e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d138      	bne.n	8002ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e032      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	; 0x24
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e000      	b.n	8002ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee0:	2302      	movs	r3, #2
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d139      	bne.n	8002f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e033      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2224      	movs	r2, #36	; 0x24
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f9c:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e01f      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e01d      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	490f      	ldr	r1, [pc, #60]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fc2:	f7fe fda9 	bl	8001b18 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fc8:	e009      	b.n	8002fde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fca:	f7fe fda5 	bl	8001b18 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd8:	d901      	bls.n	8002fde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e007      	b.n	8002fee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	d1ee      	bne.n	8002fca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	58024800 	.word	0x58024800

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f000 bc1d 	b.w	800384a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8087 	beq.w	800312c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b99      	ldr	r3, [pc, #612]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003028:	4b96      	ldr	r3, [pc, #600]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003030:	2b10      	cmp	r3, #16
 8003032:	d007      	beq.n	8003044 <HAL_RCC_OscConfig+0x48>
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b18      	cmp	r3, #24
 8003038:	d110      	bne.n	800305c <HAL_RCC_OscConfig+0x60>
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b8f      	ldr	r3, [pc, #572]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d06c      	beq.n	800312a <HAL_RCC_OscConfig+0x12e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d168      	bne.n	800312a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e3f6      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x78>
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a86      	ldr	r2, [pc, #536]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e02e      	b.n	80030d2 <HAL_RCC_OscConfig+0xd6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10c      	bne.n	8003096 <HAL_RCC_OscConfig+0x9a>
 800307c:	4b81      	ldr	r3, [pc, #516]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a80      	ldr	r2, [pc, #512]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a7d      	ldr	r2, [pc, #500]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e01d      	b.n	80030d2 <HAL_RCC_OscConfig+0xd6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0xbe>
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a77      	ldr	r2, [pc, #476]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a74      	ldr	r2, [pc, #464]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e00b      	b.n	80030d2 <HAL_RCC_OscConfig+0xd6>
 80030ba:	4b72      	ldr	r3, [pc, #456]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a71      	ldr	r2, [pc, #452]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030da:	f7fe fd1d 	bl	8001b18 <HAL_GetTick>
 80030de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e2:	f7fe fd19 	bl	8001b18 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b64      	cmp	r3, #100	; 0x64
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e3aa      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030f4:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_RCC_OscConfig+0xe6>
 8003100:	e014      	b.n	800312c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fd09 	bl	8001b18 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310a:	f7fe fd05 	bl	8001b18 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	; 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e396      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x10e>
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80cb 	beq.w	80032d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b52      	ldr	r3, [pc, #328]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003142:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_RCC_OscConfig+0x164>
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	2b18      	cmp	r3, #24
 8003154:	d156      	bne.n	8003204 <HAL_RCC_OscConfig+0x208>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d151      	bne.n	8003204 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	4b48      	ldr	r3, [pc, #288]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x17c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e368      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003178:	4b42      	ldr	r3, [pc, #264]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 0219 	bic.w	r2, r3, #25
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	493f      	ldr	r1, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318a:	f7fe fcc5 	bl	8001b18 <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003192:	f7fe fcc1 	bl	8001b18 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e352      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b0:	f7fe fce2 	bl	8001b78 <HAL_GetREVID>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d817      	bhi.n	80031ee <HAL_RCC_OscConfig+0x1f2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1dc>
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031ce:	4a2d      	ldr	r2, [pc, #180]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d6:	e07b      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	031b      	lsls	r3, r3, #12
 80031e6:	4927      	ldr	r1, [pc, #156]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ec:	e070      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	061b      	lsls	r3, r3, #24
 80031fc:	4921      	ldr	r1, [pc, #132]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003202:	e065      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d048      	beq.n	800329e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0219 	bic.w	r2, r3, #25
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	491a      	ldr	r1, [pc, #104]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe fc7b 	bl	8001b18 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe fc77 	bl	8001b18 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e308      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	f7fe fc98 	bl	8001b78 <HAL_GetREVID>
 8003248:	4603      	mov	r3, r0
 800324a:	f241 0203 	movw	r2, #4099	; 0x1003
 800324e:	4293      	cmp	r3, r2
 8003250:	d81a      	bhi.n	8003288 <HAL_RCC_OscConfig+0x28c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d108      	bne.n	800326c <HAL_RCC_OscConfig+0x270>
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	6053      	str	r3, [r2, #4]
 800326a:	e031      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	4902      	ldr	r1, [pc, #8]	; (8003284 <HAL_RCC_OscConfig+0x288>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
 8003280:	e026      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4997      	ldr	r1, [pc, #604]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	e018      	b.n	80032d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b95      	ldr	r3, [pc, #596]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7fe fc35 	bl	8001b18 <HAL_GetTick>
 80032ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fc31 	bl	8001b18 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e2c2      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c4:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a9 	beq.w	8003430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b85      	ldr	r3, [pc, #532]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032e8:	4b82      	ldr	r3, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d007      	beq.n	8003304 <HAL_RCC_OscConfig+0x308>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b18      	cmp	r3, #24
 80032f8:	d13a      	bne.n	8003370 <HAL_RCC_OscConfig+0x374>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d135      	bne.n	8003370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x320>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e296      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800331c:	f7fe fc2c 	bl	8001b78 <HAL_GetREVID>
 8003320:	4603      	mov	r3, r0
 8003322:	f241 0203 	movw	r2, #4099	; 0x1003
 8003326:	4293      	cmp	r3, r2
 8003328:	d817      	bhi.n	800335a <HAL_RCC_OscConfig+0x35e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	2b20      	cmp	r3, #32
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x348>
 8003332:	4b70      	ldr	r3, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800333a:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003340:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003342:	e075      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003344:	4b6b      	ldr	r3, [pc, #428]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	069b      	lsls	r3, r3, #26
 8003352:	4968      	ldr	r1, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003358:	e06a      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800335a:	4b66      	ldr	r3, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	4962      	ldr	r1, [pc, #392]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800336e:	e05f      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d042      	beq.n	80033fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003378:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a5d      	ldr	r2, [pc, #372]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fbc8 	bl	8001b18 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800338c:	f7fe fbc4 	bl	8001b18 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e255      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800339e:	4b55      	ldr	r3, [pc, #340]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033aa:	f7fe fbe5 	bl	8001b78 <HAL_GetREVID>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d817      	bhi.n	80033e8 <HAL_RCC_OscConfig+0x3ec>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d108      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3d6>
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ce:	6053      	str	r3, [r2, #4]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	4944      	ldr	r1, [pc, #272]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
 80033e6:	e023      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	493f      	ldr	r1, [pc, #252]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3c      	ldr	r2, [pc, #240]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe fb85 	bl	8001b18 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003412:	f7fe fb81 	bl	8001b18 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e212      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003424:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d036      	beq.n	80034aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d019      	beq.n	8003478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fb62 	bl	8001b18 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fb5e 	bl	8001b18 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1ef      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x45c>
 8003476:	e018      	b.n	80034aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fb48 	bl	8001b18 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe fb44 	bl	8001b18 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e1d5      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d039      	beq.n	800352a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fb25 	bl	8001b18 <HAL_GetTick>
 80034ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fe fb21 	bl	8001b18 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1b2      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x4d6>
 80034f0:	e01b      	b.n	800352a <HAL_RCC_OscConfig+0x52e>
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034f8:	4b9b      	ldr	r3, [pc, #620]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a9a      	ldr	r2, [pc, #616]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80034fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003504:	f7fe fb08 	bl	8001b18 <HAL_GetTick>
 8003508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800350c:	f7fe fb04 	bl	8001b18 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e195      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800351e:	4b92      	ldr	r3, [pc, #584]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8081 	beq.w	800363a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x770>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a8b      	ldr	r2, [pc, #556]	; (800376c <HAL_RCC_OscConfig+0x770>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003544:	f7fe fae8 	bl	8001b18 <HAL_GetTick>
 8003548:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800354c:	f7fe fae4 	bl	8001b18 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e175      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800355e:	4b83      	ldr	r3, [pc, #524]	; (800376c <HAL_RCC_OscConfig+0x770>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x584>
 8003572:	4b7d      	ldr	r3, [pc, #500]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a7c      	ldr	r2, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	e02d      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10c      	bne.n	80035a2 <HAL_RCC_OscConfig+0x5a6>
 8003588:	4b77      	ldr	r3, [pc, #476]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a76      	ldr	r2, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	4b74      	ldr	r3, [pc, #464]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a73      	ldr	r2, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800359a:	f023 0304 	bic.w	r3, r3, #4
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c8>
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4a6b      	ldr	r2, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6713      	str	r3, [r2, #112]	; 0x70
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0x5e0>
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a67      	ldr	r2, [pc, #412]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a64      	ldr	r2, [pc, #400]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80035d6:	f023 0304 	bic.w	r3, r3, #4
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fa98 	bl	8001b18 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fa94 	bl	8001b18 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e123      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003602:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RCC_OscConfig+0x5f0>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe fa82 	bl	8001b18 <HAL_GetTick>
 8003614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fa7e 	bl	8001b18 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e10d      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ee      	bne.n	8003618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8102 	beq.w	8003848 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364c:	2b18      	cmp	r3, #24
 800364e:	f000 80bd 	beq.w	80037cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b02      	cmp	r3, #2
 8003658:	f040 809e 	bne.w	8003798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a41      	ldr	r2, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fa56 	bl	8001b18 <HAL_GetTick>
 800366c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe fa52 	bl	8001b18 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0e3      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003682:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x774>)
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800369e:	0112      	lsls	r2, r2, #4
 80036a0:	430a      	orrs	r2, r1
 80036a2:	4931      	ldr	r1, [pc, #196]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	628b      	str	r3, [r1, #40]	; 0x28
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	3b01      	subs	r3, #1
 80036ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	3b01      	subs	r3, #1
 80036b8:	025b      	lsls	r3, r3, #9
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	3b01      	subs	r3, #1
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036d8:	4923      	ldr	r1, [pc, #140]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ea:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x778>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036f6:	00d2      	lsls	r2, r2, #3
 80036f8:	491b      	ldr	r1, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f023 020c 	bic.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4917      	ldr	r1, [pc, #92]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f023 0202 	bic.w	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	4912      	ldr	r1, [pc, #72]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_RCC_OscConfig+0x76c>)
 8003758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe f9db 	bl	8001b18 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003764:	e011      	b.n	800378a <HAL_RCC_OscConfig+0x78e>
 8003766:	bf00      	nop
 8003768:	58024400 	.word	0x58024400
 800376c:	58024800 	.word	0x58024800
 8003770:	fffffc0c 	.word	0xfffffc0c
 8003774:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe f9ce 	bl	8001b18 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e05f      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800378a:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x77c>
 8003796:	e057      	b.n	8003848 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 800379e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe f9b8 	bl	8001b18 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe f9b4 	bl	8001b18 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e045      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x7b0>
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_RCC_OscConfig+0x858>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d031      	beq.n	8003844 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d12a      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d122      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d108      	bne.n	8003844 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	0e1b      	lsrs	r3, r3, #24
 8003836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3730      	adds	r7, #48	; 0x30
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	58024400 	.word	0x58024400

08003858 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e19c      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b8a      	ldr	r3, [pc, #552]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b87      	ldr	r3, [pc, #540]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 020f 	bic.w	r2, r3, #15
 8003882:	4985      	ldr	r1, [pc, #532]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e184      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	4b7b      	ldr	r3, [pc, #492]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d908      	bls.n	80038ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038b8:	4b78      	ldr	r3, [pc, #480]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	4975      	ldr	r1, [pc, #468]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	4b70      	ldr	r3, [pc, #448]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d908      	bls.n	80038f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038e6:	4b6d      	ldr	r3, [pc, #436]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	496a      	ldr	r1, [pc, #424]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	4b64      	ldr	r3, [pc, #400]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003910:	429a      	cmp	r2, r3
 8003912:	d908      	bls.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003914:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	495e      	ldr	r1, [pc, #376]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003922:	4313      	orrs	r3, r2
 8003924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393e:	429a      	cmp	r2, r3
 8003940:	d908      	bls.n	8003954 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003942:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4953      	ldr	r1, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003950:	4313      	orrs	r3, r2
 8003952:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	4b4d      	ldr	r3, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	429a      	cmp	r2, r3
 800396e:	d908      	bls.n	8003982 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b4a      	ldr	r3, [pc, #296]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f023 020f 	bic.w	r2, r3, #15
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4947      	ldr	r1, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 800397e:	4313      	orrs	r3, r2
 8003980:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d055      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4940      	ldr	r1, [pc, #256]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 800399c:	4313      	orrs	r3, r2
 800399e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a8:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d121      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0f6      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039c0:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d115      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0ea      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d8:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0de      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0d6      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f023 0207 	bic.w	r2, r3, #7
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4925      	ldr	r1, [pc, #148]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0a:	f7fe f885 	bl	8001b18 <HAL_GetTick>
 8003a0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a12:	f7fe f881 	bl	8001b18 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0be      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d1eb      	bne.n	8003a12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d208      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x244>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d214      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	4906      	ldr	r1, [pc, #24]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e086      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x34e>
 8003a98:	52002000 	.word	0x52002000
 8003a9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d208      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4939      	ldr	r1, [pc, #228]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d208      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	492e      	ldr	r1, [pc, #184]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d208      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d208      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b58:	f000 f834 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	4912      	ldr	r1, [pc, #72]	; (8003bb4 <HAL_RCC_ClockConfig+0x35c>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_RCC_ClockConfig+0x358>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <HAL_RCC_ClockConfig+0x35c>)
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x360>)
 8003b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <HAL_RCC_ClockConfig+0x364>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_RCC_ClockConfig+0x368>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd ff72 	bl	8001a84 <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400
 8003bb4:	0800b6e0 	.word	0x0800b6e0
 8003bb8:	24000004 	.word	0x24000004
 8003bbc:	24000000 	.word	0x24000000
 8003bc0:	24000008 	.word	0x24000008

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bca:	4bb3      	ldr	r3, [pc, #716]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bd2:	2b18      	cmp	r3, #24
 8003bd4:	f200 8155 	bhi.w	8003e82 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003e83 	.word	0x08003e83
 8003be8:	08003e83 	.word	0x08003e83
 8003bec:	08003e83 	.word	0x08003e83
 8003bf0:	08003e83 	.word	0x08003e83
 8003bf4:	08003e83 	.word	0x08003e83
 8003bf8:	08003e83 	.word	0x08003e83
 8003bfc:	08003e83 	.word	0x08003e83
 8003c00:	08003c6b 	.word	0x08003c6b
 8003c04:	08003e83 	.word	0x08003e83
 8003c08:	08003e83 	.word	0x08003e83
 8003c0c:	08003e83 	.word	0x08003e83
 8003c10:	08003e83 	.word	0x08003e83
 8003c14:	08003e83 	.word	0x08003e83
 8003c18:	08003e83 	.word	0x08003e83
 8003c1c:	08003e83 	.word	0x08003e83
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003e83 	.word	0x08003e83
 8003c28:	08003e83 	.word	0x08003e83
 8003c2c:	08003e83 	.word	0x08003e83
 8003c30:	08003e83 	.word	0x08003e83
 8003c34:	08003e83 	.word	0x08003e83
 8003c38:	08003e83 	.word	0x08003e83
 8003c3c:	08003e83 	.word	0x08003e83
 8003c40:	08003c77 	.word	0x08003c77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c44:	4b94      	ldr	r3, [pc, #592]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c50:	4b91      	ldr	r3, [pc, #580]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	4a90      	ldr	r2, [pc, #576]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c62:	e111      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c64:	4b8d      	ldr	r3, [pc, #564]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c66:	61bb      	str	r3, [r7, #24]
    break;
 8003c68:	e10e      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c6c:	61bb      	str	r3, [r7, #24]
    break;
 8003c6e:	e10b      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c70:	4b8c      	ldr	r3, [pc, #560]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c72:	61bb      	str	r3, [r7, #24]
    break;
 8003c74:	e108      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c76:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c80:	4b85      	ldr	r3, [pc, #532]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c8c:	4b82      	ldr	r3, [pc, #520]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c96:	4b80      	ldr	r3, [pc, #512]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80e1 	beq.w	8003e7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f000 8083 	beq.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x204>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f200 80a1 	bhi.w	8003e0c <HAL_RCC_GetSysClockFreq+0x248>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x114>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d056      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cd6:	e099      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cd8:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce4:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	4a6b      	ldr	r2, [pc, #428]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003d3e:	e087      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003eac <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b51      	ldr	r3, [pc, #324]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d82:	e065      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003daa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc6:	e043      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003eb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0a:	e021      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003eb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ea8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e54:	0a5b      	lsrs	r3, r3, #9
 8003e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e68:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e74:	ee17 3a90 	vmov	r3, s15
 8003e78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e7a:	e005      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
    break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e84:	61bb      	str	r3, [r7, #24]
    break;
 8003e86:	bf00      	nop
  }

  return sysclockfreq;
 8003e88:	69bb      	ldr	r3, [r7, #24]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	03d09000 	.word	0x03d09000
 8003ea0:	003d0900 	.word	0x003d0900
 8003ea4:	017d7840 	.word	0x017d7840
 8003ea8:	46000000 	.word	0x46000000
 8003eac:	4c742400 	.word	0x4c742400
 8003eb0:	4a742400 	.word	0x4a742400
 8003eb4:	4bbebc20 	.word	0x4bbebc20

08003eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ebe:	f7ff fe81 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	490f      	ldr	r1, [pc, #60]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ed0:	5ccb      	ldrb	r3, [r1, r3]
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ef4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ef6:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	0800b6e0 	.word	0x0800b6e0
 8003f10:	24000004 	.word	0x24000004
 8003f14:	24000000 	.word	0x24000000

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f1c:	f7ff ffcc 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	0800b6e0 	.word	0x0800b6e0

08003f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f48:	f7ff ffb6 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4904      	ldr	r1, [pc, #16]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	0800b6e0 	.word	0x0800b6e0

08003f70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f94:	d02a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f9a:	d824      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa0:	d018      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fa6:	d81e      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb0:	d007      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003fb2:	e018      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4ba3      	ldr	r3, [pc, #652]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4aa2      	ldr	r2, [pc, #648]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fc0:	e015      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 f9d5 	bl	8005378 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fa7e 	bl	80054dc <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ff4:	4b93      	ldr	r3, [pc, #588]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	4990      	ldr	r1, [pc, #576]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	650b      	str	r3, [r1, #80]	; 0x50
 8004006:	e001      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d03d      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401c:	2b04      	cmp	r3, #4
 800401e:	d826      	bhi.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800403d 	.word	0x0800403d
 800402c:	0800404b 	.word	0x0800404b
 8004030:	0800405d 	.word	0x0800405d
 8004034:	08004075 	.word	0x08004075
 8004038:	08004075 	.word	0x08004075
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	4a80      	ldr	r2, [pc, #512]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004048:	e015      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f001 f991 	bl	8005378 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800405a:	e00c      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3324      	adds	r3, #36	; 0x24
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fa3a 	bl	80054dc <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800406c:	e003      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
      break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800407c:	4b71      	ldr	r3, [pc, #452]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	f023 0207 	bic.w	r2, r3, #7
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	496e      	ldr	r1, [pc, #440]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	650b      	str	r3, [r1, #80]	; 0x50
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409c:	2b00      	cmp	r3, #0
 800409e:	d042      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a8:	d02b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ae:	d825      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80040b0:	2bc0      	cmp	r3, #192	; 0xc0
 80040b2:	d028      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040b4:	2bc0      	cmp	r3, #192	; 0xc0
 80040b6:	d821      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d016      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80040bc:	2b80      	cmp	r3, #128	; 0x80
 80040be:	d81d      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d007      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80040c8:	e018      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ca:	4b5e      	ldr	r3, [pc, #376]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4a5d      	ldr	r2, [pc, #372]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80040d6:	e017      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f94a 	bl	8005378 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80040e8:	e00e      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 f9f3 	bl	80054dc <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80040fa:	e005      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800410e:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	494a      	ldr	r1, [pc, #296]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800411c:	4313      	orrs	r3, r2
 800411e:	650b      	str	r3, [r1, #80]	; 0x50
 8004120:	e001      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412e:	2b00      	cmp	r3, #0
 8004130:	d049      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800413c:	d030      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800413e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004142:	d82a      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004148:	d02c      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800414a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800414e:	d824      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004154:	d018      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d81e      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004164:	d007      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004166:	e018      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004168:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4a35      	ldr	r2, [pc, #212]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800416e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004174:	e017      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f001 f8fb 	bl	8005378 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004186:	e00e      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f001 f9a4 	bl	80054dc <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004198:	e005      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041ba:	4922      	ldr	r1, [pc, #136]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	658b      	str	r3, [r1, #88]	; 0x58
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d04b      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041dc:	d030      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80041de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e2:	d82a      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041e8:	d02e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80041ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041ee:	d824      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f4:	d018      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80041f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041fa:	d81e      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004204:	d007      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004206:	e018      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004214:	e019      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f8ab 	bl	8005378 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004226:	e010      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3324      	adds	r3, #36	; 0x24
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f001 f954 	bl	80054dc <RCCEx_PLL3_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004238:	e007      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
      break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004244:	58024400 	.word	0x58024400
      break;
 8004248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004250:	4b99      	ldr	r3, [pc, #612]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800425e:	4996      	ldr	r1, [pc, #600]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004260:	4313      	orrs	r3, r2
 8004262:	658b      	str	r3, [r1, #88]	; 0x58
 8004264:	e001      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d032      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427a:	2b30      	cmp	r3, #48	; 0x30
 800427c:	d01c      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d817      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004282:	2b20      	cmp	r3, #32
 8004284:	d00c      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004286:	2b20      	cmp	r3, #32
 8004288:	d813      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800428e:	2b10      	cmp	r3, #16
 8004290:	d10f      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004292:	4b89      	ldr	r3, [pc, #548]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	4a88      	ldr	r2, [pc, #544]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800429c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800429e:	e00e      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 f866 	bl	8005378 <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80042b0:	e005      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
      break;
 80042b6:	e002      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80042b8:	bf00      	nop
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80042bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042c4:	4b7c      	ldr	r3, [pc, #496]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	4979      	ldr	r1, [pc, #484]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d047      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f0:	d030      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f6:	d82a      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80042f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042fc:	d02c      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80042fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004302:	d824      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d018      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430e:	d81e      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d007      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800431a:	e018      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004328:	e017      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f001 f821 	bl	8005378 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800433a:	e00e      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3324      	adds	r3, #36	; 0x24
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f8ca 	bl	80054dc <RCCEx_PLL3_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800434c:	e005      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
      break;
 8004352:	e002      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004360:	4b55      	ldr	r3, [pc, #340]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	4952      	ldr	r1, [pc, #328]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800436e:	4313      	orrs	r3, r2
 8004370:	650b      	str	r3, [r1, #80]	; 0x50
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d049      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800438e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004392:	d828      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004398:	d02a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800439a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439e:	d822      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80043a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043a4:	d026      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80043a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043aa:	d81c      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80043ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80043b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b6:	d816      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d111      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 ffd5 	bl	8005378 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043d2:	e012      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f87e 	bl	80054dc <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043e4:	e009      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	492a      	ldr	r1, [pc, #168]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800440e:	4313      	orrs	r3, r2
 8004410:	650b      	str	r3, [r1, #80]	; 0x50
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800442a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442e:	d02e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004434:	d828      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d02a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d822      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004442:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004446:	d026      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800444c:	d81c      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d010      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004458:	d816      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01d      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800445e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004462:	d111      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 ff84 	bl	8005378 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004474:	e012      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3324      	adds	r3, #36	; 0x24
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f82d 	bl	80054dc <RCCEx_PLL3_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004486:	e009      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
      break;
 800448c:	e006      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800448e:	bf00      	nop
 8004490:	e004      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800449a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80044b0:	4901      	ldr	r1, [pc, #4]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	658b      	str	r3, [r1, #88]	; 0x58
 80044b6:	e003      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80044b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044d4:	d00e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80044d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044da:	d814      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d015      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80044e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e4:	d10f      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e6:	4baf      	ldr	r3, [pc, #700]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	4aae      	ldr	r2, [pc, #696]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80044f2:	e00c      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	2101      	movs	r1, #1
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff3c 	bl	8005378 <RCCEx_PLL2_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004504:	e003      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
      break;
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800450c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004514:	4ba3      	ldr	r3, [pc, #652]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004520:	49a0      	ldr	r1, [pc, #640]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004522:	4313      	orrs	r3, r2
 8004524:	650b      	str	r3, [r1, #80]	; 0x50
 8004526:	e001      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d032      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2b03      	cmp	r3, #3
 800453e:	d81b      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800457f 	.word	0x0800457f
 800454c:	08004559 	.word	0x08004559
 8004550:	08004567 	.word	0x08004567
 8004554:	0800457f 	.word	0x0800457f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004558:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a91      	ldr	r2, [pc, #580]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800455e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004564:	e00c      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3304      	adds	r3, #4
 800456a:	2102      	movs	r1, #2
 800456c:	4618      	mov	r0, r3
 800456e:	f000 ff03 	bl	8005378 <RCCEx_PLL2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
      break;
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800457e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004586:	4b87      	ldr	r3, [pc, #540]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4984      	ldr	r1, [pc, #528]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004594:	4313      	orrs	r3, r2
 8004596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004598:	e001      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8086 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ac:	4b7e      	ldr	r3, [pc, #504]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b8:	f7fd faae 	bl	8001b18 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045be:	e009      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c0:	f7fd faaa 	bl	8001b18 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d902      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	75fb      	strb	r3, [r7, #23]
        break;
 80045d2:	e005      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d4:	4b74      	ldr	r3, [pc, #464]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ef      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d166      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045e6:	4b6f      	ldr	r3, [pc, #444]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f0:	4053      	eors	r3, r2
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d013      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fa:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004604:	4b67      	ldr	r3, [pc, #412]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a66      	ldr	r2, [pc, #408]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004610:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a63      	ldr	r2, [pc, #396]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800461c:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462c:	d115      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fd fa73 	bl	8001b18 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004634:	e00b      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd fa6f 	bl	8001b18 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d902      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	75fb      	strb	r3, [r7, #23]
            break;
 800464c:	e005      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800464e:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ed      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d126      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466e:	d10d      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004670:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800467e:	0919      	lsrs	r1, r3, #4
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004682:	400b      	ands	r3, r1
 8004684:	4947      	ldr	r1, [pc, #284]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]
 800468a:	e005      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004692:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004696:	6113      	str	r3, [r2, #16]
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800469a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a6:	493f      	ldr	r1, [pc, #252]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	670b      	str	r3, [r1, #112]	; 0x70
 80046ac:	e004      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	75bb      	strb	r3, [r7, #22]
 80046b2:	e001      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8085 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d866      	bhi.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080047b1 	.word	0x080047b1
 80046d8:	0800479d 	.word	0x0800479d
 80046dc:	0800479d 	.word	0x0800479d
 80046e0:	0800479d 	.word	0x0800479d
 80046e4:	0800479d 	.word	0x0800479d
 80046e8:	0800479d 	.word	0x0800479d
 80046ec:	0800479d 	.word	0x0800479d
 80046f0:	0800479d 	.word	0x0800479d
 80046f4:	08004779 	.word	0x08004779
 80046f8:	0800479d 	.word	0x0800479d
 80046fc:	0800479d 	.word	0x0800479d
 8004700:	0800479d 	.word	0x0800479d
 8004704:	0800479d 	.word	0x0800479d
 8004708:	0800479d 	.word	0x0800479d
 800470c:	0800479d 	.word	0x0800479d
 8004710:	0800479d 	.word	0x0800479d
 8004714:	0800478b 	.word	0x0800478b
 8004718:	0800479d 	.word	0x0800479d
 800471c:	0800479d 	.word	0x0800479d
 8004720:	0800479d 	.word	0x0800479d
 8004724:	0800479d 	.word	0x0800479d
 8004728:	0800479d 	.word	0x0800479d
 800472c:	0800479d 	.word	0x0800479d
 8004730:	0800479d 	.word	0x0800479d
 8004734:	080047b1 	.word	0x080047b1
 8004738:	0800479d 	.word	0x0800479d
 800473c:	0800479d 	.word	0x0800479d
 8004740:	0800479d 	.word	0x0800479d
 8004744:	0800479d 	.word	0x0800479d
 8004748:	0800479d 	.word	0x0800479d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	080047b1 	.word	0x080047b1
 8004758:	0800479d 	.word	0x0800479d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	0800479d 	.word	0x0800479d
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800479d 	.word	0x0800479d
 8004774:	080047b1 	.word	0x080047b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fdfa 	bl	8005378 <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004788:	e013      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3324      	adds	r3, #36	; 0x24
 800478e:	2101      	movs	r1, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fea3 	bl	80054dc <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800479a:	e00a      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
      break;
 80047a0:	e007      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80047a2:	bf00      	nop
 80047a4:	58024400 	.word	0x58024400
 80047a8:	58024800 	.word	0x58024800
 80047ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80047b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047b8:	4b96      	ldr	r3, [pc, #600]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c4:	4993      	ldr	r1, [pc, #588]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	654b      	str	r3, [r1, #84]	; 0x54
 80047ca:	e001      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d038      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d821      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	0800482f 	.word	0x0800482f
 80047f0:	08004805 	.word	0x08004805
 80047f4:	08004817 	.word	0x08004817
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fdb4 	bl	8005378 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004814:	e00c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3324      	adds	r3, #36	; 0x24
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fe5d 	bl	80054dc <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800482e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004836:	4b77      	ldr	r3, [pc, #476]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	4974      	ldr	r1, [pc, #464]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	654b      	str	r3, [r1, #84]	; 0x54
 8004848:	e001      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d03a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	2b05      	cmp	r3, #5
 8004862:	d821      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048af 	.word	0x080048af
 8004870:	08004885 	.word	0x08004885
 8004874:	08004897 	.word	0x08004897
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	2101      	movs	r1, #1
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd74 	bl	8005378 <RCCEx_PLL2_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004894:	e00c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3324      	adds	r3, #36	; 0x24
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fe1d 	bl	80054dc <RCCEx_PLL3_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048a6:	e003      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80048ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048b6:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	4953      	ldr	r1, [pc, #332]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	658b      	str	r3, [r1, #88]	; 0x58
 80048ca:	e001      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d04b      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048e6:	d02e      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80048e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ec:	d828      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d02a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f8:	d822      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80048fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048fe:	d026      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004904:	d81c      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490a:	d010      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800490c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004910:	d816      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01d      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491a:	d111      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fd28 	bl	8005378 <RCCEx_PLL2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800492c:	e012      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3324      	adds	r3, #36	; 0x24
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fdd1 	bl	80054dc <RCCEx_PLL3_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800493e:	e009      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004968:	492a      	ldr	r1, [pc, #168]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	654b      	str	r3, [r1, #84]	; 0x54
 800496e:	e001      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d04d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004986:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800498a:	d02e      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800498c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004990:	d828      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004996:	d02a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499c:	d822      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800499e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a2:	d026      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80049a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a8:	d81c      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d010      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	d816      	bhi.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01d      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049be:	d111      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fcd6 	bl	8005378 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049d0:	e012      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3324      	adds	r3, #36	; 0x24
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fd7f 	bl	80054dc <RCCEx_PLL3_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049e2:	e009      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80049ea:	bf00      	nop
 80049ec:	e004      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80049f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a0c:	4901      	ldr	r1, [pc, #4]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	658b      	str	r3, [r1, #88]	; 0x58
 8004a12:	e003      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d04b      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a32:	d02e      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004a34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a38:	d828      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3e:	d02a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a44:	d822      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004a46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a4a:	d026      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004a4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a50:	d81c      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a56:	d010      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5c:	d816      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	d111      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fc82 	bl	8005378 <RCCEx_PLL2_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a78:	e012      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd2b 	bl	80054dc <RCCEx_PLL3_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a8a:	e009      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a92:	bf00      	nop
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004aa6:	4b9d      	ldr	r3, [pc, #628]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ab4:	4999      	ldr	r1, [pc, #612]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aba:	e001      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d10a      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3324      	adds	r3, #36	; 0x24
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fcfc 	bl	80054dc <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004aee:	4b8b      	ldr	r3, [pc, #556]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afc:	4987      	ldr	r1, [pc, #540]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b18:	d10a      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3324      	adds	r3, #36	; 0x24
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fcdb 	bl	80054dc <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b30:	4b7a      	ldr	r3, [pc, #488]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3e:	4977      	ldr	r1, [pc, #476]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d034      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b60:	d817      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004b6c:	e011      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fbff 	bl	8005378 <RCCEx_PLL2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b7e:	e00c      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fca8 	bl	80054dc <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b90:	e003      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
      break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba0:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bae:	495b      	ldr	r1, [pc, #364]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	658b      	str	r3, [r1, #88]	; 0x58
 8004bb4:	e001      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d033      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bd0:	d01c      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bd6:	d816      	bhi.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bdc:	d003      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be2:	d007      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004be4:	e00f      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be6:	4b4d      	ldr	r3, [pc, #308]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	4a4c      	ldr	r2, [pc, #304]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004bf2:	e00c      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3324      	adds	r3, #36	; 0x24
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fc6e 	bl	80054dc <RCCEx_PLL3_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c04:	e003      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
      break;
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c22:	493e      	ldr	r1, [pc, #248]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	654b      	str	r3, [r1, #84]	; 0x54
 8004c28:	e001      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d029      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c46:	d007      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004c48:	e00f      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c56:	e00b      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	2102      	movs	r1, #2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb8a 	bl	8005378 <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	4926      	ldr	r1, [pc, #152]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c88:	e001      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3324      	adds	r3, #36	; 0x24
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fc1b 	bl	80054dc <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d033      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc4:	d017      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cca:	d811      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d013      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd6:	d80b      	bhi.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004cee:	e007      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	e004      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d12:	4902      	ldr	r1, [pc, #8]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	654b      	str	r3, [r1, #84]	; 0x54
 8004d18:	e004      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d30:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	492e      	ldr	r1, [pc, #184]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d5c:	4926      	ldr	r1, [pc, #152]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d6e:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7a:	491f      	ldr	r1, [pc, #124]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d96:	6113      	str	r3, [r2, #16]
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004da2:	4915      	ldr	r1, [pc, #84]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da08      	bge.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbc:	490e      	ldr	r1, [pc, #56]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	4906      	ldr	r1, [pc, #24]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004de2:	7dbb      	ldrb	r3, [r7, #22]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400

08004dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e00:	f7ff f85a 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4904      	ldr	r1, [pc, #16]	; (8004e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	58024400 	.word	0x58024400
 8004e24:	0800b6e0 	.word	0x0800b6e0

08004e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e30:	4ba1      	ldr	r3, [pc, #644]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e3a:	4b9f      	ldr	r3, [pc, #636]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	0b1b      	lsrs	r3, r3, #12
 8004e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e46:	4b9c      	ldr	r3, [pc, #624]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e52:	4b99      	ldr	r3, [pc, #612]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	08db      	lsrs	r3, r3, #3
 8004e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8111 	beq.w	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	f000 8083 	beq.w	8004f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	f200 80a1 	bhi.w	8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d056      	beq.n	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e92:	e099      	b.n	8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e94:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02d      	beq.n	8004efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ea0:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	4a84      	ldr	r2, [pc, #528]	; (80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b7b      	ldr	r3, [pc, #492]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ede:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004efa:	e087      	b.n	800500c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f22:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f3e:	e065      	b.n	800500c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f82:	e043      	b.n	800500c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f96:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004faa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fc6:	e021      	b.n	800500c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800500a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	0a5b      	lsrs	r3, r3, #9
 8005012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005026:	edd7 6a07 	vldr	s13, [r7, #28]
 800502a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005032:	ee17 2a90 	vmov	r2, s15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800503a:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005054:	edd7 6a07 	vldr	s13, [r7, #28]
 8005058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005060:	ee17 2a90 	vmov	r2, s15
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005082:	edd7 6a07 	vldr	s13, [r7, #28]
 8005086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800508a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508e:	ee17 2a90 	vmov	r2, s15
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005096:	e008      	b.n	80050aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	bf00      	nop
 80050ac:	3724      	adds	r7, #36	; 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
 80050bc:	03d09000 	.word	0x03d09000
 80050c0:	46000000 	.word	0x46000000
 80050c4:	4c742400 	.word	0x4c742400
 80050c8:	4a742400 	.word	0x4a742400
 80050cc:	4bbebc20 	.word	0x4bbebc20

080050d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050d8:	4ba1      	ldr	r3, [pc, #644]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80050e2:	4b9f      	ldr	r3, [pc, #636]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	0d1b      	lsrs	r3, r3, #20
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050ee:	4b9c      	ldr	r3, [pc, #624]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80050fa:	4b99      	ldr	r3, [pc, #612]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	fb02 f303 	mul.w	r3, r2, r3
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8111 	beq.w	8005340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b02      	cmp	r3, #2
 8005122:	f000 8083 	beq.w	800522c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b02      	cmp	r3, #2
 800512a:	f200 80a1 	bhi.w	8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d056      	beq.n	80051e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800513a:	e099      	b.n	8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800513c:	4b88      	ldr	r3, [pc, #544]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02d      	beq.n	80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005148:	4b85      	ldr	r3, [pc, #532]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	08db      	lsrs	r3, r3, #3
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	4a84      	ldr	r2, [pc, #528]	; (8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
 8005158:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	ee07 3a90 	vmov	s15, r3
 8005160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005172:	4b7b      	ldr	r3, [pc, #492]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	ed97 6a03 	vldr	s12, [r7, #12]
 8005186:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800518a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051a2:	e087      	b.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800536c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b6:	4b6a      	ldr	r3, [pc, #424]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051e6:	e065      	b.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fa:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520a:	ed97 6a03 	vldr	s12, [r7, #12]
 800520e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800522a:	e043      	b.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523e:	4b48      	ldr	r3, [pc, #288]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005252:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800526e:	e021      	b.n	80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005282:	4b37      	ldr	r3, [pc, #220]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005292:	ed97 6a03 	vldr	s12, [r7, #12]
 8005296:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052b4:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	0a5b      	lsrs	r3, r3, #9
 80052ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052da:	ee17 2a90 	vmov	r2, s15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80052e2:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 2a90 	vmov	r2, s15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005310:	4b13      	ldr	r3, [pc, #76]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800532a:	edd7 6a07 	vldr	s13, [r7, #28]
 800532e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005336:	ee17 2a90 	vmov	r2, s15
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800533e:	e008      	b.n	8005352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
}
 8005352:	bf00      	nop
 8005354:	3724      	adds	r7, #36	; 0x24
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
 8005364:	03d09000 	.word	0x03d09000
 8005368:	46000000 	.word	0x46000000
 800536c:	4c742400 	.word	0x4c742400
 8005370:	4a742400 	.word	0x4a742400
 8005374:	4bbebc20 	.word	0x4bbebc20

08005378 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005386:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d101      	bne.n	8005396 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e099      	b.n	80054ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005396:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a4e      	ldr	r2, [pc, #312]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a2:	f7fc fbb9 	bl	8001b18 <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a8:	e008      	b.n	80053bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053aa:	f7fc fbb5 	bl	8001b18 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e086      	b.n	80054ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053bc:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f0      	bne.n	80053aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053c8:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	493f      	ldr	r1, [pc, #252]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	628b      	str	r3, [r1, #40]	; 0x28
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	025b      	lsls	r3, r3, #9
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	3b01      	subs	r3, #1
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800540c:	4931      	ldr	r1, [pc, #196]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005412:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	492d      	ldr	r1, [pc, #180]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005424:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	f023 0220 	bic.w	r2, r3, #32
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	4928      	ldr	r1, [pc, #160]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005432:	4313      	orrs	r3, r2
 8005434:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800543c:	f023 0310 	bic.w	r3, r3, #16
 8005440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <RCCEx_PLL2_Config+0x160>)
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	69d2      	ldr	r2, [r2, #28]
 800544e:	00d2      	lsls	r2, r2, #3
 8005450:	4920      	ldr	r1, [pc, #128]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005452:	4313      	orrs	r3, r2
 8005454:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005456:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800545c:	f043 0310 	orr.w	r3, r3, #16
 8005460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800546e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005474:	e00f      	b.n	8005496 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d106      	bne.n	800548a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800547c:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005488:	e005      	b.n	8005496 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005494:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 800549c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fc fb39 	bl	8001b18 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054a8:	e008      	b.n	80054bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054aa:	f7fc fb35 	bl	8001b18 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e006      	b.n	80054ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <RCCEx_PLL2_Config+0x15c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	58024400 	.word	0x58024400
 80054d8:	ffff0007 	.word	0xffff0007

080054dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ea:	4b53      	ldr	r3, [pc, #332]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d101      	bne.n	80054fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e099      	b.n	800562e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054fa:	4b4f      	ldr	r3, [pc, #316]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a4e      	ldr	r2, [pc, #312]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fc fb07 	bl	8001b18 <HAL_GetTick>
 800550a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800550c:	e008      	b.n	8005520 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800550e:	f7fc fb03 	bl	8001b18 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e086      	b.n	800562e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f0      	bne.n	800550e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800552c:	4b42      	ldr	r3, [pc, #264]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	051b      	lsls	r3, r3, #20
 800553a:	493f      	ldr	r1, [pc, #252]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	628b      	str	r3, [r1, #40]	; 0x28
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	3b01      	subs	r3, #1
 8005550:	025b      	lsls	r3, r3, #9
 8005552:	b29b      	uxth	r3, r3
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	3b01      	subs	r3, #1
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	3b01      	subs	r3, #1
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005570:	4931      	ldr	r1, [pc, #196]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005576:	4b30      	ldr	r3, [pc, #192]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	492d      	ldr	r1, [pc, #180]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005584:	4313      	orrs	r3, r2
 8005586:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005588:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	4928      	ldr	r1, [pc, #160]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4a26      	ldr	r2, [pc, #152]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <RCCEx_PLL3_Config+0x160>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	69d2      	ldr	r2, [r2, #28]
 80055b2:	00d2      	lsls	r2, r2, #3
 80055b4:	4920      	ldr	r1, [pc, #128]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055ba:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d106      	bne.n	80055da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055d8:	e00f      	b.n	80055fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d106      	bne.n	80055ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055e0:	4b15      	ldr	r3, [pc, #84]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a14      	ldr	r2, [pc, #80]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055ec:	e005      	b.n	80055fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a11      	ldr	r2, [pc, #68]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fc fa87 	bl	8001b18 <HAL_GetTick>
 800560a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800560c:	e008      	b.n	8005620 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800560e:	f7fc fa83 	bl	8001b18 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e006      	b.n	800562e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <RCCEx_PLL3_Config+0x15c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
 800563c:	ffff0007 	.word	0xffff0007

08005640 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0f1      	b.n	8005836 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a78      	ldr	r2, [pc, #480]	; (8005840 <HAL_SPI_Init+0x200>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <HAL_SPI_Init+0x42>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a77      	ldr	r2, [pc, #476]	; (8005844 <HAL_SPI_Init+0x204>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00a      	beq.n	8005682 <HAL_SPI_Init+0x42>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_SPI_Init+0x208>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d005      	beq.n	8005682 <HAL_SPI_Init+0x42>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d901      	bls.n	8005682 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0d9      	b.n	8005836 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 ff66 	bl	8006554 <SPI_GetPacketSize>
 8005688:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6c      	ldr	r2, [pc, #432]	; (8005840 <HAL_SPI_Init+0x200>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00c      	beq.n	80056ae <HAL_SPI_Init+0x6e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6a      	ldr	r2, [pc, #424]	; (8005844 <HAL_SPI_Init+0x204>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <HAL_SPI_Init+0x6e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a69      	ldr	r2, [pc, #420]	; (8005848 <HAL_SPI_Init+0x208>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d002      	beq.n	80056ae <HAL_SPI_Init+0x6e>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d811      	bhi.n	80056d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80056b2:	4a63      	ldr	r2, [pc, #396]	; (8005840 <HAL_SPI_Init+0x200>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a61      	ldr	r2, [pc, #388]	; (8005844 <HAL_SPI_Init+0x204>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_SPI_Init+0x8c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a60      	ldr	r2, [pc, #384]	; (8005848 <HAL_SPI_Init+0x208>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d104      	bne.n	80056d6 <HAL_SPI_Init+0x96>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d901      	bls.n	80056d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0af      	b.n	8005836 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb feac 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800571c:	d119      	bne.n	8005752 <HAL_SPI_Init+0x112>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005726:	d103      	bne.n	8005730 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800573c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005740:	d107      	bne.n	8005752 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	431a      	orrs	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	ea42 0103 	orr.w	r1, r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b2:	ea42 0103 	orr.w	r1, r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d113      	bne.n	80057f2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40013000 	.word	0x40013000
 8005844:	40003800 	.word	0x40003800
 8005848:	40003c00 	.word	0x40003c00

0800584c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3320      	adds	r3, #32
 8005862:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_SPI_Transmit+0x2a>
 8005872:	2302      	movs	r3, #2
 8005874:	e1d7      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587e:	f7fc f94b 	bl	8001b18 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d007      	beq.n	80058a0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005890:	2302      	movs	r3, #2
 8005892:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800589c:	7efb      	ldrb	r3, [r7, #27]
 800589e:	e1c2      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Transmit+0x60>
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d107      	bne.n	80058bc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80058b8:	7efb      	ldrb	r3, [r7, #27]
 80058ba:	e1b4      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2203      	movs	r2, #3
 80058c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800590c:	d107      	bne.n	800591e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	4b96      	ldr	r3, [pc, #600]	; (8005b80 <HAL_SPI_Transmit+0x334>)
 8005926:	4013      	ands	r3, r2
 8005928:	88f9      	ldrh	r1, [r7, #6]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	6812      	ldr	r2, [r2, #0]
 800592e:	430b      	orrs	r3, r1
 8005930:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0201 	orr.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594a:	d107      	bne.n	800595c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b0f      	cmp	r3, #15
 8005962:	d947      	bls.n	80059f4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005964:	e03f      	b.n	80059e6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b02      	cmp	r3, #2
 8005972:	d114      	bne.n	800599e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800599c:	e023      	b.n	80059e6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800599e:	f7fc f8bb 	bl	8001b18 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d803      	bhi.n	80059b6 <HAL_SPI_Transmit+0x16a>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b4:	d102      	bne.n	80059bc <HAL_SPI_Transmit+0x170>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d114      	bne.n	80059e6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fcfb 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e11f      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1b9      	bne.n	8005966 <HAL_SPI_Transmit+0x11a>
 80059f2:	e0f2      	b.n	8005bda <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b07      	cmp	r3, #7
 80059fa:	f240 80e7 	bls.w	8005bcc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80059fe:	e05d      	b.n	8005abc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d132      	bne.n	8005a74 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d918      	bls.n	8005a4c <HAL_SPI_Transmit+0x200>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	1d1a      	adds	r2, r3, #4
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b02      	subs	r3, #2
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a4a:	e037      	b.n	8005abc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	881a      	ldrh	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a72:	e023      	b.n	8005abc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a74:	f7fc f850 	bl	8001b18 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d803      	bhi.n	8005a8c <HAL_SPI_Transmit+0x240>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8a:	d102      	bne.n	8005a92 <HAL_SPI_Transmit+0x246>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d114      	bne.n	8005abc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fc90 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0b4      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d19b      	bne.n	8005a00 <HAL_SPI_Transmit+0x1b4>
 8005ac8:	e087      	b.n	8005bda <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d155      	bne.n	8005b84 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d918      	bls.n	8005b16 <HAL_SPI_Transmit+0x2ca>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d914      	bls.n	8005b16 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afc:	1d1a      	adds	r2, r3, #4
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b14:	e05a      	b.n	8005bcc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d917      	bls.n	8005b52 <HAL_SPI_Transmit+0x306>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d013      	beq.n	8005b52 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	1c9a      	adds	r2, r3, #2
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b02      	subs	r3, #2
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b50:	e03c      	b.n	8005bcc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3320      	adds	r3, #32
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005b7c:	e026      	b.n	8005bcc <HAL_SPI_Transmit+0x380>
 8005b7e:	bf00      	nop
 8005b80:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b84:	f7fb ffc8 	bl	8001b18 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d803      	bhi.n	8005b9c <HAL_SPI_Transmit+0x350>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_Transmit+0x356>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d114      	bne.n	8005bcc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fc08 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e02c      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f af78 	bne.w	8005aca <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2108      	movs	r1, #8
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fc87 	bl	80064f8 <SPI_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d007      	beq.n	8005c00 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fbd9 	bl	80063b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005c24:	7efb      	ldrb	r3, [r7, #27]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop

08005c30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3330      	adds	r3, #48	; 0x30
 8005c4a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c54:	d112      	bne.n	8005c7c <HAL_SPI_Receive+0x4c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10e      	bne.n	8005c7c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2204      	movs	r2, #4
 8005c62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c66:	88fa      	ldrh	r2, [r7, #6]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f978 	bl	8005f68 <HAL_SPI_TransmitReceive>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	e16f      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Receive+0x5a>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e168      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c92:	f7fb ff41 	bl	8001b18 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d007      	beq.n	8005cb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	e153      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Receive+0x90>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d107      	bne.n	8005cd0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005ccc:	7ffb      	ldrb	r3, [r7, #31]
 8005cce:	e145      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005d20:	d107      	bne.n	8005d32 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	4b8a      	ldr	r3, [pc, #552]	; (8005f64 <HAL_SPI_Receive+0x334>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	88f9      	ldrh	r1, [r7, #6]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	430b      	orrs	r3, r1
 8005d44:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d5e:	d107      	bne.n	8005d70 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d948      	bls.n	8005e0a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005d78:	e040      	b.n	8005dfc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	f248 0308 	movw	r3, #32776	; 0x8008
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005db2:	e023      	b.n	8005dfc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db4:	f7fb feb0 	bl	8001b18 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d803      	bhi.n	8005dcc <HAL_SPI_Receive+0x19c>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Receive+0x1a2>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d114      	bne.n	8005dfc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 faf0 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0af      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1b8      	bne.n	8005d7a <HAL_SPI_Receive+0x14a>
 8005e08:	e095      	b.n	8005f36 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b07      	cmp	r3, #7
 8005e10:	f240 808b 	bls.w	8005f2a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005e14:	e03f      	b.n	8005e96 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d114      	bne.n	8005e4e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	8812      	ldrh	r2, [r2, #0]
 8005e2c:	b292      	uxth	r2, r2
 8005e2e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	1c9a      	adds	r2, r3, #2
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005e4c:	e023      	b.n	8005e96 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4e:	f7fb fe63 	bl	8001b18 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d803      	bhi.n	8005e66 <HAL_SPI_Receive+0x236>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Receive+0x23c>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d114      	bne.n	8005e96 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 faa3 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e062      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1b9      	bne.n	8005e16 <HAL_SPI_Receive+0x1e6>
 8005ea2:	e048      	b.n	8005f36 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d117      	bne.n	8005ee2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005ee0:	e023      	b.n	8005f2a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ee2:	f7fb fe19 	bl	8001b18 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d803      	bhi.n	8005efa <HAL_SPI_Receive+0x2ca>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_Receive+0x2d0>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d114      	bne.n	8005f2a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fa59 	bl	80063b8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e018      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1b6      	bne.n	8005ea4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fa3e 	bl	80063b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	ffff0000 	.word	0xffff0000

08005f68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08e      	sub	sp, #56	; 0x38
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3320      	adds	r3, #32
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3330      	adds	r3, #48	; 0x30
 8005f8a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x32>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e209      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa2:	f7fb fdb9 	bl	8001b18 <HAL_GetTick>
 8005fa6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8005fac:	887b      	ldrh	r3, [r7, #2]
 8005fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005fb6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fbe:	7efb      	ldrb	r3, [r7, #27]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d014      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x86>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fca:	d106      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8005fd4:	7efb      	ldrb	r3, [r7, #27]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d009      	beq.n	8005fee <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fec:	e1df      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x98>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x98>
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800600e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006012:	e1cc      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b04      	cmp	r3, #4
 800601e:	d003      	beq.n	8006028 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2205      	movs	r2, #5
 8006024:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	887a      	ldrh	r2, [r7, #2]
 800603a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	887a      	ldrh	r2, [r7, #2]
 8006042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	887a      	ldrh	r2, [r7, #2]
 8006050:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b82      	ldr	r3, [pc, #520]	; (8006278 <HAL_SPI_TransmitReceive+0x310>)
 8006070:	4013      	ands	r3, r2
 8006072:	8879      	ldrh	r1, [r7, #2]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	430b      	orrs	r3, r1
 800607a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006094:	d107      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d970      	bls.n	8006190 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80060ae:	e068      	b.n	8006182 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d11a      	bne.n	80060f4 <HAL_SPI_TransmitReceive+0x18c>
 80060be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d017      	beq.n	80060f4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6812      	ldr	r2, [r2, #0]
 80060ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	1d1a      	adds	r2, r3, #4
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80060f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	f248 0308 	movw	r3, #32776	; 0x8008
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <HAL_SPI_TransmitReceive+0x1d2>
 8006104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006114:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006138:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613a:	f7fb fced 	bl	8001b18 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	429a      	cmp	r2, r3
 8006148:	d803      	bhi.n	8006152 <HAL_SPI_TransmitReceive+0x1ea>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006150:	d102      	bne.n	8006158 <HAL_SPI_TransmitReceive+0x1f0>
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2b00      	cmp	r3, #0
 8006156:	d114      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f92d 	bl	80063b8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e115      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006182:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006184:	2b00      	cmp	r3, #0
 8006186:	d193      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x148>
 8006188:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d190      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x148>
 800618e:	e0e7      	b.n	8006360 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b07      	cmp	r3, #7
 8006196:	f240 80dd 	bls.w	8006354 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800619a:	e066      	b.n	800626a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d119      	bne.n	80061de <HAL_SPI_TransmitReceive+0x276>
 80061aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	881a      	ldrh	r2, [r3, #0]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80061dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11a      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x2ba>
 80061ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d017      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	b292      	uxth	r2, r2
 80061fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006220:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006222:	f7fb fc79 	bl	8001b18 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622e:	429a      	cmp	r2, r3
 8006230:	d803      	bhi.n	800623a <HAL_SPI_TransmitReceive+0x2d2>
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006238:	d102      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x2d8>
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d114      	bne.n	800626a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f8b9 	bl	80063b8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e0a1      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800626a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800626c:	2b00      	cmp	r3, #0
 800626e:	d195      	bne.n	800619c <HAL_SPI_TransmitReceive+0x234>
 8006270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d192      	bne.n	800619c <HAL_SPI_TransmitReceive+0x234>
 8006276:	e073      	b.n	8006360 <HAL_SPI_TransmitReceive+0x3f8>
 8006278:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b02      	cmp	r3, #2
 8006288:	d11b      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x35a>
 800628a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800628c:	2b00      	cmp	r3, #0
 800628e:	d018      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3320      	adds	r3, #32
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80062c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d11d      	bne.n	800630c <HAL_SPI_TransmitReceive+0x3a4>
 80062d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01a      	beq.n	800630c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800630a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800630c:	f7fb fc04 	bl	8001b18 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006318:	429a      	cmp	r2, r3
 800631a:	d803      	bhi.n	8006324 <HAL_SPI_TransmitReceive+0x3bc>
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006322:	d102      	bne.n	800632a <HAL_SPI_TransmitReceive+0x3c2>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b00      	cmp	r3, #0
 8006328:	d114      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f844 	bl	80063b8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e02c      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006354:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006356:	2b00      	cmp	r3, #0
 8006358:	d190      	bne.n	800627c <HAL_SPI_TransmitReceive+0x314>
 800635a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d18d      	bne.n	800627c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2200      	movs	r2, #0
 8006368:	2108      	movs	r1, #8
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f8c4 	bl	80064f8 <SPI_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f816 	bl	80063b8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e001      	b.n	80063ae <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80063aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3730      	adds	r7, #48	; 0x30
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0210 	orr.w	r2, r2, #16
 80063e6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6919      	ldr	r1, [r3, #16]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b3c      	ldr	r3, [pc, #240]	; (80064f4 <SPI_CloseTransfer+0x13c>)
 8006404:	400b      	ands	r3, r1
 8006406:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006416:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b04      	cmp	r3, #4
 8006422:	d014      	beq.n	800644e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006434:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0220 	orr.w	r2, r2, #32
 800644c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b03      	cmp	r3, #3
 8006458:	d014      	beq.n	8006484 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00f      	beq.n	8006484 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006482:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006494:	f043 0201 	orr.w	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064be:	f043 0208 	orr.w	r2, r3, #8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064d6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	fffffc90 	.word	0xfffffc90

080064f8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006508:	e010      	b.n	800652c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650a:	f7fb fb05 	bl	8001b18 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	429a      	cmp	r2, r3
 8006518:	d803      	bhi.n	8006522 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006520:	d102      	bne.n	8006528 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e00f      	b.n	800654c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4013      	ands	r3, r2
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	429a      	cmp	r2, r3
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	429a      	cmp	r2, r3
 8006548:	d0df      	beq.n	800650a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	3307      	adds	r3, #7
 8006572:	08db      	lsrs	r3, r3, #3
 8006574:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e049      	b.n	8006630 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fa ffaf 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f000 fd7b 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d001      	beq.n	8006650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e054      	b.n	80066fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_TIM_Base_Start_IT+0xd0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d022      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667a:	d01d      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_TIM_Base_Start_IT+0xd4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d018      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a21      	ldr	r2, [pc, #132]	; (8006710 <HAL_TIM_Base_Start_IT+0xd8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d013      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_TIM_Base_Start_IT+0xdc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_Base_Start_IT+0xe0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d009      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_TIM_Base_Start_IT+0xe4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x80>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_TIM_Base_Start_IT+0xe8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d115      	bne.n	80066e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	4b19      	ldr	r3, [pc, #100]	; (8006724 <HAL_TIM_Base_Start_IT+0xec>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b06      	cmp	r3, #6
 80066c8:	d015      	beq.n	80066f6 <HAL_TIM_Base_Start_IT+0xbe>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d011      	beq.n	80066f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e2:	e008      	b.n	80066f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e000      	b.n	80066f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40010400 	.word	0x40010400
 800671c:	40001800 	.word	0x40001800
 8006720:	40014000 	.word	0x40014000
 8006724:	00010007 	.word	0x00010007

08006728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e049      	b.n	80067ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f841 	bl	80067d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	4610      	mov	r0, r2
 8006768:	f000 fcac 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_TIM_PWM_Start+0x24>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e03c      	b.n	800688a <HAL_TIM_PWM_Start+0x9e>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d109      	bne.n	800682a <HAL_TIM_PWM_Start+0x3e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	bf14      	ite	ne
 8006822:	2301      	movne	r3, #1
 8006824:	2300      	moveq	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	e02f      	b.n	800688a <HAL_TIM_PWM_Start+0x9e>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d109      	bne.n	8006844 <HAL_TIM_PWM_Start+0x58>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e022      	b.n	800688a <HAL_TIM_PWM_Start+0x9e>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b0c      	cmp	r3, #12
 8006848:	d109      	bne.n	800685e <HAL_TIM_PWM_Start+0x72>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	bf14      	ite	ne
 8006856:	2301      	movne	r3, #1
 8006858:	2300      	moveq	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	e015      	b.n	800688a <HAL_TIM_PWM_Start+0x9e>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b10      	cmp	r3, #16
 8006862:	d109      	bne.n	8006878 <HAL_TIM_PWM_Start+0x8c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e008      	b.n	800688a <HAL_TIM_PWM_Start+0x9e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0a1      	b.n	80069d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xb6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a0:	e023      	b.n	80068ea <HAL_TIM_PWM_Start+0xfe>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Start+0xc6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	e01b      	b.n	80068ea <HAL_TIM_PWM_Start+0xfe>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0xd6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c0:	e013      	b.n	80068ea <HAL_TIM_PWM_Start+0xfe>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0xe6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068d0:	e00b      	b.n	80068ea <HAL_TIM_PWM_Start+0xfe>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d104      	bne.n	80068e2 <HAL_TIM_PWM_Start+0xf6>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e0:	e003      	b.n	80068ea <HAL_TIM_PWM_Start+0xfe>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fff4 	bl	80078e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a38      	ldr	r2, [pc, #224]	; (80069e0 <HAL_TIM_PWM_Start+0x1f4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <HAL_TIM_PWM_Start+0x13e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a37      	ldr	r2, [pc, #220]	; (80069e4 <HAL_TIM_PWM_Start+0x1f8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00e      	beq.n	800692a <HAL_TIM_PWM_Start+0x13e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a35      	ldr	r2, [pc, #212]	; (80069e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d009      	beq.n	800692a <HAL_TIM_PWM_Start+0x13e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a34      	ldr	r2, [pc, #208]	; (80069ec <HAL_TIM_PWM_Start+0x200>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <HAL_TIM_PWM_Start+0x13e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a32      	ldr	r2, [pc, #200]	; (80069f0 <HAL_TIM_PWM_Start+0x204>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <HAL_TIM_PWM_Start+0x142>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <HAL_TIM_PWM_Start+0x144>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <HAL_TIM_PWM_Start+0x1f4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006956:	d01d      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <HAL_TIM_PWM_Start+0x208>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_TIM_PWM_Start+0x20c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_TIM_PWM_Start+0x210>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1a      	ldr	r2, [pc, #104]	; (80069e4 <HAL_TIM_PWM_Start+0x1f8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_TIM_PWM_Start+0x214>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIM_PWM_Start+0x1a8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a16      	ldr	r2, [pc, #88]	; (80069e8 <HAL_TIM_PWM_Start+0x1fc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d115      	bne.n	80069c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <HAL_TIM_PWM_Start+0x218>)
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d015      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x1e6>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d011      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069be:	e008      	b.n	80069d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e000      	b.n	80069d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40001800 	.word	0x40001800
 8006a04:	00010007 	.word	0x00010007

08006a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0202 	mvn.w	r2, #2
 8006a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fb1c 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb0e 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fb1f 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0204 	mvn.w	r2, #4
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 faf2 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fae4 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 faf5 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0208 	mvn.w	r2, #8
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fac8 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 faba 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 facb 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0210 	mvn.w	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2208      	movs	r2, #8
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa9e 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa90 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 faa1 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0201 	mvn.w	r2, #1
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa6a 	bl	8007060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b80      	cmp	r3, #128	; 0x80
 8006b98:	d10e      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 ffd0 	bl	8007b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 ffc3 	bl	8007b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d10e      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d107      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa4f 	bl	80070b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d10e      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0220 	mvn.w	r2, #32
 8006c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff83 	bl	8007b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e0ff      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b14      	cmp	r3, #20
 8006c72:	f200 80f0 	bhi.w	8006e56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006e57 	.word	0x08006e57
 8006c84:	08006e57 	.word	0x08006e57
 8006c88:	08006e57 	.word	0x08006e57
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006e57 	.word	0x08006e57
 8006c94:	08006e57 	.word	0x08006e57
 8006c98:	08006e57 	.word	0x08006e57
 8006c9c:	08006d53 	.word	0x08006d53
 8006ca0:	08006e57 	.word	0x08006e57
 8006ca4:	08006e57 	.word	0x08006e57
 8006ca8:	08006e57 	.word	0x08006e57
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006e57 	.word	0x08006e57
 8006cb4:	08006e57 	.word	0x08006e57
 8006cb8:	08006e57 	.word	0x08006e57
 8006cbc:	08006dd5 	.word	0x08006dd5
 8006cc0:	08006e57 	.word	0x08006e57
 8006cc4:	08006e57 	.word	0x08006e57
 8006cc8:	08006e57 	.word	0x08006e57
 8006ccc:	08006e15 	.word	0x08006e15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fa8e 	bl	80071f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0208 	orr.w	r2, r2, #8
 8006cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0204 	bic.w	r2, r2, #4
 8006cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6999      	ldr	r1, [r3, #24]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	619a      	str	r2, [r3, #24]
      break;
 8006d0e:	e0a5      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fafe 	bl	8007318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6999      	ldr	r1, [r3, #24]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	021a      	lsls	r2, r3, #8
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	619a      	str	r2, [r3, #24]
      break;
 8006d50:	e084      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fb67 	bl	800742c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0208 	orr.w	r2, r2, #8
 8006d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0204 	bic.w	r2, r2, #4
 8006d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	61da      	str	r2, [r3, #28]
      break;
 8006d90:	e064      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbcf 	bl	800753c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69d9      	ldr	r1, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	61da      	str	r2, [r3, #28]
      break;
 8006dd2:	e043      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fc18 	bl	8007610 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e12:	e023      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fc5c 	bl	80076d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e54:	e002      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_TIM_ConfigClockSource+0x1c>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e0dc      	b.n	8007046 <HAL_TIM_ConfigClockSource+0x1d6>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4b6a      	ldr	r3, [pc, #424]	; (8007050 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a64      	ldr	r2, [pc, #400]	; (8007054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	f000 80a9 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006ec8:	4a62      	ldr	r2, [pc, #392]	; (8007054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f200 80ae 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ed0:	4a61      	ldr	r2, [pc, #388]	; (8007058 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	f000 80a1 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006ed8:	4a5f      	ldr	r2, [pc, #380]	; (8007058 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	f200 80a6 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ee0:	4a5e      	ldr	r2, [pc, #376]	; (800705c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	f000 8099 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006ee8:	4a5c      	ldr	r2, [pc, #368]	; (800705c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	f200 809e 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006ef0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ef4:	f000 8091 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006ef8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006efc:	f200 8096 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f04:	f000 8089 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0c:	f200 808e 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d03e      	beq.n	8006f94 <HAL_TIM_ConfigClockSource+0x124>
 8006f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1a:	f200 8087 	bhi.w	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	f000 8086 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1c2>
 8006f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2a:	d87f      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f2c:	2b70      	cmp	r3, #112	; 0x70
 8006f2e:	d01a      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0xf6>
 8006f30:	2b70      	cmp	r3, #112	; 0x70
 8006f32:	d87b      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f34:	2b60      	cmp	r3, #96	; 0x60
 8006f36:	d050      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x16a>
 8006f38:	2b60      	cmp	r3, #96	; 0x60
 8006f3a:	d877      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f3c:	2b50      	cmp	r3, #80	; 0x50
 8006f3e:	d03c      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x14a>
 8006f40:	2b50      	cmp	r3, #80	; 0x50
 8006f42:	d873      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d058      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x18a>
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d86f      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f4c:	2b30      	cmp	r3, #48	; 0x30
 8006f4e:	d064      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f50:	2b30      	cmp	r3, #48	; 0x30
 8006f52:	d86b      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d060      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d867      	bhi.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d05c      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f60:	2b10      	cmp	r3, #16
 8006f62:	d05a      	beq.n	800701a <HAL_TIM_ConfigClockSource+0x1aa>
 8006f64:	e062      	b.n	800702c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6899      	ldr	r1, [r3, #8]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f000 fc93 	bl	80078a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	609a      	str	r2, [r3, #8]
      break;
 8006f92:	e04f      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	6899      	ldr	r1, [r3, #8]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f000 fc7c 	bl	80078a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689a      	ldr	r2, [r3, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb6:	609a      	str	r2, [r3, #8]
      break;
 8006fb8:	e03c      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 fbec 	bl	80077a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2150      	movs	r1, #80	; 0x50
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fc46 	bl	8007864 <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e02c      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 fc0b 	bl	8007802 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2160      	movs	r1, #96	; 0x60
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fc36 	bl	8007864 <TIM_ITRx_SetConfig>
      break;
 8006ff8:	e01c      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6818      	ldr	r0, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	6859      	ldr	r1, [r3, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	461a      	mov	r2, r3
 8007008:	f000 fbcc 	bl	80077a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2140      	movs	r1, #64	; 0x40
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fc26 	bl	8007864 <TIM_ITRx_SetConfig>
      break;
 8007018:	e00c      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f000 fc1d 	bl	8007864 <TIM_ITRx_SetConfig>
      break;
 800702a:	e003      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
      break;
 8007030:	e000      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	ffceff88 	.word	0xffceff88
 8007054:	00100040 	.word	0x00100040
 8007058:	00100030 	.word	0x00100030
 800705c:	00100020 	.word	0x00100020

08007060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a40      	ldr	r2, [pc, #256]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e2:	d00f      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3d      	ldr	r2, [pc, #244]	; (80071dc <TIM_Base_SetConfig+0x118>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3a      	ldr	r2, [pc, #232]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d108      	bne.n	8007116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d01f      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007124:	d01b      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2c      	ldr	r2, [pc, #176]	; (80071dc <TIM_Base_SetConfig+0x118>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d017      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <TIM_Base_SetConfig+0x11c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <TIM_Base_SetConfig+0x120>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d00f      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a29      	ldr	r2, [pc, #164]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00b      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a28      	ldr	r2, [pc, #160]	; (80071ec <TIM_Base_SetConfig+0x128>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d007      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <TIM_Base_SetConfig+0x12c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d003      	beq.n	800715e <TIM_Base_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <TIM_Base_SetConfig+0x130>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d108      	bne.n	8007170 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a10      	ldr	r2, [pc, #64]	; (80071d8 <TIM_Base_SetConfig+0x114>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0xf8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <TIM_Base_SetConfig+0x124>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a11      	ldr	r2, [pc, #68]	; (80071ec <TIM_Base_SetConfig+0x128>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0xf8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a10      	ldr	r2, [pc, #64]	; (80071f0 <TIM_Base_SetConfig+0x12c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0xf8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a0f      	ldr	r2, [pc, #60]	; (80071f4 <TIM_Base_SetConfig+0x130>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d103      	bne.n	80071c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	615a      	str	r2, [r3, #20]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40010000 	.word	0x40010000
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40000c00 	.word	0x40000c00
 80071e8:	40010400 	.word	0x40010400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800

080071f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4b37      	ldr	r3, [pc, #220]	; (8007300 <TIM_OC1_SetConfig+0x108>)
 8007224:	4013      	ands	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2d      	ldr	r2, [pc, #180]	; (8007304 <TIM_OC1_SetConfig+0x10c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d00f      	beq.n	8007274 <TIM_OC1_SetConfig+0x7c>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <TIM_OC1_SetConfig+0x110>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_OC1_SetConfig+0x7c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2b      	ldr	r2, [pc, #172]	; (800730c <TIM_OC1_SetConfig+0x114>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_OC1_SetConfig+0x7c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <TIM_OC1_SetConfig+0x118>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC1_SetConfig+0x7c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <TIM_OC1_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0308 	bic.w	r3, r3, #8
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <TIM_OC1_SetConfig+0x10c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <TIM_OC1_SetConfig+0xbe>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <TIM_OC1_SetConfig+0x110>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d00b      	beq.n	80072b6 <TIM_OC1_SetConfig+0xbe>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a1a      	ldr	r2, [pc, #104]	; (800730c <TIM_OC1_SetConfig+0x114>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <TIM_OC1_SetConfig+0xbe>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <TIM_OC1_SetConfig+0x118>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d003      	beq.n	80072b6 <TIM_OC1_SetConfig+0xbe>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a18      	ldr	r2, [pc, #96]	; (8007314 <TIM_OC1_SetConfig+0x11c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	621a      	str	r2, [r3, #32]
}
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	fffeff8f 	.word	0xfffeff8f
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800

08007318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0210 	bic.w	r2, r3, #16
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4b34      	ldr	r3, [pc, #208]	; (8007414 <TIM_OC2_SetConfig+0xfc>)
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f023 0320 	bic.w	r3, r3, #32
 8007362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a29      	ldr	r2, [pc, #164]	; (8007418 <TIM_OC2_SetConfig+0x100>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC2_SetConfig+0x68>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a28      	ldr	r2, [pc, #160]	; (800741c <TIM_OC2_SetConfig+0x104>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10d      	bne.n	800739c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a1e      	ldr	r2, [pc, #120]	; (8007418 <TIM_OC2_SetConfig+0x100>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00f      	beq.n	80073c4 <TIM_OC2_SetConfig+0xac>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a1d      	ldr	r2, [pc, #116]	; (800741c <TIM_OC2_SetConfig+0x104>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00b      	beq.n	80073c4 <TIM_OC2_SetConfig+0xac>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a1c      	ldr	r2, [pc, #112]	; (8007420 <TIM_OC2_SetConfig+0x108>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d007      	beq.n	80073c4 <TIM_OC2_SetConfig+0xac>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1b      	ldr	r2, [pc, #108]	; (8007424 <TIM_OC2_SetConfig+0x10c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC2_SetConfig+0xac>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <TIM_OC2_SetConfig+0x110>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d113      	bne.n	80073ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	621a      	str	r2, [r3, #32]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	feff8fff 	.word	0xfeff8fff
 8007418:	40010000 	.word	0x40010000
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800

0800742c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4b33      	ldr	r3, [pc, #204]	; (8007524 <TIM_OC3_SetConfig+0xf8>)
 8007458:	4013      	ands	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a28      	ldr	r2, [pc, #160]	; (8007528 <TIM_OC3_SetConfig+0xfc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x66>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a27      	ldr	r2, [pc, #156]	; (800752c <TIM_OC3_SetConfig+0x100>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a1d      	ldr	r2, [pc, #116]	; (8007528 <TIM_OC3_SetConfig+0xfc>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_OC3_SetConfig+0xaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a1c      	ldr	r2, [pc, #112]	; (800752c <TIM_OC3_SetConfig+0x100>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_OC3_SetConfig+0xaa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <TIM_OC3_SetConfig+0x104>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_OC3_SetConfig+0xaa>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <TIM_OC3_SetConfig+0x108>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_OC3_SetConfig+0xaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a19      	ldr	r2, [pc, #100]	; (8007538 <TIM_OC3_SetConfig+0x10c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d113      	bne.n	80074fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	621a      	str	r2, [r3, #32]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	fffeff8f 	.word	0xfffeff8f
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800

0800753c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <TIM_OC4_SetConfig+0xbc>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a19      	ldr	r2, [pc, #100]	; (80075fc <TIM_OC4_SetConfig+0xc0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00f      	beq.n	80075bc <TIM_OC4_SetConfig+0x80>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a18      	ldr	r2, [pc, #96]	; (8007600 <TIM_OC4_SetConfig+0xc4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_OC4_SetConfig+0x80>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a17      	ldr	r2, [pc, #92]	; (8007604 <TIM_OC4_SetConfig+0xc8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_OC4_SetConfig+0x80>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a16      	ldr	r2, [pc, #88]	; (8007608 <TIM_OC4_SetConfig+0xcc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_OC4_SetConfig+0x80>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a15      	ldr	r2, [pc, #84]	; (800760c <TIM_OC4_SetConfig+0xd0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d109      	bne.n	80075d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	019b      	lsls	r3, r3, #6
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	feff8fff 	.word	0xfeff8fff
 80075fc:	40010000 	.word	0x40010000
 8007600:	40010400 	.word	0x40010400
 8007604:	40014000 	.word	0x40014000
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800

08007610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <TIM_OC5_SetConfig+0xb0>)
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <TIM_OC5_SetConfig+0xb4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00f      	beq.n	8007686 <TIM_OC5_SetConfig+0x76>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <TIM_OC5_SetConfig+0xb8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00b      	beq.n	8007686 <TIM_OC5_SetConfig+0x76>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a16      	ldr	r2, [pc, #88]	; (80076cc <TIM_OC5_SetConfig+0xbc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <TIM_OC5_SetConfig+0x76>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <TIM_OC5_SetConfig+0xc0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_OC5_SetConfig+0x76>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <TIM_OC5_SetConfig+0xc4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d109      	bne.n	800769a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800768c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	fffeff8f 	.word	0xfffeff8f
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40010400 	.word	0x40010400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	4b22      	ldr	r3, [pc, #136]	; (800778c <TIM_OC6_SetConfig+0xb4>)
 8007704:	4013      	ands	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	051b      	lsls	r3, r3, #20
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <TIM_OC6_SetConfig+0xb8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a18      	ldr	r2, [pc, #96]	; (8007794 <TIM_OC6_SetConfig+0xbc>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00b      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <TIM_OC6_SetConfig+0xc0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a16      	ldr	r2, [pc, #88]	; (800779c <TIM_OC6_SetConfig+0xc4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <TIM_OC6_SetConfig+0xc8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d109      	bne.n	8007764 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	feff8fff 	.word	0xfeff8fff
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800

080077a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	011b      	lsls	r3, r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 030a 	bic.w	r3, r3, #10
 80077e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007802:	b480      	push	{r7}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0210 	bic.w	r2, r3, #16
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800782c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800783e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	621a      	str	r2, [r3, #32]
}
 8007856:	bf00      	nop
 8007858:	371c      	adds	r7, #28
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
	...

08007864 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <TIM_ITRx_SetConfig+0x38>)
 8007878:	4013      	ands	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	f043 0307 	orr.w	r3, r3, #7
 8007886:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	609a      	str	r2, [r3, #8]
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	ffcfff8f 	.word	0xffcfff8f

080078a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	021a      	lsls	r2, r3, #8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	609a      	str	r2, [r3, #8]
}
 80078d4:	bf00      	nop
 80078d6:	371c      	adds	r7, #28
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 031f 	and.w	r3, r3, #31
 80078f2:	2201      	movs	r2, #1
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1a      	ldr	r2, [r3, #32]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	43db      	mvns	r3, r3
 8007902:	401a      	ands	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a1a      	ldr	r2, [r3, #32]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	431a      	orrs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
	...

0800792c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e06d      	b.n	8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a30      	ldr	r2, [pc, #192]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a2f      	ldr	r2, [pc, #188]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d108      	bne.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800797e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b6:	d01d      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a1a      	ldr	r2, [pc, #104]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a15      	ldr	r2, [pc, #84]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a16      	ldr	r2, [pc, #88]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d10c      	bne.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40010400 	.word	0x40010400
 8007a34:	40000400 	.word	0x40000400
 8007a38:	40000800 	.word	0x40000800
 8007a3c:	40000c00 	.word	0x40000c00
 8007a40:	40001800 	.word	0x40001800
 8007a44:	40014000 	.word	0x40014000

08007a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e065      	b.n	8007b30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	041b      	lsls	r3, r3, #16
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a16      	ldr	r2, [pc, #88]	; (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a14      	ldr	r2, [pc, #80]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d115      	bne.n	8007b1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	051b      	lsls	r3, r3, #20
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40010400 	.word	0x40010400

08007b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e042      	b.n	8007c18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7f9 fd31 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2224      	movs	r2, #36	; 0x24
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0201 	bic.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fcde 	bl	8008584 <UART_SetConfig>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e022      	b.n	8007c18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fa3a 	bl	8009054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 fac1 	bl	8009198 <UART_CheckIdleState>
 8007c16:	4603      	mov	r3, r0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b091      	sub	sp, #68	; 0x44
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	f040 808c 	bne.w	8007d52 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <HAL_UART_Transmit_IT+0x26>
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e084      	b.n	8007d54 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_UART_Transmit_IT+0x38>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e07d      	b.n	8007d54 <HAL_UART_Transmit_IT+0x134>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	88fa      	ldrh	r2, [r7, #6]
 8007c6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2221      	movs	r2, #33	; 0x21
 8007c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c94:	d12e      	bne.n	8007cf4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9e:	d107      	bne.n	8007cb0 <HAL_UART_Transmit_IT+0x90>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a2d      	ldr	r2, [pc, #180]	; (8007d60 <HAL_UART_Transmit_IT+0x140>)
 8007cac:	675a      	str	r2, [r3, #116]	; 0x74
 8007cae:	e002      	b.n	8007cb6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <HAL_UART_Transmit_IT+0x144>)
 8007cb4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cde:	637a      	str	r2, [r7, #52]	; 0x34
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e5      	bne.n	8007cbe <HAL_UART_Transmit_IT+0x9e>
 8007cf2:	e02c      	b.n	8007d4e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	d107      	bne.n	8007d0e <HAL_UART_Transmit_IT+0xee>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <HAL_UART_Transmit_IT+0x148>)
 8007d0a:	675a      	str	r2, [r3, #116]	; 0x74
 8007d0c:	e002      	b.n	8007d14 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4a16      	ldr	r2, [pc, #88]	; (8007d6c <HAL_UART_Transmit_IT+0x14c>)
 8007d12:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3a:	623b      	str	r3, [r7, #32]
 8007d3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69f9      	ldr	r1, [r7, #28]
 8007d40:	6a3a      	ldr	r2, [r7, #32]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
  }
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3744      	adds	r7, #68	; 0x44
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	08009967 	.word	0x08009967
 8007d64:	08009887 	.word	0x08009887
 8007d68:	080097c5 	.word	0x080097c5
 8007d6c:	0800970d 	.word	0x0800970d

08007d70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d142      	bne.n	8007e0e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <HAL_UART_Receive_IT+0x24>
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e03b      	b.n	8007e10 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d101      	bne.n	8007da6 <HAL_UART_Receive_IT+0x36>
 8007da2:	2302      	movs	r3, #2
 8007da4:	e034      	b.n	8007e10 <HAL_UART_Receive_IT+0xa0>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <HAL_UART_Receive_IT+0xa8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d01f      	beq.n	8007dfe <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d018      	beq.n	8007dfe <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	623b      	str	r3, [r7, #32]
 8007dec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	69f9      	ldr	r1, [r7, #28]
 8007df0:	6a3a      	ldr	r2, [r7, #32]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	461a      	mov	r2, r3
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 fadb 	bl	80093c0 <UART_Start_Receive_IT>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	e000      	b.n	8007e10 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e0e:	2302      	movs	r3, #2
  }
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	58000c00 	.word	0x58000c00

08007e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b0ba      	sub	sp, #232	; 0xe8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d11b      	bne.n	8007e90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d015      	beq.n	8007e90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d009      	beq.n	8007e90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 835a 	beq.w	800853a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
      }
      return;
 8007e8e:	e354      	b.n	800853a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 811f 	beq.w	80080d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e9e:	4b8b      	ldr	r3, [pc, #556]	; (80080cc <HAL_UART_IRQHandler+0x2b0>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ea6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007eaa:	4b89      	ldr	r3, [pc, #548]	; (80080d0 <HAL_UART_IRQHandler+0x2b4>)
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8112 	beq.w	80080d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <HAL_UART_IRQHandler+0xc8>
 8007ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d011      	beq.n	8007f14 <HAL_UART_IRQHandler+0xf8>
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2202      	movs	r2, #2
 8007f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0a:	f043 0204 	orr.w	r2, r3, #4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d011      	beq.n	8007f44 <HAL_UART_IRQHandler+0x128>
 8007f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2204      	movs	r2, #4
 8007f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3a:	f043 0202 	orr.w	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d017      	beq.n	8007f80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d105      	bne.n	8007f68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f60:	4b5a      	ldr	r3, [pc, #360]	; (80080cc <HAL_UART_IRQHandler+0x2b0>)
 8007f62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00b      	beq.n	8007f80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f76:	f043 0208 	orr.w	r2, r3, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d012      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x196>
 8007f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 82c0 	beq.w	800853e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d013      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d105      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d005      	beq.n	8008016 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800800a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800800e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008012:	2b00      	cmp	r3, #0
 8008014:	d04f      	beq.n	80080b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fafc 	bl	8009614 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d141      	bne.n	80080ae <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3308      	adds	r3, #8
 8008052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800805a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800806e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d9      	bne.n	800802a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d013      	beq.n	80080a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008082:	4a14      	ldr	r2, [pc, #80]	; (80080d4 <HAL_UART_IRQHandler+0x2b8>)
 8008084:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800808a:	4618      	mov	r0, r3
 800808c:	f7fa fa2a 	bl	80024e4 <HAL_DMA_Abort_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d017      	beq.n	80080c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	e00f      	b.n	80080c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa56 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	e00b      	b.n	80080c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa52 	bl	8008558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	e007      	b.n	80080c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa4e 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80080c4:	e23b      	b.n	800853e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c6:	bf00      	nop
    return;
 80080c8:	e239      	b.n	800853e <HAL_UART_IRQHandler+0x722>
 80080ca:	bf00      	nop
 80080cc:	10000001 	.word	0x10000001
 80080d0:	04000120 	.word	0x04000120
 80080d4:	080096e1 	.word	0x080096e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080dc:	2b01      	cmp	r3, #1
 80080de:	f040 81ce 	bne.w	800847e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 81c7 	beq.w	800847e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 81c0 	beq.w	800847e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2210      	movs	r2, #16
 8008104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	f040 813b 	bne.w	800838c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a8b      	ldr	r2, [pc, #556]	; (800834c <HAL_UART_IRQHandler+0x530>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d059      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a89      	ldr	r2, [pc, #548]	; (8008350 <HAL_UART_IRQHandler+0x534>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d053      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a87      	ldr	r2, [pc, #540]	; (8008354 <HAL_UART_IRQHandler+0x538>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d04d      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a85      	ldr	r2, [pc, #532]	; (8008358 <HAL_UART_IRQHandler+0x53c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d047      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a83      	ldr	r2, [pc, #524]	; (800835c <HAL_UART_IRQHandler+0x540>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d041      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a81      	ldr	r2, [pc, #516]	; (8008360 <HAL_UART_IRQHandler+0x544>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d03b      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a7f      	ldr	r2, [pc, #508]	; (8008364 <HAL_UART_IRQHandler+0x548>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d035      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7d      	ldr	r2, [pc, #500]	; (8008368 <HAL_UART_IRQHandler+0x54c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d02f      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a7b      	ldr	r2, [pc, #492]	; (800836c <HAL_UART_IRQHandler+0x550>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d029      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a79      	ldr	r2, [pc, #484]	; (8008370 <HAL_UART_IRQHandler+0x554>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d023      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a77      	ldr	r2, [pc, #476]	; (8008374 <HAL_UART_IRQHandler+0x558>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01d      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a75      	ldr	r2, [pc, #468]	; (8008378 <HAL_UART_IRQHandler+0x55c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d017      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a73      	ldr	r2, [pc, #460]	; (800837c <HAL_UART_IRQHandler+0x560>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d011      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a71      	ldr	r2, [pc, #452]	; (8008380 <HAL_UART_IRQHandler+0x564>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6f      	ldr	r2, [pc, #444]	; (8008384 <HAL_UART_IRQHandler+0x568>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d005      	beq.n	80081d6 <HAL_UART_IRQHandler+0x3ba>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6d      	ldr	r2, [pc, #436]	; (8008388 <HAL_UART_IRQHandler+0x56c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d105      	bne.n	80081e2 <HAL_UART_IRQHandler+0x3c6>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	e004      	b.n	80081ec <HAL_UART_IRQHandler+0x3d0>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 81a4 	beq.w	8008542 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008200:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008204:	429a      	cmp	r2, r3
 8008206:	f080 819c 	bcs.w	8008542 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821e:	f000 8086 	beq.w	800832e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800823a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800823e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800824c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008250:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1da      	bne.n	8008222 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3308      	adds	r3, #8
 8008272:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800827c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800827e:	f023 0301 	bic.w	r3, r3, #1
 8008282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3308      	adds	r3, #8
 800828c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008290:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008294:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008298:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e1      	bne.n	800826c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082b2:	e853 3f00 	ldrex	r3, [r3]
 80082b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e3      	bne.n	80082a8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008310:	65bb      	str	r3, [r7, #88]	; 0x58
 8008312:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800831e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e4      	bne.n	80082ee <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	4618      	mov	r0, r3
 800832a:	f7f9 fdbd 	bl	8001ea8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800833a:	b29b      	uxth	r3, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	b29b      	uxth	r3, r3
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f912 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008348:	e0fb      	b.n	8008542 <HAL_UART_IRQHandler+0x726>
 800834a:	bf00      	nop
 800834c:	40020010 	.word	0x40020010
 8008350:	40020028 	.word	0x40020028
 8008354:	40020040 	.word	0x40020040
 8008358:	40020058 	.word	0x40020058
 800835c:	40020070 	.word	0x40020070
 8008360:	40020088 	.word	0x40020088
 8008364:	400200a0 	.word	0x400200a0
 8008368:	400200b8 	.word	0x400200b8
 800836c:	40020410 	.word	0x40020410
 8008370:	40020428 	.word	0x40020428
 8008374:	40020440 	.word	0x40020440
 8008378:	40020458 	.word	0x40020458
 800837c:	40020470 	.word	0x40020470
 8008380:	40020488 	.word	0x40020488
 8008384:	400204a0 	.word	0x400204a0
 8008388:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008398:	b29b      	uxth	r3, r3
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80cc 	beq.w	8008546 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80083ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80c7 	beq.w	8008546 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083da:	647b      	str	r3, [r7, #68]	; 0x44
 80083dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e4      	bne.n	80083b8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	623b      	str	r3, [r7, #32]
   return(result);
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	4b54      	ldr	r3, [pc, #336]	; (8008554 <HAL_UART_IRQHandler+0x738>)
 8008402:	4013      	ands	r3, r2
 8008404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008412:	633a      	str	r2, [r7, #48]	; 0x30
 8008414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e3      	bne.n	80083ee <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	60fb      	str	r3, [r7, #12]
   return(result);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0310 	bic.w	r3, r3, #16
 800844e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	69b9      	ldr	r1, [r7, #24]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	617b      	str	r3, [r7, #20]
   return(result);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e4      	bne.n	800843a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f878 	bl	800856c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800847c:	e063      	b.n	8008546 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00e      	beq.n	80084a8 <HAL_UART_IRQHandler+0x68c>
 800848a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800848e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d008      	beq.n	80084a8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800849e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 ff5d 	bl	800a360 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a6:	e051      	b.n	800854c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d014      	beq.n	80084de <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d105      	bne.n	80084cc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d008      	beq.n	80084de <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d03a      	beq.n	800854a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
    }
    return;
 80084dc:	e035      	b.n	800854a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_UART_IRQHandler+0x6e2>
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 faaa 	bl	8009a50 <UART_EndTransmit_IT>
    return;
 80084fc:	e026      	b.n	800854c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <HAL_UART_IRQHandler+0x702>
 800850a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 ff36 	bl	800a388 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800851c:	e016      	b.n	800854c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <HAL_UART_IRQHandler+0x730>
 800852a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852e:	2b00      	cmp	r3, #0
 8008530:	da0c      	bge.n	800854c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 ff1e 	bl	800a374 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008538:	e008      	b.n	800854c <HAL_UART_IRQHandler+0x730>
      return;
 800853a:	bf00      	nop
 800853c:	e006      	b.n	800854c <HAL_UART_IRQHandler+0x730>
    return;
 800853e:	bf00      	nop
 8008540:	e004      	b.n	800854c <HAL_UART_IRQHandler+0x730>
      return;
 8008542:	bf00      	nop
 8008544:	e002      	b.n	800854c <HAL_UART_IRQHandler+0x730>
      return;
 8008546:	bf00      	nop
 8008548:	e000      	b.n	800854c <HAL_UART_IRQHandler+0x730>
    return;
 800854a:	bf00      	nop
  }
}
 800854c:	37e8      	adds	r7, #232	; 0xe8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	effffffe 	.word	0xeffffffe

08008558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008588:	b092      	sub	sp, #72	; 0x48
 800858a:	af00      	add	r7, sp, #0
 800858c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	431a      	orrs	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	431a      	orrs	r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	4bbe      	ldr	r3, [pc, #760]	; (80088ac <UART_SetConfig+0x328>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085bc:	430b      	orrs	r3, r1
 80085be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4ab3      	ldr	r2, [pc, #716]	; (80088b0 <UART_SetConfig+0x32c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d004      	beq.n	80085f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ec:	4313      	orrs	r3, r2
 80085ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	4baf      	ldr	r3, [pc, #700]	; (80088b4 <UART_SetConfig+0x330>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008600:	430b      	orrs	r3, r1
 8008602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	f023 010f 	bic.w	r1, r3, #15
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4aa6      	ldr	r2, [pc, #664]	; (80088b8 <UART_SetConfig+0x334>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d177      	bne.n	8008714 <UART_SetConfig+0x190>
 8008624:	4ba5      	ldr	r3, [pc, #660]	; (80088bc <UART_SetConfig+0x338>)
 8008626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800862c:	2b28      	cmp	r3, #40	; 0x28
 800862e:	d86d      	bhi.n	800870c <UART_SetConfig+0x188>
 8008630:	a201      	add	r2, pc, #4	; (adr r2, 8008638 <UART_SetConfig+0xb4>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	080086dd 	.word	0x080086dd
 800863c:	0800870d 	.word	0x0800870d
 8008640:	0800870d 	.word	0x0800870d
 8008644:	0800870d 	.word	0x0800870d
 8008648:	0800870d 	.word	0x0800870d
 800864c:	0800870d 	.word	0x0800870d
 8008650:	0800870d 	.word	0x0800870d
 8008654:	0800870d 	.word	0x0800870d
 8008658:	080086e5 	.word	0x080086e5
 800865c:	0800870d 	.word	0x0800870d
 8008660:	0800870d 	.word	0x0800870d
 8008664:	0800870d 	.word	0x0800870d
 8008668:	0800870d 	.word	0x0800870d
 800866c:	0800870d 	.word	0x0800870d
 8008670:	0800870d 	.word	0x0800870d
 8008674:	0800870d 	.word	0x0800870d
 8008678:	080086ed 	.word	0x080086ed
 800867c:	0800870d 	.word	0x0800870d
 8008680:	0800870d 	.word	0x0800870d
 8008684:	0800870d 	.word	0x0800870d
 8008688:	0800870d 	.word	0x0800870d
 800868c:	0800870d 	.word	0x0800870d
 8008690:	0800870d 	.word	0x0800870d
 8008694:	0800870d 	.word	0x0800870d
 8008698:	080086f5 	.word	0x080086f5
 800869c:	0800870d 	.word	0x0800870d
 80086a0:	0800870d 	.word	0x0800870d
 80086a4:	0800870d 	.word	0x0800870d
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	0800870d 	.word	0x0800870d
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	080086fd 	.word	0x080086fd
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	0800870d 	.word	0x0800870d
 80086c4:	0800870d 	.word	0x0800870d
 80086c8:	0800870d 	.word	0x0800870d
 80086cc:	0800870d 	.word	0x0800870d
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	0800870d 	.word	0x0800870d
 80086d8:	08008705 	.word	0x08008705
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e222      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e21e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e21a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e216      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80086fc:	2320      	movs	r3, #32
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e212      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e20e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e20a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a69      	ldr	r2, [pc, #420]	; (80088c0 <UART_SetConfig+0x33c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d130      	bne.n	8008780 <UART_SetConfig+0x1fc>
 800871e:	4b67      	ldr	r3, [pc, #412]	; (80088bc <UART_SetConfig+0x338>)
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b05      	cmp	r3, #5
 8008728:	d826      	bhi.n	8008778 <UART_SetConfig+0x1f4>
 800872a:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <UART_SetConfig+0x1ac>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008749 	.word	0x08008749
 8008734:	08008751 	.word	0x08008751
 8008738:	08008759 	.word	0x08008759
 800873c:	08008761 	.word	0x08008761
 8008740:	08008769 	.word	0x08008769
 8008744:	08008771 	.word	0x08008771
 8008748:	2300      	movs	r3, #0
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e1ec      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008750:	2304      	movs	r3, #4
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e1e8      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008758:	2308      	movs	r3, #8
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e1e4      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008760:	2310      	movs	r3, #16
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e1e0      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008768:	2320      	movs	r3, #32
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e1dc      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008770:	2340      	movs	r3, #64	; 0x40
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e1d8      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008778:	2380      	movs	r3, #128	; 0x80
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e1d4      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a4f      	ldr	r2, [pc, #316]	; (80088c4 <UART_SetConfig+0x340>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d130      	bne.n	80087ec <UART_SetConfig+0x268>
 800878a:	4b4c      	ldr	r3, [pc, #304]	; (80088bc <UART_SetConfig+0x338>)
 800878c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	2b05      	cmp	r3, #5
 8008794:	d826      	bhi.n	80087e4 <UART_SetConfig+0x260>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <UART_SetConfig+0x218>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	080087b5 	.word	0x080087b5
 80087a0:	080087bd 	.word	0x080087bd
 80087a4:	080087c5 	.word	0x080087c5
 80087a8:	080087cd 	.word	0x080087cd
 80087ac:	080087d5 	.word	0x080087d5
 80087b0:	080087dd 	.word	0x080087dd
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e1b6      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087bc:	2304      	movs	r3, #4
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c2:	e1b2      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087c4:	2308      	movs	r3, #8
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e1ae      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087cc:	2310      	movs	r3, #16
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e1aa      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087d4:	2320      	movs	r3, #32
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e1a6      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087dc:	2340      	movs	r3, #64	; 0x40
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e1a2      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087e4:	2380      	movs	r3, #128	; 0x80
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e19e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a35      	ldr	r2, [pc, #212]	; (80088c8 <UART_SetConfig+0x344>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d130      	bne.n	8008858 <UART_SetConfig+0x2d4>
 80087f6:	4b31      	ldr	r3, [pc, #196]	; (80088bc <UART_SetConfig+0x338>)
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	2b05      	cmp	r3, #5
 8008800:	d826      	bhi.n	8008850 <UART_SetConfig+0x2cc>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <UART_SetConfig+0x284>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008821 	.word	0x08008821
 800880c:	08008829 	.word	0x08008829
 8008810:	08008831 	.word	0x08008831
 8008814:	08008839 	.word	0x08008839
 8008818:	08008841 	.word	0x08008841
 800881c:	08008849 	.word	0x08008849
 8008820:	2300      	movs	r3, #0
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e180      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008828:	2304      	movs	r3, #4
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e17c      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008830:	2308      	movs	r3, #8
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e178      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008838:	2310      	movs	r3, #16
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e174      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008840:	2320      	movs	r3, #32
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e170      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008848:	2340      	movs	r3, #64	; 0x40
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e16c      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008850:	2380      	movs	r3, #128	; 0x80
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e168      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <UART_SetConfig+0x348>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d142      	bne.n	80088e8 <UART_SetConfig+0x364>
 8008862:	4b16      	ldr	r3, [pc, #88]	; (80088bc <UART_SetConfig+0x338>)
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b05      	cmp	r3, #5
 800886c:	d838      	bhi.n	80088e0 <UART_SetConfig+0x35c>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <UART_SetConfig+0x2f0>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	0800888d 	.word	0x0800888d
 8008878:	08008895 	.word	0x08008895
 800887c:	0800889d 	.word	0x0800889d
 8008880:	080088a5 	.word	0x080088a5
 8008884:	080088d1 	.word	0x080088d1
 8008888:	080088d9 	.word	0x080088d9
 800888c:	2300      	movs	r3, #0
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e14a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008894:	2304      	movs	r3, #4
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e146      	b.n	8008b2a <UART_SetConfig+0x5a6>
 800889c:	2308      	movs	r3, #8
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e142      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80088a4:	2310      	movs	r3, #16
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e13e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80088ac:	cfff69f3 	.word	0xcfff69f3
 80088b0:	58000c00 	.word	0x58000c00
 80088b4:	11fff4ff 	.word	0x11fff4ff
 80088b8:	40011000 	.word	0x40011000
 80088bc:	58024400 	.word	0x58024400
 80088c0:	40004400 	.word	0x40004400
 80088c4:	40004800 	.word	0x40004800
 80088c8:	40004c00 	.word	0x40004c00
 80088cc:	40005000 	.word	0x40005000
 80088d0:	2320      	movs	r3, #32
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e128      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e124      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80088e0:	2380      	movs	r3, #128	; 0x80
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e120      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4acb      	ldr	r2, [pc, #812]	; (8008c1c <UART_SetConfig+0x698>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d176      	bne.n	80089e0 <UART_SetConfig+0x45c>
 80088f2:	4bcb      	ldr	r3, [pc, #812]	; (8008c20 <UART_SetConfig+0x69c>)
 80088f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088fa:	2b28      	cmp	r3, #40	; 0x28
 80088fc:	d86c      	bhi.n	80089d8 <UART_SetConfig+0x454>
 80088fe:	a201      	add	r2, pc, #4	; (adr r2, 8008904 <UART_SetConfig+0x380>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	080089a9 	.word	0x080089a9
 8008908:	080089d9 	.word	0x080089d9
 800890c:	080089d9 	.word	0x080089d9
 8008910:	080089d9 	.word	0x080089d9
 8008914:	080089d9 	.word	0x080089d9
 8008918:	080089d9 	.word	0x080089d9
 800891c:	080089d9 	.word	0x080089d9
 8008920:	080089d9 	.word	0x080089d9
 8008924:	080089b1 	.word	0x080089b1
 8008928:	080089d9 	.word	0x080089d9
 800892c:	080089d9 	.word	0x080089d9
 8008930:	080089d9 	.word	0x080089d9
 8008934:	080089d9 	.word	0x080089d9
 8008938:	080089d9 	.word	0x080089d9
 800893c:	080089d9 	.word	0x080089d9
 8008940:	080089d9 	.word	0x080089d9
 8008944:	080089b9 	.word	0x080089b9
 8008948:	080089d9 	.word	0x080089d9
 800894c:	080089d9 	.word	0x080089d9
 8008950:	080089d9 	.word	0x080089d9
 8008954:	080089d9 	.word	0x080089d9
 8008958:	080089d9 	.word	0x080089d9
 800895c:	080089d9 	.word	0x080089d9
 8008960:	080089d9 	.word	0x080089d9
 8008964:	080089c1 	.word	0x080089c1
 8008968:	080089d9 	.word	0x080089d9
 800896c:	080089d9 	.word	0x080089d9
 8008970:	080089d9 	.word	0x080089d9
 8008974:	080089d9 	.word	0x080089d9
 8008978:	080089d9 	.word	0x080089d9
 800897c:	080089d9 	.word	0x080089d9
 8008980:	080089d9 	.word	0x080089d9
 8008984:	080089c9 	.word	0x080089c9
 8008988:	080089d9 	.word	0x080089d9
 800898c:	080089d9 	.word	0x080089d9
 8008990:	080089d9 	.word	0x080089d9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089d9 	.word	0x080089d9
 800899c:	080089d9 	.word	0x080089d9
 80089a0:	080089d9 	.word	0x080089d9
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e0bc      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e0b8      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e0b4      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e0b0      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089c8:	2320      	movs	r3, #32
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e0ac      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e0a8      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e0a4      	b.n	8008b2a <UART_SetConfig+0x5a6>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a8f      	ldr	r2, [pc, #572]	; (8008c24 <UART_SetConfig+0x6a0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d130      	bne.n	8008a4c <UART_SetConfig+0x4c8>
 80089ea:	4b8d      	ldr	r3, [pc, #564]	; (8008c20 <UART_SetConfig+0x69c>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d826      	bhi.n	8008a44 <UART_SetConfig+0x4c0>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x478>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	08008a25 	.word	0x08008a25
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a35 	.word	0x08008a35
 8008a10:	08008a3d 	.word	0x08008a3d
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e086      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a22:	e082      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a24:	2308      	movs	r3, #8
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e07e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e07a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a34:	2320      	movs	r3, #32
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e076      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e072      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e06e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a75      	ldr	r2, [pc, #468]	; (8008c28 <UART_SetConfig+0x6a4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d130      	bne.n	8008ab8 <UART_SetConfig+0x534>
 8008a56:	4b72      	ldr	r3, [pc, #456]	; (8008c20 <UART_SetConfig+0x69c>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b05      	cmp	r3, #5
 8008a60:	d826      	bhi.n	8008ab0 <UART_SetConfig+0x52c>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <UART_SetConfig+0x4e4>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008a91 	.word	0x08008a91
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008aa1 	.word	0x08008aa1
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e050      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e04c      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e048      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e044      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e040      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e03c      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e038      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5b      	ldr	r2, [pc, #364]	; (8008c2c <UART_SetConfig+0x6a8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d130      	bne.n	8008b24 <UART_SetConfig+0x5a0>
 8008ac2:	4b57      	ldr	r3, [pc, #348]	; (8008c20 <UART_SetConfig+0x69c>)
 8008ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d826      	bhi.n	8008b1c <UART_SetConfig+0x598>
 8008ace:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0x550>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008aed 	.word	0x08008aed
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b15 	.word	0x08008b15
 8008aec:	2302      	movs	r3, #2
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e01a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008af4:	2304      	movs	r3, #4
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e016      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008afc:	2308      	movs	r3, #8
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e012      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e00e      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e00a      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008b14:	2340      	movs	r3, #64	; 0x40
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e006      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008b1c:	2380      	movs	r3, #128	; 0x80
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e002      	b.n	8008b2a <UART_SetConfig+0x5a6>
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a3f      	ldr	r2, [pc, #252]	; (8008c2c <UART_SetConfig+0x6a8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	f040 80f8 	bne.w	8008d26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	dc46      	bgt.n	8008bcc <UART_SetConfig+0x648>
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	f2c0 8082 	blt.w	8008c48 <UART_SetConfig+0x6c4>
 8008b44:	3b02      	subs	r3, #2
 8008b46:	2b1e      	cmp	r3, #30
 8008b48:	d87e      	bhi.n	8008c48 <UART_SetConfig+0x6c4>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x5cc>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008bd3 	.word	0x08008bd3
 8008b54:	08008c49 	.word	0x08008c49
 8008b58:	08008bdb 	.word	0x08008bdb
 8008b5c:	08008c49 	.word	0x08008c49
 8008b60:	08008c49 	.word	0x08008c49
 8008b64:	08008c49 	.word	0x08008c49
 8008b68:	08008beb 	.word	0x08008beb
 8008b6c:	08008c49 	.word	0x08008c49
 8008b70:	08008c49 	.word	0x08008c49
 8008b74:	08008c49 	.word	0x08008c49
 8008b78:	08008c49 	.word	0x08008c49
 8008b7c:	08008c49 	.word	0x08008c49
 8008b80:	08008c49 	.word	0x08008c49
 8008b84:	08008c49 	.word	0x08008c49
 8008b88:	08008bfb 	.word	0x08008bfb
 8008b8c:	08008c49 	.word	0x08008c49
 8008b90:	08008c49 	.word	0x08008c49
 8008b94:	08008c49 	.word	0x08008c49
 8008b98:	08008c49 	.word	0x08008c49
 8008b9c:	08008c49 	.word	0x08008c49
 8008ba0:	08008c49 	.word	0x08008c49
 8008ba4:	08008c49 	.word	0x08008c49
 8008ba8:	08008c49 	.word	0x08008c49
 8008bac:	08008c49 	.word	0x08008c49
 8008bb0:	08008c49 	.word	0x08008c49
 8008bb4:	08008c49 	.word	0x08008c49
 8008bb8:	08008c49 	.word	0x08008c49
 8008bbc:	08008c49 	.word	0x08008c49
 8008bc0:	08008c49 	.word	0x08008c49
 8008bc4:	08008c49 	.word	0x08008c49
 8008bc8:	08008c3b 	.word	0x08008c3b
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d037      	beq.n	8008c40 <UART_SetConfig+0x6bc>
 8008bd0:	e03a      	b.n	8008c48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008bd2:	f7fc f913 	bl	8004dfc <HAL_RCCEx_GetD3PCLK1Freq>
 8008bd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bd8:	e03c      	b.n	8008c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fc f922 	bl	8004e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be8:	e034      	b.n	8008c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bea:	f107 0318 	add.w	r3, r7, #24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fc fa6e 	bl	80050d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf8:	e02c      	b.n	8008c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <UART_SetConfig+0x69c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d016      	beq.n	8008c34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c06:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <UART_SetConfig+0x69c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <UART_SetConfig+0x6ac>)
 8008c12:	fa22 f303 	lsr.w	r3, r2, r3
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c18:	e01c      	b.n	8008c54 <UART_SetConfig+0x6d0>
 8008c1a:	bf00      	nop
 8008c1c:	40011400 	.word	0x40011400
 8008c20:	58024400 	.word	0x58024400
 8008c24:	40007800 	.word	0x40007800
 8008c28:	40007c00 	.word	0x40007c00
 8008c2c:	58000c00 	.word	0x58000c00
 8008c30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c34:	4b9d      	ldr	r3, [pc, #628]	; (8008eac <UART_SetConfig+0x928>)
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c38:	e00c      	b.n	8008c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c3a:	4b9d      	ldr	r3, [pc, #628]	; (8008eb0 <UART_SetConfig+0x92c>)
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e009      	b.n	8008c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c46:	e005      	b.n	8008c54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 81de 	beq.w	8009018 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	4a94      	ldr	r2, [pc, #592]	; (8008eb4 <UART_SetConfig+0x930>)
 8008c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c6e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	4413      	add	r3, r2
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d305      	bcc.n	8008c8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008c92:	e1c1      	b.n	8009018 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c96:	2200      	movs	r2, #0
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	4a84      	ldr	r2, [pc, #528]	; (8008eb4 <UART_SetConfig+0x930>)
 8008ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008cb6:	f7f7 fb6b 	bl	8000390 <__aeabi_uldivmod>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	020b      	lsls	r3, r1, #8
 8008ccc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cd0:	0202      	lsls	r2, r0, #8
 8008cd2:	6979      	ldr	r1, [r7, #20]
 8008cd4:	6849      	ldr	r1, [r1, #4]
 8008cd6:	0849      	lsrs	r1, r1, #1
 8008cd8:	2000      	movs	r0, #0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4605      	mov	r5, r0
 8008cde:	eb12 0804 	adds.w	r8, r2, r4
 8008ce2:	eb43 0905 	adc.w	r9, r3, r5
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	469a      	mov	sl, r3
 8008cee:	4693      	mov	fp, r2
 8008cf0:	4652      	mov	r2, sl
 8008cf2:	465b      	mov	r3, fp
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 fb4a 	bl	8000390 <__aeabi_uldivmod>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4613      	mov	r3, r2
 8008d02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d0a:	d308      	bcc.n	8008d1e <UART_SetConfig+0x79a>
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d12:	d204      	bcs.n	8008d1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d1a:	60da      	str	r2, [r3, #12]
 8008d1c:	e17c      	b.n	8009018 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d24:	e178      	b.n	8009018 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2e:	f040 80c5 	bne.w	8008ebc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	dc48      	bgt.n	8008dcc <UART_SetConfig+0x848>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	db7b      	blt.n	8008e36 <UART_SetConfig+0x8b2>
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	d879      	bhi.n	8008e36 <UART_SetConfig+0x8b2>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x7c4>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008ddb 	.word	0x08008ddb
 8008d50:	08008e37 	.word	0x08008e37
 8008d54:	08008e37 	.word	0x08008e37
 8008d58:	08008de3 	.word	0x08008de3
 8008d5c:	08008e37 	.word	0x08008e37
 8008d60:	08008e37 	.word	0x08008e37
 8008d64:	08008e37 	.word	0x08008e37
 8008d68:	08008df3 	.word	0x08008df3
 8008d6c:	08008e37 	.word	0x08008e37
 8008d70:	08008e37 	.word	0x08008e37
 8008d74:	08008e37 	.word	0x08008e37
 8008d78:	08008e37 	.word	0x08008e37
 8008d7c:	08008e37 	.word	0x08008e37
 8008d80:	08008e37 	.word	0x08008e37
 8008d84:	08008e37 	.word	0x08008e37
 8008d88:	08008e03 	.word	0x08008e03
 8008d8c:	08008e37 	.word	0x08008e37
 8008d90:	08008e37 	.word	0x08008e37
 8008d94:	08008e37 	.word	0x08008e37
 8008d98:	08008e37 	.word	0x08008e37
 8008d9c:	08008e37 	.word	0x08008e37
 8008da0:	08008e37 	.word	0x08008e37
 8008da4:	08008e37 	.word	0x08008e37
 8008da8:	08008e37 	.word	0x08008e37
 8008dac:	08008e37 	.word	0x08008e37
 8008db0:	08008e37 	.word	0x08008e37
 8008db4:	08008e37 	.word	0x08008e37
 8008db8:	08008e37 	.word	0x08008e37
 8008dbc:	08008e37 	.word	0x08008e37
 8008dc0:	08008e37 	.word	0x08008e37
 8008dc4:	08008e37 	.word	0x08008e37
 8008dc8:	08008e29 	.word	0x08008e29
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d02e      	beq.n	8008e2e <UART_SetConfig+0x8aa>
 8008dd0:	e031      	b.n	8008e36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd2:	f7fb f8a1 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8008dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dd8:	e033      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dda:	f7fb f8b3 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8008dde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008de0:	e02f      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fc f81e 	bl	8004e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df0:	e027      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df2:	f107 0318 	add.w	r3, r7, #24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fc f96a 	bl	80050d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e00:	e01f      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e02:	4b2d      	ldr	r3, [pc, #180]	; (8008eb8 <UART_SetConfig+0x934>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0320 	and.w	r3, r3, #32
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e0e:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <UART_SetConfig+0x934>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	08db      	lsrs	r3, r3, #3
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	4a24      	ldr	r2, [pc, #144]	; (8008eac <UART_SetConfig+0x928>)
 8008e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e20:	e00f      	b.n	8008e42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e22:	4b22      	ldr	r3, [pc, #136]	; (8008eac <UART_SetConfig+0x928>)
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e26:	e00c      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <UART_SetConfig+0x92c>)
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2c:	e009      	b.n	8008e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e34:	e005      	b.n	8008e42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80e7 	beq.w	8009018 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <UART_SetConfig+0x930>)
 8008e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e54:	461a      	mov	r2, r3
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5c:	005a      	lsls	r2, r3, #1
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d916      	bls.n	8008ea4 <UART_SetConfig+0x920>
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d212      	bcs.n	8008ea4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f023 030f 	bic.w	r3, r3, #15
 8008e86:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	085b      	lsrs	r3, r3, #1
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e96:	4313      	orrs	r3, r2
 8008e98:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008ea0:	60da      	str	r2, [r3, #12]
 8008ea2:	e0b9      	b.n	8009018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008eaa:	e0b5      	b.n	8009018 <UART_SetConfig+0xa94>
 8008eac:	03d09000 	.word	0x03d09000
 8008eb0:	003d0900 	.word	0x003d0900
 8008eb4:	0800b6f0 	.word	0x0800b6f0
 8008eb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ebc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	dc49      	bgt.n	8008f58 <UART_SetConfig+0x9d4>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	db7c      	blt.n	8008fc2 <UART_SetConfig+0xa3e>
 8008ec8:	2b20      	cmp	r3, #32
 8008eca:	d87a      	bhi.n	8008fc2 <UART_SetConfig+0xa3e>
 8008ecc:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x950>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008f5f 	.word	0x08008f5f
 8008ed8:	08008f67 	.word	0x08008f67
 8008edc:	08008fc3 	.word	0x08008fc3
 8008ee0:	08008fc3 	.word	0x08008fc3
 8008ee4:	08008f6f 	.word	0x08008f6f
 8008ee8:	08008fc3 	.word	0x08008fc3
 8008eec:	08008fc3 	.word	0x08008fc3
 8008ef0:	08008fc3 	.word	0x08008fc3
 8008ef4:	08008f7f 	.word	0x08008f7f
 8008ef8:	08008fc3 	.word	0x08008fc3
 8008efc:	08008fc3 	.word	0x08008fc3
 8008f00:	08008fc3 	.word	0x08008fc3
 8008f04:	08008fc3 	.word	0x08008fc3
 8008f08:	08008fc3 	.word	0x08008fc3
 8008f0c:	08008fc3 	.word	0x08008fc3
 8008f10:	08008fc3 	.word	0x08008fc3
 8008f14:	08008f8f 	.word	0x08008f8f
 8008f18:	08008fc3 	.word	0x08008fc3
 8008f1c:	08008fc3 	.word	0x08008fc3
 8008f20:	08008fc3 	.word	0x08008fc3
 8008f24:	08008fc3 	.word	0x08008fc3
 8008f28:	08008fc3 	.word	0x08008fc3
 8008f2c:	08008fc3 	.word	0x08008fc3
 8008f30:	08008fc3 	.word	0x08008fc3
 8008f34:	08008fc3 	.word	0x08008fc3
 8008f38:	08008fc3 	.word	0x08008fc3
 8008f3c:	08008fc3 	.word	0x08008fc3
 8008f40:	08008fc3 	.word	0x08008fc3
 8008f44:	08008fc3 	.word	0x08008fc3
 8008f48:	08008fc3 	.word	0x08008fc3
 8008f4c:	08008fc3 	.word	0x08008fc3
 8008f50:	08008fc3 	.word	0x08008fc3
 8008f54:	08008fb5 	.word	0x08008fb5
 8008f58:	2b40      	cmp	r3, #64	; 0x40
 8008f5a:	d02e      	beq.n	8008fba <UART_SetConfig+0xa36>
 8008f5c:	e031      	b.n	8008fc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f5e:	f7fa ffdb 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8008f62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f64:	e033      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f66:	f7fa ffed 	bl	8003f44 <HAL_RCC_GetPCLK2Freq>
 8008f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f6c:	e02f      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fb ff58 	bl	8004e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7c:	e027      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7e:	f107 0318 	add.w	r3, r7, #24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fc f8a4 	bl	80050d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f8c:	e01f      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f8e:	4b2d      	ldr	r3, [pc, #180]	; (8009044 <UART_SetConfig+0xac0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f9a:	4b2a      	ldr	r3, [pc, #168]	; (8009044 <UART_SetConfig+0xac0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	08db      	lsrs	r3, r3, #3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	4a28      	ldr	r2, [pc, #160]	; (8009048 <UART_SetConfig+0xac4>)
 8008fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fac:	e00f      	b.n	8008fce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008fae:	4b26      	ldr	r3, [pc, #152]	; (8009048 <UART_SetConfig+0xac4>)
 8008fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb2:	e00c      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fb4:	4b25      	ldr	r3, [pc, #148]	; (800904c <UART_SetConfig+0xac8>)
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb8:	e009      	b.n	8008fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc0:	e005      	b.n	8008fce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008fcc:	bf00      	nop
    }

    if (pclk != 0U)
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d021      	beq.n	8009018 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	; (8009050 <UART_SetConfig+0xacc>)
 8008fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	085b      	lsrs	r3, r3, #1
 8008fec:	441a      	add	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	2b0f      	cmp	r3, #15
 8008ffc:	d909      	bls.n	8009012 <UART_SetConfig+0xa8e>
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009004:	d205      	bcs.n	8009012 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	b29a      	uxth	r2, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60da      	str	r2, [r3, #12]
 8009010:	e002      	b.n	8009018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2201      	movs	r2, #1
 800901c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2201      	movs	r2, #1
 8009024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2200      	movs	r2, #0
 800902c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	2200      	movs	r2, #0
 8009032:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009034:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009038:	4618      	mov	r0, r3
 800903a:	3748      	adds	r7, #72	; 0x48
 800903c:	46bd      	mov	sp, r7
 800903e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009042:	bf00      	nop
 8009044:	58024400 	.word	0x58024400
 8009048:	03d09000 	.word	0x03d09000
 800904c:	003d0900 	.word	0x003d0900
 8009050:	0800b6f0 	.word	0x0800b6f0

08009054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	430a      	orrs	r2, r1
 800909e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	f003 0310 	and.w	r3, r3, #16
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01a      	beq.n	800916a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009152:	d10a      	bne.n	800916a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	605a      	str	r2, [r3, #4]
  }
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af02      	add	r7, sp, #8
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091a8:	f7f8 fcb6 	bl	8001b18 <HAL_GetTick>
 80091ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0308 	and.w	r3, r3, #8
 80091b8:	2b08      	cmp	r3, #8
 80091ba:	d10e      	bne.n	80091da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f82f 	bl	800922e <UART_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e025      	b.n	8009226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d10e      	bne.n	8009206 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f819 	bl	800922e <UART_WaitOnFlagUntilTimeout>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e00f      	b.n	8009226 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b09c      	sub	sp, #112	; 0x70
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	603b      	str	r3, [r7, #0]
 800923a:	4613      	mov	r3, r2
 800923c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800923e:	e0a9      	b.n	8009394 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009246:	f000 80a5 	beq.w	8009394 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800924a:	f7f8 fc65 	bl	8001b18 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009256:	429a      	cmp	r2, r3
 8009258:	d302      	bcc.n	8009260 <UART_WaitOnFlagUntilTimeout+0x32>
 800925a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800925c:	2b00      	cmp	r3, #0
 800925e:	d140      	bne.n	80092e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009274:	667b      	str	r3, [r7, #100]	; 0x64
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009280:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800928c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e6      	bne.n	8009260 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	f023 0301 	bic.w	r3, r3, #1
 80092a8:	663b      	str	r3, [r7, #96]	; 0x60
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80092b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e5      	bne.n	8009292 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2220      	movs	r2, #32
 80092d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e069      	b.n	80093b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d051      	beq.n	8009394 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092fe:	d149      	bne.n	8009394 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009308:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800931e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
 800932a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800932e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e6      	bne.n	800930a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	613b      	str	r3, [r7, #16]
   return(result);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f023 0301 	bic.w	r3, r3, #1
 8009352:	66bb      	str	r3, [r7, #104]	; 0x68
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3308      	adds	r3, #8
 800935a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800935c:	623a      	str	r2, [r7, #32]
 800935e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69f9      	ldr	r1, [r7, #28]
 8009362:	6a3a      	ldr	r2, [r7, #32]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	61bb      	str	r3, [r7, #24]
   return(result);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e5      	bne.n	800933c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e010      	b.n	80093b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69da      	ldr	r2, [r3, #28]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	4013      	ands	r3, r2
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	bf0c      	ite	eq
 80093a4:	2301      	moveq	r3, #1
 80093a6:	2300      	movne	r3, #0
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	f43f af46 	beq.w	8009240 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3770      	adds	r7, #112	; 0x70
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b0a3      	sub	sp, #140	; 0x8c
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	88fa      	ldrh	r2, [r7, #6]
 80093d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	88fa      	ldrh	r2, [r7, #6]
 80093e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f2:	d10e      	bne.n	8009412 <UART_Start_Receive_IT+0x52>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <UART_Start_Receive_IT+0x48>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009406:	e02d      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	22ff      	movs	r2, #255	; 0xff
 800940c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009410:	e028      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10d      	bne.n	8009436 <UART_Start_Receive_IT+0x76>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <UART_Start_Receive_IT+0x6c>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800942a:	e01b      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	227f      	movs	r2, #127	; 0x7f
 8009430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009434:	e016      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800943e:	d10d      	bne.n	800945c <UART_Start_Receive_IT+0x9c>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <UART_Start_Receive_IT+0x92>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	227f      	movs	r2, #127	; 0x7f
 800944c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009450:	e008      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	223f      	movs	r2, #63	; 0x3f
 8009456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800945a:	e003      	b.n	8009464 <UART_Start_Receive_IT+0xa4>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2222      	movs	r2, #34	; 0x22
 8009470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009486:	f043 0301 	orr.w	r3, r3, #1
 800948a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009498:	673a      	str	r2, [r7, #112]	; 0x70
 800949a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800949e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80094a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e3      	bne.n	8009474 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b4:	d153      	bne.n	800955e <UART_Start_Receive_IT+0x19e>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d34d      	bcc.n	800955e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ca:	d107      	bne.n	80094dc <UART_Start_Receive_IT+0x11c>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4a4b      	ldr	r2, [pc, #300]	; (8009604 <UART_Start_Receive_IT+0x244>)
 80094d8:	671a      	str	r2, [r3, #112]	; 0x70
 80094da:	e002      	b.n	80094e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4a4a      	ldr	r2, [pc, #296]	; (8009608 <UART_Start_Receive_IT+0x248>)
 80094e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009516:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800951a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e4      	bne.n	80094f2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800953e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009548:	64ba      	str	r2, [r7, #72]	; 0x48
 800954a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800954e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e5      	bne.n	8009528 <UART_Start_Receive_IT+0x168>
 800955c:	e04a      	b.n	80095f4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009566:	d107      	bne.n	8009578 <UART_Start_Receive_IT+0x1b8>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d103      	bne.n	8009578 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a26      	ldr	r2, [pc, #152]	; (800960c <UART_Start_Receive_IT+0x24c>)
 8009574:	671a      	str	r2, [r3, #112]	; 0x70
 8009576:	e002      	b.n	800957e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4a25      	ldr	r2, [pc, #148]	; (8009610 <UART_Start_Receive_IT+0x250>)
 800957c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d019      	beq.n	80095c2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80095a2:	677b      	str	r3, [r7, #116]	; 0x74
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095ac:	637b      	str	r3, [r7, #52]	; 0x34
 80095ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e6      	bne.n	800958e <UART_Start_Receive_IT+0x1ce>
 80095c0:	e018      	b.n	80095f4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f043 0320 	orr.w	r3, r3, #32
 80095d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095e0:	623b      	str	r3, [r7, #32]
 80095e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	6a3a      	ldr	r2, [r7, #32]
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	378c      	adds	r7, #140	; 0x8c
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	0800a061 	.word	0x0800a061
 8009608:	08009d69 	.word	0x08009d69
 800960c:	08009c07 	.word	0x08009c07
 8009610:	08009aa7 	.word	0x08009aa7

08009614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b095      	sub	sp, #84	; 0x54
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963a:	643b      	str	r3, [r7, #64]	; 0x40
 800963c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e6      	bne.n	800961c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	61fb      	str	r3, [r7, #28]
   return(result);
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <UART_EndRxTransfer+0xc8>)
 8009662:	4013      	ands	r3, r2
 8009664:	64bb      	str	r3, [r7, #72]	; 0x48
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800966e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e5      	bne.n	800964e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009686:	2b01      	cmp	r3, #1
 8009688:	d118      	bne.n	80096bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	60bb      	str	r3, [r7, #8]
   return(result);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f023 0310 	bic.w	r3, r3, #16
 800969e:	647b      	str	r3, [r7, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	461a      	mov	r2, r3
 80096a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6979      	ldr	r1, [r7, #20]
 80096ae:	69ba      	ldr	r2, [r7, #24]
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	613b      	str	r3, [r7, #16]
   return(result);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e6      	bne.n	800968a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80096d0:	bf00      	nop
 80096d2:	3754      	adds	r7, #84	; 0x54
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	effffffe 	.word	0xeffffffe

080096e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7fe ff2a 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b08f      	sub	sp, #60	; 0x3c
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800971a:	2b21      	cmp	r3, #33	; 0x21
 800971c:	d14c      	bne.n	80097b8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009724:	b29b      	uxth	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d132      	bne.n	8009790 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	61fb      	str	r3, [r7, #28]
   return(result);
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
 8009746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800974e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e6      	bne.n	800972a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	60bb      	str	r3, [r7, #8]
   return(result);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009770:	633b      	str	r3, [r7, #48]	; 0x30
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	61bb      	str	r3, [r7, #24]
 800977c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6979      	ldr	r1, [r7, #20]
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	613b      	str	r3, [r7, #16]
   return(result);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e6      	bne.n	800975c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800978e:	e013      	b.n	80097b8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009794:	781a      	ldrb	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	1c5a      	adds	r2, r3, #1
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	3b01      	subs	r3, #1
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80097b8:	bf00      	nop
 80097ba:	373c      	adds	r7, #60	; 0x3c
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b091      	sub	sp, #68	; 0x44
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097d2:	2b21      	cmp	r3, #33	; 0x21
 80097d4:	d151      	bne.n	800987a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097dc:	b29b      	uxth	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d132      	bne.n	8009848 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	623b      	str	r3, [r7, #32]
   return(result);
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
 8009802:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e6      	bne.n	80097e2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	60fb      	str	r3, [r7, #12]
   return(result);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	69b9      	ldr	r1, [r7, #24]
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	617b      	str	r3, [r7, #20]
   return(result);
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e6      	bne.n	8009814 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009846:	e018      	b.n	800987a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800984e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800985c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009862:	1c9a      	adds	r2, r3, #2
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800987a:	bf00      	nop
 800987c:	3744      	adds	r7, #68	; 0x44
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009886:	b480      	push	{r7}
 8009888:	b091      	sub	sp, #68	; 0x44
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009894:	2b21      	cmp	r3, #33	; 0x21
 8009896:	d160      	bne.n	800995a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800989e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098a0:	e057      	b.n	8009952 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d133      	bne.n	8009916 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	623b      	str	r3, [r7, #32]
   return(result);
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80098c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ce:	633a      	str	r2, [r7, #48]	; 0x30
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	e853 3f00 	ldrex	r3, [r3]
 80098ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f6:	637b      	str	r3, [r7, #52]	; 0x34
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009904:	69b9      	ldr	r1, [r7, #24]
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	e841 2300 	strex	r3, r2, [r1]
 800990c:	617b      	str	r3, [r7, #20]
   return(result);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e6      	bne.n	80098e2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009914:	e021      	b.n	800995a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009920:	2b00      	cmp	r3, #0
 8009922:	d013      	beq.n	800994c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009940:	b29b      	uxth	r3, r3
 8009942:	3b01      	subs	r3, #1
 8009944:	b29a      	uxth	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800994c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800994e:	3b01      	subs	r3, #1
 8009950:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009952:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1a4      	bne.n	80098a2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009958:	e7ff      	b.n	800995a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800995a:	bf00      	nop
 800995c:	3744      	adds	r7, #68	; 0x44
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009966:	b480      	push	{r7}
 8009968:	b091      	sub	sp, #68	; 0x44
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009974:	2b21      	cmp	r3, #33	; 0x21
 8009976:	d165      	bne.n	8009a44 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800997e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009980:	e05c      	b.n	8009a3c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d133      	bne.n	80099f6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3308      	adds	r3, #8
 8009994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	61fb      	str	r3, [r7, #28]
   return(result);
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099a4:	637b      	str	r3, [r7, #52]	; 0x34
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3308      	adds	r3, #8
 80099ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e5      	bne.n	800998e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6979      	ldr	r1, [r7, #20]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	613b      	str	r3, [r7, #16]
   return(result);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e6      	bne.n	80099c2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80099f4:	e026      	b.n	8009a44 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d018      	beq.n	8009a36 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a08:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a18:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1e:	1c9a      	adds	r2, r3, #2
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009a36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d19f      	bne.n	8009982 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009a42:	e7ff      	b.n	8009a44 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009a44:	bf00      	nop
 8009a46:	3744      	adds	r7, #68	; 0x44
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a6c:	61fb      	str	r3, [r7, #28]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	61bb      	str	r3, [r7, #24]
 8009a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	613b      	str	r3, [r7, #16]
   return(result);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e6      	bne.n	8009a58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7f7 fe65 	bl	8001768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9e:	bf00      	nop
 8009aa0:	3720      	adds	r7, #32
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b096      	sub	sp, #88	; 0x58
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ab4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	2b22      	cmp	r3, #34	; 0x22
 8009ac0:	f040 8095 	bne.w	8009bee <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ace:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009ad2:	b2d9      	uxtb	r1, r3
 8009ad4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ade:	400a      	ands	r2, r1
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d178      	bne.n	8009bfe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b20:	653b      	str	r3, [r7, #80]	; 0x50
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e6      	bne.n	8009b0c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3308      	adds	r3, #8
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e5      	bne.n	8009b3e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d12e      	bne.n	8009be6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0310 	bic.w	r3, r3, #16
 8009ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	69b9      	ldr	r1, [r7, #24]
 8009bb2:	69fa      	ldr	r2, [r7, #28]
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e6      	bne.n	8009b8e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d103      	bne.n	8009bd6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7fe fcc4 	bl	800856c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be4:	e00b      	b.n	8009bfe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7f7 fdcc 	bl	8001784 <HAL_UART_RxCpltCallback>
}
 8009bec:	e007      	b.n	8009bfe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0208 	orr.w	r2, r2, #8
 8009bfc:	619a      	str	r2, [r3, #24]
}
 8009bfe:	bf00      	nop
 8009c00:	3758      	adds	r7, #88	; 0x58
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b096      	sub	sp, #88	; 0x58
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1e:	2b22      	cmp	r3, #34	; 0x22
 8009c20:	f040 8095 	bne.w	8009d4e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c34:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009c38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c42:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c48:	1c9a      	adds	r2, r3, #2
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d178      	bne.n	8009d5e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	e853 3f00 	ldrex	r3, [r3]
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c92:	e841 2300 	strex	r3, r2, [r1]
 8009c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1e6      	bne.n	8009c6c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	f023 0301 	bic.w	r3, r3, #1
 8009cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e5      	bne.n	8009c9e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d12e      	bne.n	8009d46 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f023 0310 	bic.w	r3, r3, #16
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6979      	ldr	r1, [r7, #20]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	613b      	str	r3, [r7, #16]
   return(result);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e6      	bne.n	8009cee <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	f003 0310 	and.w	r3, r3, #16
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d103      	bne.n	8009d36 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2210      	movs	r2, #16
 8009d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7fe fc14 	bl	800856c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d44:	e00b      	b.n	8009d5e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7f7 fd1c 	bl	8001784 <HAL_UART_RxCpltCallback>
}
 8009d4c:	e007      	b.n	8009d5e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0208 	orr.w	r2, r2, #8
 8009d5c:	619a      	str	r2, [r3, #24]
}
 8009d5e:	bf00      	nop
 8009d60:	3758      	adds	r7, #88	; 0x58
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b0a6      	sub	sp, #152	; 0x98
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d76:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d9e:	2b22      	cmp	r3, #34	; 0x22
 8009da0:	f040 814d 	bne.w	800a03e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009daa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dae:	e0f4      	b.n	8009f9a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009dbe:	b2d9      	uxtb	r1, r3
 8009dc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dca:	400a      	ands	r2, r1
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd4:	1c5a      	adds	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009df6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d053      	beq.n	8009eaa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d011      	beq.n	8009e32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00b      	beq.n	8009e32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e28:	f043 0201 	orr.w	r2, r3, #1
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d011      	beq.n	8009e62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00b      	beq.n	8009e62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e58:	f043 0204 	orr.w	r2, r3, #4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d011      	beq.n	8009e92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00b      	beq.n	8009e92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2204      	movs	r2, #4
 8009e80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e88:	f043 0202 	orr.w	r2, r3, #2
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d006      	beq.n	8009eaa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe fb5b 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d171      	bne.n	8009f9a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eda:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009ede:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e4      	bne.n	8009eb6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009efe:	4b56      	ldr	r3, [pc, #344]	; (800a058 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3308      	adds	r3, #8
 8009f0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009f0c:	657a      	str	r2, [r7, #84]	; 0x54
 8009f0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e5      	bne.n	8009eec <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d12e      	bne.n	8009f94 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	f023 0310 	bic.w	r3, r3, #16
 8009f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e6      	bne.n	8009f3c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d103      	bne.n	8009f84 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2210      	movs	r2, #16
 8009f82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7fe faed 	bl	800856c <HAL_UARTEx_RxEventCallback>
 8009f92:	e002      	b.n	8009f9a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7f7 fbf5 	bl	8001784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f47f af00 	bne.w	8009db0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d045      	beq.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d23e      	bcs.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fe6:	673b      	str	r3, [r7, #112]	; 0x70
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3308      	adds	r3, #8
 8009fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e5      	bne.n	8009fd0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a15      	ldr	r2, [pc, #84]	; (800a05c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a008:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	60bb      	str	r3, [r7, #8]
   return(result);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f043 0320 	orr.w	r3, r3, #32
 800a01e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6979      	ldr	r1, [r7, #20]
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	613b      	str	r3, [r7, #16]
   return(result);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a03c:	e007      	b.n	800a04e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f042 0208 	orr.w	r2, r2, #8
 800a04c:	619a      	str	r2, [r3, #24]
}
 800a04e:	bf00      	nop
 800a050:	3798      	adds	r7, #152	; 0x98
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	effffffe 	.word	0xeffffffe
 800a05c:	08009aa7 	.word	0x08009aa7

0800a060 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b0a8      	sub	sp, #160	; 0xa0
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a06e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a096:	2b22      	cmp	r3, #34	; 0x22
 800a098:	f040 8151 	bne.w	800a33e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0a6:	e0f8      	b.n	800a29a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0ba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a0be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d0:	1c9a      	adds	r2, r3, #2
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d053      	beq.n	800a1a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d011      	beq.n	800a12e <UART_RxISR_16BIT_FIFOEN+0xce>
 800a10a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2201      	movs	r2, #1
 800a11c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a124:	f043 0201 	orr.w	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a12e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d011      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2202      	movs	r2, #2
 800a14c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a154:	f043 0204 	orr.w	r2, r3, #4
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a15e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	d011      	beq.n	800a18e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a16a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2204      	movs	r2, #4
 800a17c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a184:	f043 0202 	orr.w	r2, r3, #2
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7fe f9dd 	bl	8008558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d173      	bne.n	800a29a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e4      	bne.n	800a1b2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1fa:	4b57      	ldr	r3, [pc, #348]	; (800a358 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3308      	adds	r3, #8
 800a208:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a20c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a20e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e3      	bne.n	800a1e8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a232:	2b01      	cmp	r3, #1
 800a234:	d12e      	bne.n	800a294 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	f023 0310 	bic.w	r3, r3, #16
 800a250:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a25a:	647b      	str	r3, [r7, #68]	; 0x44
 800a25c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a262:	e841 2300 	strex	r3, r2, [r1]
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e6      	bne.n	800a23c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f003 0310 	and.w	r3, r3, #16
 800a278:	2b10      	cmp	r3, #16
 800a27a:	d103      	bne.n	800a284 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2210      	movs	r2, #16
 800a282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7fe f96d 	bl	800856c <HAL_UARTEx_RxEventCallback>
 800a292:	e002      	b.n	800a29a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7f7 fa75 	bl	8001784 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a29a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <UART_RxISR_16BIT_FIFOEN+0x250>
 800a2a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f47f aefc 	bne.w	800a0a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d045      	beq.n	800a34e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a2c8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d23e      	bcs.n	800a34e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
 800a2e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	677b      	str	r3, [r7, #116]	; 0x74
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a2f0:	633a      	str	r2, [r7, #48]	; 0x30
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e5      	bne.n	800a2d0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a15      	ldr	r2, [pc, #84]	; (800a35c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a308:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	60fb      	str	r3, [r7, #12]
   return(result);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f043 0320 	orr.w	r3, r3, #32
 800a31e:	673b      	str	r3, [r7, #112]	; 0x70
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a328:	61fb      	str	r3, [r7, #28]
 800a32a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	69b9      	ldr	r1, [r7, #24]
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	617b      	str	r3, [r7, #20]
   return(result);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e6      	bne.n	800a30a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a33c:	e007      	b.n	800a34e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0208 	orr.w	r2, r2, #8
 800a34c:	619a      	str	r2, [r3, #24]
}
 800a34e:	bf00      	nop
 800a350:	37a0      	adds	r7, #160	; 0xa0
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	effffffe 	.word	0xeffffffe
 800a35c:	08009c07 	.word	0x08009c07

0800a360 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e027      	b.n	800a402 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2224      	movs	r2, #36	; 0x24
 800a3be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 0201 	bic.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2220      	movs	r2, #32
 800a3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d101      	bne.n	800a426 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a422:	2302      	movs	r3, #2
 800a424:	e02d      	b.n	800a482 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2224      	movs	r2, #36	; 0x24
 800a432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0201 	bic.w	r2, r2, #1
 800a44c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f850 	bl	800a508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e02d      	b.n	800a4fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2224      	movs	r2, #36	; 0x24
 800a4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 0201 	bic.w	r2, r2, #1
 800a4c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f812 	bl	800a508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a514:	2b00      	cmp	r3, #0
 800a516:	d108      	bne.n	800a52a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a528:	e031      	b.n	800a58e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a52a:	2310      	movs	r3, #16
 800a52c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a52e:	2310      	movs	r3, #16
 800a530:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	0e5b      	lsrs	r3, r3, #25
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	f003 0307 	and.w	r3, r3, #7
 800a540:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	0f5b      	lsrs	r3, r3, #29
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	7b3a      	ldrb	r2, [r7, #12]
 800a556:	4911      	ldr	r1, [pc, #68]	; (800a59c <UARTEx_SetNbDataToProcess+0x94>)
 800a558:	5c8a      	ldrb	r2, [r1, r2]
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a55e:	7b3a      	ldrb	r2, [r7, #12]
 800a560:	490f      	ldr	r1, [pc, #60]	; (800a5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a562:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a564:	fb93 f3f2 	sdiv	r3, r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	7b7a      	ldrb	r2, [r7, #13]
 800a574:	4909      	ldr	r1, [pc, #36]	; (800a59c <UARTEx_SetNbDataToProcess+0x94>)
 800a576:	5c8a      	ldrb	r2, [r1, r2]
 800a578:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a57c:	7b7a      	ldrb	r2, [r7, #13]
 800a57e:	4908      	ldr	r1, [pc, #32]	; (800a5a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a580:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a582:	fb93 f3f2 	sdiv	r3, r3, r2
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a58e:	bf00      	nop
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	0800b708 	.word	0x0800b708
 800a5a0:	0800b710 	.word	0x0800b710

0800a5a4 <__errno>:
 800a5a4:	4b01      	ldr	r3, [pc, #4]	; (800a5ac <__errno+0x8>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	24000010 	.word	0x24000010

0800a5b0 <__libc_init_array>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	4d0d      	ldr	r5, [pc, #52]	; (800a5e8 <__libc_init_array+0x38>)
 800a5b4:	4c0d      	ldr	r4, [pc, #52]	; (800a5ec <__libc_init_array+0x3c>)
 800a5b6:	1b64      	subs	r4, r4, r5
 800a5b8:	10a4      	asrs	r4, r4, #2
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	42a6      	cmp	r6, r4
 800a5be:	d109      	bne.n	800a5d4 <__libc_init_array+0x24>
 800a5c0:	4d0b      	ldr	r5, [pc, #44]	; (800a5f0 <__libc_init_array+0x40>)
 800a5c2:	4c0c      	ldr	r4, [pc, #48]	; (800a5f4 <__libc_init_array+0x44>)
 800a5c4:	f000 fc8e 	bl	800aee4 <_init>
 800a5c8:	1b64      	subs	r4, r4, r5
 800a5ca:	10a4      	asrs	r4, r4, #2
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	42a6      	cmp	r6, r4
 800a5d0:	d105      	bne.n	800a5de <__libc_init_array+0x2e>
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d8:	4798      	blx	r3
 800a5da:	3601      	adds	r6, #1
 800a5dc:	e7ee      	b.n	800a5bc <__libc_init_array+0xc>
 800a5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e2:	4798      	blx	r3
 800a5e4:	3601      	adds	r6, #1
 800a5e6:	e7f2      	b.n	800a5ce <__libc_init_array+0x1e>
 800a5e8:	0800b754 	.word	0x0800b754
 800a5ec:	0800b754 	.word	0x0800b754
 800a5f0:	0800b754 	.word	0x0800b754
 800a5f4:	0800b758 	.word	0x0800b758

0800a5f8 <memset>:
 800a5f8:	4402      	add	r2, r0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d100      	bne.n	800a602 <memset+0xa>
 800a600:	4770      	bx	lr
 800a602:	f803 1b01 	strb.w	r1, [r3], #1
 800a606:	e7f9      	b.n	800a5fc <memset+0x4>

0800a608 <siprintf>:
 800a608:	b40e      	push	{r1, r2, r3}
 800a60a:	b500      	push	{lr}
 800a60c:	b09c      	sub	sp, #112	; 0x70
 800a60e:	ab1d      	add	r3, sp, #116	; 0x74
 800a610:	9002      	str	r0, [sp, #8]
 800a612:	9006      	str	r0, [sp, #24]
 800a614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a618:	4809      	ldr	r0, [pc, #36]	; (800a640 <siprintf+0x38>)
 800a61a:	9107      	str	r1, [sp, #28]
 800a61c:	9104      	str	r1, [sp, #16]
 800a61e:	4909      	ldr	r1, [pc, #36]	; (800a644 <siprintf+0x3c>)
 800a620:	f853 2b04 	ldr.w	r2, [r3], #4
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	6800      	ldr	r0, [r0, #0]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	a902      	add	r1, sp, #8
 800a62c:	f000 f868 	bl	800a700 <_svfiprintf_r>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	b01c      	add	sp, #112	; 0x70
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	24000010 	.word	0x24000010
 800a644:	ffff0208 	.word	0xffff0208

0800a648 <__ssputs_r>:
 800a648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	688e      	ldr	r6, [r1, #8]
 800a64e:	429e      	cmp	r6, r3
 800a650:	4682      	mov	sl, r0
 800a652:	460c      	mov	r4, r1
 800a654:	4690      	mov	r8, r2
 800a656:	461f      	mov	r7, r3
 800a658:	d838      	bhi.n	800a6cc <__ssputs_r+0x84>
 800a65a:	898a      	ldrh	r2, [r1, #12]
 800a65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a660:	d032      	beq.n	800a6c8 <__ssputs_r+0x80>
 800a662:	6825      	ldr	r5, [r4, #0]
 800a664:	6909      	ldr	r1, [r1, #16]
 800a666:	eba5 0901 	sub.w	r9, r5, r1
 800a66a:	6965      	ldr	r5, [r4, #20]
 800a66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a674:	3301      	adds	r3, #1
 800a676:	444b      	add	r3, r9
 800a678:	106d      	asrs	r5, r5, #1
 800a67a:	429d      	cmp	r5, r3
 800a67c:	bf38      	it	cc
 800a67e:	461d      	movcc	r5, r3
 800a680:	0553      	lsls	r3, r2, #21
 800a682:	d531      	bpl.n	800a6e8 <__ssputs_r+0xa0>
 800a684:	4629      	mov	r1, r5
 800a686:	f000 fb63 	bl	800ad50 <_malloc_r>
 800a68a:	4606      	mov	r6, r0
 800a68c:	b950      	cbnz	r0, 800a6a4 <__ssputs_r+0x5c>
 800a68e:	230c      	movs	r3, #12
 800a690:	f8ca 3000 	str.w	r3, [sl]
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a4:	6921      	ldr	r1, [r4, #16]
 800a6a6:	464a      	mov	r2, r9
 800a6a8:	f000 fabe 	bl	800ac28 <memcpy>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	6126      	str	r6, [r4, #16]
 800a6ba:	6165      	str	r5, [r4, #20]
 800a6bc:	444e      	add	r6, r9
 800a6be:	eba5 0509 	sub.w	r5, r5, r9
 800a6c2:	6026      	str	r6, [r4, #0]
 800a6c4:	60a5      	str	r5, [r4, #8]
 800a6c6:	463e      	mov	r6, r7
 800a6c8:	42be      	cmp	r6, r7
 800a6ca:	d900      	bls.n	800a6ce <__ssputs_r+0x86>
 800a6cc:	463e      	mov	r6, r7
 800a6ce:	6820      	ldr	r0, [r4, #0]
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	f000 fab6 	bl	800ac44 <memmove>
 800a6d8:	68a3      	ldr	r3, [r4, #8]
 800a6da:	1b9b      	subs	r3, r3, r6
 800a6dc:	60a3      	str	r3, [r4, #8]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	4433      	add	r3, r6
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	e7db      	b.n	800a6a0 <__ssputs_r+0x58>
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	f000 fba5 	bl	800ae38 <_realloc_r>
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d1e1      	bne.n	800a6b8 <__ssputs_r+0x70>
 800a6f4:	6921      	ldr	r1, [r4, #16]
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	f000 fabe 	bl	800ac78 <_free_r>
 800a6fc:	e7c7      	b.n	800a68e <__ssputs_r+0x46>
	...

0800a700 <_svfiprintf_r>:
 800a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	4698      	mov	r8, r3
 800a706:	898b      	ldrh	r3, [r1, #12]
 800a708:	061b      	lsls	r3, r3, #24
 800a70a:	b09d      	sub	sp, #116	; 0x74
 800a70c:	4607      	mov	r7, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	4614      	mov	r4, r2
 800a712:	d50e      	bpl.n	800a732 <_svfiprintf_r+0x32>
 800a714:	690b      	ldr	r3, [r1, #16]
 800a716:	b963      	cbnz	r3, 800a732 <_svfiprintf_r+0x32>
 800a718:	2140      	movs	r1, #64	; 0x40
 800a71a:	f000 fb19 	bl	800ad50 <_malloc_r>
 800a71e:	6028      	str	r0, [r5, #0]
 800a720:	6128      	str	r0, [r5, #16]
 800a722:	b920      	cbnz	r0, 800a72e <_svfiprintf_r+0x2e>
 800a724:	230c      	movs	r3, #12
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a72c:	e0d1      	b.n	800a8d2 <_svfiprintf_r+0x1d2>
 800a72e:	2340      	movs	r3, #64	; 0x40
 800a730:	616b      	str	r3, [r5, #20]
 800a732:	2300      	movs	r3, #0
 800a734:	9309      	str	r3, [sp, #36]	; 0x24
 800a736:	2320      	movs	r3, #32
 800a738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a740:	2330      	movs	r3, #48	; 0x30
 800a742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8ec <_svfiprintf_r+0x1ec>
 800a746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74a:	f04f 0901 	mov.w	r9, #1
 800a74e:	4623      	mov	r3, r4
 800a750:	469a      	mov	sl, r3
 800a752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a756:	b10a      	cbz	r2, 800a75c <_svfiprintf_r+0x5c>
 800a758:	2a25      	cmp	r2, #37	; 0x25
 800a75a:	d1f9      	bne.n	800a750 <_svfiprintf_r+0x50>
 800a75c:	ebba 0b04 	subs.w	fp, sl, r4
 800a760:	d00b      	beq.n	800a77a <_svfiprintf_r+0x7a>
 800a762:	465b      	mov	r3, fp
 800a764:	4622      	mov	r2, r4
 800a766:	4629      	mov	r1, r5
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff ff6d 	bl	800a648 <__ssputs_r>
 800a76e:	3001      	adds	r0, #1
 800a770:	f000 80aa 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	445a      	add	r2, fp
 800a778:	9209      	str	r2, [sp, #36]	; 0x24
 800a77a:	f89a 3000 	ldrb.w	r3, [sl]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80a2 	beq.w	800a8c8 <_svfiprintf_r+0x1c8>
 800a784:	2300      	movs	r3, #0
 800a786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78e:	f10a 0a01 	add.w	sl, sl, #1
 800a792:	9304      	str	r3, [sp, #16]
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79a:	931a      	str	r3, [sp, #104]	; 0x68
 800a79c:	4654      	mov	r4, sl
 800a79e:	2205      	movs	r2, #5
 800a7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a4:	4851      	ldr	r0, [pc, #324]	; (800a8ec <_svfiprintf_r+0x1ec>)
 800a7a6:	f7f5 fda3 	bl	80002f0 <memchr>
 800a7aa:	9a04      	ldr	r2, [sp, #16]
 800a7ac:	b9d8      	cbnz	r0, 800a7e6 <_svfiprintf_r+0xe6>
 800a7ae:	06d0      	lsls	r0, r2, #27
 800a7b0:	bf44      	itt	mi
 800a7b2:	2320      	movmi	r3, #32
 800a7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b8:	0711      	lsls	r1, r2, #28
 800a7ba:	bf44      	itt	mi
 800a7bc:	232b      	movmi	r3, #43	; 0x2b
 800a7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c8:	d015      	beq.n	800a7f6 <_svfiprintf_r+0xf6>
 800a7ca:	9a07      	ldr	r2, [sp, #28]
 800a7cc:	4654      	mov	r4, sl
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f04f 0c0a 	mov.w	ip, #10
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7da:	3b30      	subs	r3, #48	; 0x30
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d94e      	bls.n	800a87e <_svfiprintf_r+0x17e>
 800a7e0:	b1b0      	cbz	r0, 800a810 <_svfiprintf_r+0x110>
 800a7e2:	9207      	str	r2, [sp, #28]
 800a7e4:	e014      	b.n	800a810 <_svfiprintf_r+0x110>
 800a7e6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	46a2      	mov	sl, r4
 800a7f4:	e7d2      	b.n	800a79c <_svfiprintf_r+0x9c>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d19      	adds	r1, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9103      	str	r1, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfbb      	ittet	lt
 800a802:	425b      	neglt	r3, r3
 800a804:	f042 0202 	orrlt.w	r2, r2, #2
 800a808:	9307      	strge	r3, [sp, #28]
 800a80a:	9307      	strlt	r3, [sp, #28]
 800a80c:	bfb8      	it	lt
 800a80e:	9204      	strlt	r2, [sp, #16]
 800a810:	7823      	ldrb	r3, [r4, #0]
 800a812:	2b2e      	cmp	r3, #46	; 0x2e
 800a814:	d10c      	bne.n	800a830 <_svfiprintf_r+0x130>
 800a816:	7863      	ldrb	r3, [r4, #1]
 800a818:	2b2a      	cmp	r3, #42	; 0x2a
 800a81a:	d135      	bne.n	800a888 <_svfiprintf_r+0x188>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	1d1a      	adds	r2, r3, #4
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	9203      	str	r2, [sp, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb8      	it	lt
 800a828:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a82c:	3402      	adds	r4, #2
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8fc <_svfiprintf_r+0x1fc>
 800a834:	7821      	ldrb	r1, [r4, #0]
 800a836:	2203      	movs	r2, #3
 800a838:	4650      	mov	r0, sl
 800a83a:	f7f5 fd59 	bl	80002f0 <memchr>
 800a83e:	b140      	cbz	r0, 800a852 <_svfiprintf_r+0x152>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	eba0 000a 	sub.w	r0, r0, sl
 800a846:	fa03 f000 	lsl.w	r0, r3, r0
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	4303      	orrs	r3, r0
 800a84e:	3401      	adds	r4, #1
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a856:	4826      	ldr	r0, [pc, #152]	; (800a8f0 <_svfiprintf_r+0x1f0>)
 800a858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85c:	2206      	movs	r2, #6
 800a85e:	f7f5 fd47 	bl	80002f0 <memchr>
 800a862:	2800      	cmp	r0, #0
 800a864:	d038      	beq.n	800a8d8 <_svfiprintf_r+0x1d8>
 800a866:	4b23      	ldr	r3, [pc, #140]	; (800a8f4 <_svfiprintf_r+0x1f4>)
 800a868:	bb1b      	cbnz	r3, 800a8b2 <_svfiprintf_r+0x1b2>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	3307      	adds	r3, #7
 800a86e:	f023 0307 	bic.w	r3, r3, #7
 800a872:	3308      	adds	r3, #8
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	4433      	add	r3, r6
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	e767      	b.n	800a74e <_svfiprintf_r+0x4e>
 800a87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a882:	460c      	mov	r4, r1
 800a884:	2001      	movs	r0, #1
 800a886:	e7a5      	b.n	800a7d4 <_svfiprintf_r+0xd4>
 800a888:	2300      	movs	r3, #0
 800a88a:	3401      	adds	r4, #1
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	4619      	mov	r1, r3
 800a890:	f04f 0c0a 	mov.w	ip, #10
 800a894:	4620      	mov	r0, r4
 800a896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89a:	3a30      	subs	r2, #48	; 0x30
 800a89c:	2a09      	cmp	r2, #9
 800a89e:	d903      	bls.n	800a8a8 <_svfiprintf_r+0x1a8>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0c5      	beq.n	800a830 <_svfiprintf_r+0x130>
 800a8a4:	9105      	str	r1, [sp, #20]
 800a8a6:	e7c3      	b.n	800a830 <_svfiprintf_r+0x130>
 800a8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e7f0      	b.n	800a894 <_svfiprintf_r+0x194>
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <_svfiprintf_r+0x1f8>)
 800a8ba:	a904      	add	r1, sp, #16
 800a8bc:	4638      	mov	r0, r7
 800a8be:	f3af 8000 	nop.w
 800a8c2:	1c42      	adds	r2, r0, #1
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	d1d6      	bne.n	800a876 <_svfiprintf_r+0x176>
 800a8c8:	89ab      	ldrh	r3, [r5, #12]
 800a8ca:	065b      	lsls	r3, r3, #25
 800a8cc:	f53f af2c 	bmi.w	800a728 <_svfiprintf_r+0x28>
 800a8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8d2:	b01d      	add	sp, #116	; 0x74
 800a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d8:	ab03      	add	r3, sp, #12
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <_svfiprintf_r+0x1f8>)
 800a8e0:	a904      	add	r1, sp, #16
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	f000 f87a 	bl	800a9dc <_printf_i>
 800a8e8:	e7eb      	b.n	800a8c2 <_svfiprintf_r+0x1c2>
 800a8ea:	bf00      	nop
 800a8ec:	0800b718 	.word	0x0800b718
 800a8f0:	0800b722 	.word	0x0800b722
 800a8f4:	00000000 	.word	0x00000000
 800a8f8:	0800a649 	.word	0x0800a649
 800a8fc:	0800b71e 	.word	0x0800b71e

0800a900 <_printf_common>:
 800a900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a904:	4616      	mov	r6, r2
 800a906:	4699      	mov	r9, r3
 800a908:	688a      	ldr	r2, [r1, #8]
 800a90a:	690b      	ldr	r3, [r1, #16]
 800a90c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a910:	4293      	cmp	r3, r2
 800a912:	bfb8      	it	lt
 800a914:	4613      	movlt	r3, r2
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a91c:	4607      	mov	r7, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b10a      	cbz	r2, 800a926 <_printf_common+0x26>
 800a922:	3301      	adds	r3, #1
 800a924:	6033      	str	r3, [r6, #0]
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	0699      	lsls	r1, r3, #26
 800a92a:	bf42      	ittt	mi
 800a92c:	6833      	ldrmi	r3, [r6, #0]
 800a92e:	3302      	addmi	r3, #2
 800a930:	6033      	strmi	r3, [r6, #0]
 800a932:	6825      	ldr	r5, [r4, #0]
 800a934:	f015 0506 	ands.w	r5, r5, #6
 800a938:	d106      	bne.n	800a948 <_printf_common+0x48>
 800a93a:	f104 0a19 	add.w	sl, r4, #25
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	6832      	ldr	r2, [r6, #0]
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	42ab      	cmp	r3, r5
 800a946:	dc26      	bgt.n	800a996 <_printf_common+0x96>
 800a948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a94c:	1e13      	subs	r3, r2, #0
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	bf18      	it	ne
 800a952:	2301      	movne	r3, #1
 800a954:	0692      	lsls	r2, r2, #26
 800a956:	d42b      	bmi.n	800a9b0 <_printf_common+0xb0>
 800a958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a95c:	4649      	mov	r1, r9
 800a95e:	4638      	mov	r0, r7
 800a960:	47c0      	blx	r8
 800a962:	3001      	adds	r0, #1
 800a964:	d01e      	beq.n	800a9a4 <_printf_common+0xa4>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	68e5      	ldr	r5, [r4, #12]
 800a96a:	6832      	ldr	r2, [r6, #0]
 800a96c:	f003 0306 	and.w	r3, r3, #6
 800a970:	2b04      	cmp	r3, #4
 800a972:	bf08      	it	eq
 800a974:	1aad      	subeq	r5, r5, r2
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	6922      	ldr	r2, [r4, #16]
 800a97a:	bf0c      	ite	eq
 800a97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a980:	2500      	movne	r5, #0
 800a982:	4293      	cmp	r3, r2
 800a984:	bfc4      	itt	gt
 800a986:	1a9b      	subgt	r3, r3, r2
 800a988:	18ed      	addgt	r5, r5, r3
 800a98a:	2600      	movs	r6, #0
 800a98c:	341a      	adds	r4, #26
 800a98e:	42b5      	cmp	r5, r6
 800a990:	d11a      	bne.n	800a9c8 <_printf_common+0xc8>
 800a992:	2000      	movs	r0, #0
 800a994:	e008      	b.n	800a9a8 <_printf_common+0xa8>
 800a996:	2301      	movs	r3, #1
 800a998:	4652      	mov	r2, sl
 800a99a:	4649      	mov	r1, r9
 800a99c:	4638      	mov	r0, r7
 800a99e:	47c0      	blx	r8
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d103      	bne.n	800a9ac <_printf_common+0xac>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	e7c6      	b.n	800a93e <_printf_common+0x3e>
 800a9b0:	18e1      	adds	r1, r4, r3
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	2030      	movs	r0, #48	; 0x30
 800a9b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ba:	4422      	add	r2, r4
 800a9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	e7c7      	b.n	800a958 <_printf_common+0x58>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4622      	mov	r2, r4
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	47c0      	blx	r8
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d0e6      	beq.n	800a9a4 <_printf_common+0xa4>
 800a9d6:	3601      	adds	r6, #1
 800a9d8:	e7d9      	b.n	800a98e <_printf_common+0x8e>
	...

0800a9dc <_printf_i>:
 800a9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	7e0f      	ldrb	r7, [r1, #24]
 800a9e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9e4:	2f78      	cmp	r7, #120	; 0x78
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	469a      	mov	sl, r3
 800a9ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9f2:	d807      	bhi.n	800aa04 <_printf_i+0x28>
 800a9f4:	2f62      	cmp	r7, #98	; 0x62
 800a9f6:	d80a      	bhi.n	800aa0e <_printf_i+0x32>
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	f000 80d8 	beq.w	800abae <_printf_i+0x1d2>
 800a9fe:	2f58      	cmp	r7, #88	; 0x58
 800aa00:	f000 80a3 	beq.w	800ab4a <_printf_i+0x16e>
 800aa04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa0c:	e03a      	b.n	800aa84 <_printf_i+0xa8>
 800aa0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa12:	2b15      	cmp	r3, #21
 800aa14:	d8f6      	bhi.n	800aa04 <_printf_i+0x28>
 800aa16:	a101      	add	r1, pc, #4	; (adr r1, 800aa1c <_printf_i+0x40>)
 800aa18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa1c:	0800aa75 	.word	0x0800aa75
 800aa20:	0800aa89 	.word	0x0800aa89
 800aa24:	0800aa05 	.word	0x0800aa05
 800aa28:	0800aa05 	.word	0x0800aa05
 800aa2c:	0800aa05 	.word	0x0800aa05
 800aa30:	0800aa05 	.word	0x0800aa05
 800aa34:	0800aa89 	.word	0x0800aa89
 800aa38:	0800aa05 	.word	0x0800aa05
 800aa3c:	0800aa05 	.word	0x0800aa05
 800aa40:	0800aa05 	.word	0x0800aa05
 800aa44:	0800aa05 	.word	0x0800aa05
 800aa48:	0800ab95 	.word	0x0800ab95
 800aa4c:	0800aab9 	.word	0x0800aab9
 800aa50:	0800ab77 	.word	0x0800ab77
 800aa54:	0800aa05 	.word	0x0800aa05
 800aa58:	0800aa05 	.word	0x0800aa05
 800aa5c:	0800abb7 	.word	0x0800abb7
 800aa60:	0800aa05 	.word	0x0800aa05
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800aa05 	.word	0x0800aa05
 800aa6c:	0800aa05 	.word	0x0800aa05
 800aa70:	0800ab7f 	.word	0x0800ab7f
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	1d1a      	adds	r2, r3, #4
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	602a      	str	r2, [r5, #0]
 800aa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa84:	2301      	movs	r3, #1
 800aa86:	e0a3      	b.n	800abd0 <_printf_i+0x1f4>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	6829      	ldr	r1, [r5, #0]
 800aa8c:	0606      	lsls	r6, r0, #24
 800aa8e:	f101 0304 	add.w	r3, r1, #4
 800aa92:	d50a      	bpl.n	800aaaa <_printf_i+0xce>
 800aa94:	680e      	ldr	r6, [r1, #0]
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	da03      	bge.n	800aaa4 <_printf_i+0xc8>
 800aa9c:	232d      	movs	r3, #45	; 0x2d
 800aa9e:	4276      	negs	r6, r6
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa4:	485e      	ldr	r0, [pc, #376]	; (800ac20 <_printf_i+0x244>)
 800aaa6:	230a      	movs	r3, #10
 800aaa8:	e019      	b.n	800aade <_printf_i+0x102>
 800aaaa:	680e      	ldr	r6, [r1, #0]
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aab2:	bf18      	it	ne
 800aab4:	b236      	sxthne	r6, r6
 800aab6:	e7ef      	b.n	800aa98 <_printf_i+0xbc>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	6820      	ldr	r0, [r4, #0]
 800aabc:	1d19      	adds	r1, r3, #4
 800aabe:	6029      	str	r1, [r5, #0]
 800aac0:	0601      	lsls	r1, r0, #24
 800aac2:	d501      	bpl.n	800aac8 <_printf_i+0xec>
 800aac4:	681e      	ldr	r6, [r3, #0]
 800aac6:	e002      	b.n	800aace <_printf_i+0xf2>
 800aac8:	0646      	lsls	r6, r0, #25
 800aaca:	d5fb      	bpl.n	800aac4 <_printf_i+0xe8>
 800aacc:	881e      	ldrh	r6, [r3, #0]
 800aace:	4854      	ldr	r0, [pc, #336]	; (800ac20 <_printf_i+0x244>)
 800aad0:	2f6f      	cmp	r7, #111	; 0x6f
 800aad2:	bf0c      	ite	eq
 800aad4:	2308      	moveq	r3, #8
 800aad6:	230a      	movne	r3, #10
 800aad8:	2100      	movs	r1, #0
 800aada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aade:	6865      	ldr	r5, [r4, #4]
 800aae0:	60a5      	str	r5, [r4, #8]
 800aae2:	2d00      	cmp	r5, #0
 800aae4:	bfa2      	ittt	ge
 800aae6:	6821      	ldrge	r1, [r4, #0]
 800aae8:	f021 0104 	bicge.w	r1, r1, #4
 800aaec:	6021      	strge	r1, [r4, #0]
 800aaee:	b90e      	cbnz	r6, 800aaf4 <_printf_i+0x118>
 800aaf0:	2d00      	cmp	r5, #0
 800aaf2:	d04d      	beq.n	800ab90 <_printf_i+0x1b4>
 800aaf4:	4615      	mov	r5, r2
 800aaf6:	fbb6 f1f3 	udiv	r1, r6, r3
 800aafa:	fb03 6711 	mls	r7, r3, r1, r6
 800aafe:	5dc7      	ldrb	r7, [r0, r7]
 800ab00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab04:	4637      	mov	r7, r6
 800ab06:	42bb      	cmp	r3, r7
 800ab08:	460e      	mov	r6, r1
 800ab0a:	d9f4      	bls.n	800aaf6 <_printf_i+0x11a>
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d10b      	bne.n	800ab28 <_printf_i+0x14c>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	07de      	lsls	r6, r3, #31
 800ab14:	d508      	bpl.n	800ab28 <_printf_i+0x14c>
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	6861      	ldr	r1, [r4, #4]
 800ab1a:	4299      	cmp	r1, r3
 800ab1c:	bfde      	ittt	le
 800ab1e:	2330      	movle	r3, #48	; 0x30
 800ab20:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab24:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab28:	1b52      	subs	r2, r2, r5
 800ab2a:	6122      	str	r2, [r4, #16]
 800ab2c:	f8cd a000 	str.w	sl, [sp]
 800ab30:	464b      	mov	r3, r9
 800ab32:	aa03      	add	r2, sp, #12
 800ab34:	4621      	mov	r1, r4
 800ab36:	4640      	mov	r0, r8
 800ab38:	f7ff fee2 	bl	800a900 <_printf_common>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d14c      	bne.n	800abda <_printf_i+0x1fe>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab44:	b004      	add	sp, #16
 800ab46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4a:	4835      	ldr	r0, [pc, #212]	; (800ac20 <_printf_i+0x244>)
 800ab4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab50:	6829      	ldr	r1, [r5, #0]
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab58:	6029      	str	r1, [r5, #0]
 800ab5a:	061d      	lsls	r5, r3, #24
 800ab5c:	d514      	bpl.n	800ab88 <_printf_i+0x1ac>
 800ab5e:	07df      	lsls	r7, r3, #31
 800ab60:	bf44      	itt	mi
 800ab62:	f043 0320 	orrmi.w	r3, r3, #32
 800ab66:	6023      	strmi	r3, [r4, #0]
 800ab68:	b91e      	cbnz	r6, 800ab72 <_printf_i+0x196>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f023 0320 	bic.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	2310      	movs	r3, #16
 800ab74:	e7b0      	b.n	800aad8 <_printf_i+0xfc>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	f043 0320 	orr.w	r3, r3, #32
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	2378      	movs	r3, #120	; 0x78
 800ab80:	4828      	ldr	r0, [pc, #160]	; (800ac24 <_printf_i+0x248>)
 800ab82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab86:	e7e3      	b.n	800ab50 <_printf_i+0x174>
 800ab88:	0659      	lsls	r1, r3, #25
 800ab8a:	bf48      	it	mi
 800ab8c:	b2b6      	uxthmi	r6, r6
 800ab8e:	e7e6      	b.n	800ab5e <_printf_i+0x182>
 800ab90:	4615      	mov	r5, r2
 800ab92:	e7bb      	b.n	800ab0c <_printf_i+0x130>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	6826      	ldr	r6, [r4, #0]
 800ab98:	6961      	ldr	r1, [r4, #20]
 800ab9a:	1d18      	adds	r0, r3, #4
 800ab9c:	6028      	str	r0, [r5, #0]
 800ab9e:	0635      	lsls	r5, r6, #24
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	d501      	bpl.n	800aba8 <_printf_i+0x1cc>
 800aba4:	6019      	str	r1, [r3, #0]
 800aba6:	e002      	b.n	800abae <_printf_i+0x1d2>
 800aba8:	0670      	lsls	r0, r6, #25
 800abaa:	d5fb      	bpl.n	800aba4 <_printf_i+0x1c8>
 800abac:	8019      	strh	r1, [r3, #0]
 800abae:	2300      	movs	r3, #0
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	4615      	mov	r5, r2
 800abb4:	e7ba      	b.n	800ab2c <_printf_i+0x150>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	1d1a      	adds	r2, r3, #4
 800abba:	602a      	str	r2, [r5, #0]
 800abbc:	681d      	ldr	r5, [r3, #0]
 800abbe:	6862      	ldr	r2, [r4, #4]
 800abc0:	2100      	movs	r1, #0
 800abc2:	4628      	mov	r0, r5
 800abc4:	f7f5 fb94 	bl	80002f0 <memchr>
 800abc8:	b108      	cbz	r0, 800abce <_printf_i+0x1f2>
 800abca:	1b40      	subs	r0, r0, r5
 800abcc:	6060      	str	r0, [r4, #4]
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	6123      	str	r3, [r4, #16]
 800abd2:	2300      	movs	r3, #0
 800abd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd8:	e7a8      	b.n	800ab2c <_printf_i+0x150>
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	462a      	mov	r2, r5
 800abde:	4649      	mov	r1, r9
 800abe0:	4640      	mov	r0, r8
 800abe2:	47d0      	blx	sl
 800abe4:	3001      	adds	r0, #1
 800abe6:	d0ab      	beq.n	800ab40 <_printf_i+0x164>
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	079b      	lsls	r3, r3, #30
 800abec:	d413      	bmi.n	800ac16 <_printf_i+0x23a>
 800abee:	68e0      	ldr	r0, [r4, #12]
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	4298      	cmp	r0, r3
 800abf4:	bfb8      	it	lt
 800abf6:	4618      	movlt	r0, r3
 800abf8:	e7a4      	b.n	800ab44 <_printf_i+0x168>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4632      	mov	r2, r6
 800abfe:	4649      	mov	r1, r9
 800ac00:	4640      	mov	r0, r8
 800ac02:	47d0      	blx	sl
 800ac04:	3001      	adds	r0, #1
 800ac06:	d09b      	beq.n	800ab40 <_printf_i+0x164>
 800ac08:	3501      	adds	r5, #1
 800ac0a:	68e3      	ldr	r3, [r4, #12]
 800ac0c:	9903      	ldr	r1, [sp, #12]
 800ac0e:	1a5b      	subs	r3, r3, r1
 800ac10:	42ab      	cmp	r3, r5
 800ac12:	dcf2      	bgt.n	800abfa <_printf_i+0x21e>
 800ac14:	e7eb      	b.n	800abee <_printf_i+0x212>
 800ac16:	2500      	movs	r5, #0
 800ac18:	f104 0619 	add.w	r6, r4, #25
 800ac1c:	e7f5      	b.n	800ac0a <_printf_i+0x22e>
 800ac1e:	bf00      	nop
 800ac20:	0800b729 	.word	0x0800b729
 800ac24:	0800b73a 	.word	0x0800b73a

0800ac28 <memcpy>:
 800ac28:	440a      	add	r2, r1
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac30:	d100      	bne.n	800ac34 <memcpy+0xc>
 800ac32:	4770      	bx	lr
 800ac34:	b510      	push	{r4, lr}
 800ac36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac3e:	4291      	cmp	r1, r2
 800ac40:	d1f9      	bne.n	800ac36 <memcpy+0xe>
 800ac42:	bd10      	pop	{r4, pc}

0800ac44 <memmove>:
 800ac44:	4288      	cmp	r0, r1
 800ac46:	b510      	push	{r4, lr}
 800ac48:	eb01 0402 	add.w	r4, r1, r2
 800ac4c:	d902      	bls.n	800ac54 <memmove+0x10>
 800ac4e:	4284      	cmp	r4, r0
 800ac50:	4623      	mov	r3, r4
 800ac52:	d807      	bhi.n	800ac64 <memmove+0x20>
 800ac54:	1e43      	subs	r3, r0, #1
 800ac56:	42a1      	cmp	r1, r4
 800ac58:	d008      	beq.n	800ac6c <memmove+0x28>
 800ac5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac62:	e7f8      	b.n	800ac56 <memmove+0x12>
 800ac64:	4402      	add	r2, r0
 800ac66:	4601      	mov	r1, r0
 800ac68:	428a      	cmp	r2, r1
 800ac6a:	d100      	bne.n	800ac6e <memmove+0x2a>
 800ac6c:	bd10      	pop	{r4, pc}
 800ac6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac76:	e7f7      	b.n	800ac68 <memmove+0x24>

0800ac78 <_free_r>:
 800ac78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	d044      	beq.n	800ad08 <_free_r+0x90>
 800ac7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac82:	9001      	str	r0, [sp, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f1a1 0404 	sub.w	r4, r1, #4
 800ac8a:	bfb8      	it	lt
 800ac8c:	18e4      	addlt	r4, r4, r3
 800ac8e:	f000 f913 	bl	800aeb8 <__malloc_lock>
 800ac92:	4a1e      	ldr	r2, [pc, #120]	; (800ad0c <_free_r+0x94>)
 800ac94:	9801      	ldr	r0, [sp, #4]
 800ac96:	6813      	ldr	r3, [r2, #0]
 800ac98:	b933      	cbnz	r3, 800aca8 <_free_r+0x30>
 800ac9a:	6063      	str	r3, [r4, #4]
 800ac9c:	6014      	str	r4, [r2, #0]
 800ac9e:	b003      	add	sp, #12
 800aca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca4:	f000 b90e 	b.w	800aec4 <__malloc_unlock>
 800aca8:	42a3      	cmp	r3, r4
 800acaa:	d908      	bls.n	800acbe <_free_r+0x46>
 800acac:	6825      	ldr	r5, [r4, #0]
 800acae:	1961      	adds	r1, r4, r5
 800acb0:	428b      	cmp	r3, r1
 800acb2:	bf01      	itttt	eq
 800acb4:	6819      	ldreq	r1, [r3, #0]
 800acb6:	685b      	ldreq	r3, [r3, #4]
 800acb8:	1949      	addeq	r1, r1, r5
 800acba:	6021      	streq	r1, [r4, #0]
 800acbc:	e7ed      	b.n	800ac9a <_free_r+0x22>
 800acbe:	461a      	mov	r2, r3
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	b10b      	cbz	r3, 800acc8 <_free_r+0x50>
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	d9fa      	bls.n	800acbe <_free_r+0x46>
 800acc8:	6811      	ldr	r1, [r2, #0]
 800acca:	1855      	adds	r5, r2, r1
 800accc:	42a5      	cmp	r5, r4
 800acce:	d10b      	bne.n	800ace8 <_free_r+0x70>
 800acd0:	6824      	ldr	r4, [r4, #0]
 800acd2:	4421      	add	r1, r4
 800acd4:	1854      	adds	r4, r2, r1
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	6011      	str	r1, [r2, #0]
 800acda:	d1e0      	bne.n	800ac9e <_free_r+0x26>
 800acdc:	681c      	ldr	r4, [r3, #0]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	6053      	str	r3, [r2, #4]
 800ace2:	4421      	add	r1, r4
 800ace4:	6011      	str	r1, [r2, #0]
 800ace6:	e7da      	b.n	800ac9e <_free_r+0x26>
 800ace8:	d902      	bls.n	800acf0 <_free_r+0x78>
 800acea:	230c      	movs	r3, #12
 800acec:	6003      	str	r3, [r0, #0]
 800acee:	e7d6      	b.n	800ac9e <_free_r+0x26>
 800acf0:	6825      	ldr	r5, [r4, #0]
 800acf2:	1961      	adds	r1, r4, r5
 800acf4:	428b      	cmp	r3, r1
 800acf6:	bf04      	itt	eq
 800acf8:	6819      	ldreq	r1, [r3, #0]
 800acfa:	685b      	ldreq	r3, [r3, #4]
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	bf04      	itt	eq
 800ad00:	1949      	addeq	r1, r1, r5
 800ad02:	6021      	streq	r1, [r4, #0]
 800ad04:	6054      	str	r4, [r2, #4]
 800ad06:	e7ca      	b.n	800ac9e <_free_r+0x26>
 800ad08:	b003      	add	sp, #12
 800ad0a:	bd30      	pop	{r4, r5, pc}
 800ad0c:	240003cc 	.word	0x240003cc

0800ad10 <sbrk_aligned>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	4e0e      	ldr	r6, [pc, #56]	; (800ad4c <sbrk_aligned+0x3c>)
 800ad14:	460c      	mov	r4, r1
 800ad16:	6831      	ldr	r1, [r6, #0]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	b911      	cbnz	r1, 800ad22 <sbrk_aligned+0x12>
 800ad1c:	f000 f8bc 	bl	800ae98 <_sbrk_r>
 800ad20:	6030      	str	r0, [r6, #0]
 800ad22:	4621      	mov	r1, r4
 800ad24:	4628      	mov	r0, r5
 800ad26:	f000 f8b7 	bl	800ae98 <_sbrk_r>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d00a      	beq.n	800ad44 <sbrk_aligned+0x34>
 800ad2e:	1cc4      	adds	r4, r0, #3
 800ad30:	f024 0403 	bic.w	r4, r4, #3
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d007      	beq.n	800ad48 <sbrk_aligned+0x38>
 800ad38:	1a21      	subs	r1, r4, r0
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f8ac 	bl	800ae98 <_sbrk_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d101      	bne.n	800ad48 <sbrk_aligned+0x38>
 800ad44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad48:	4620      	mov	r0, r4
 800ad4a:	bd70      	pop	{r4, r5, r6, pc}
 800ad4c:	240003d0 	.word	0x240003d0

0800ad50 <_malloc_r>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	1ccd      	adds	r5, r1, #3
 800ad56:	f025 0503 	bic.w	r5, r5, #3
 800ad5a:	3508      	adds	r5, #8
 800ad5c:	2d0c      	cmp	r5, #12
 800ad5e:	bf38      	it	cc
 800ad60:	250c      	movcc	r5, #12
 800ad62:	2d00      	cmp	r5, #0
 800ad64:	4607      	mov	r7, r0
 800ad66:	db01      	blt.n	800ad6c <_malloc_r+0x1c>
 800ad68:	42a9      	cmp	r1, r5
 800ad6a:	d905      	bls.n	800ad78 <_malloc_r+0x28>
 800ad6c:	230c      	movs	r3, #12
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	2600      	movs	r6, #0
 800ad72:	4630      	mov	r0, r6
 800ad74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad78:	4e2e      	ldr	r6, [pc, #184]	; (800ae34 <_malloc_r+0xe4>)
 800ad7a:	f000 f89d 	bl	800aeb8 <__malloc_lock>
 800ad7e:	6833      	ldr	r3, [r6, #0]
 800ad80:	461c      	mov	r4, r3
 800ad82:	bb34      	cbnz	r4, 800add2 <_malloc_r+0x82>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4638      	mov	r0, r7
 800ad88:	f7ff ffc2 	bl	800ad10 <sbrk_aligned>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	4604      	mov	r4, r0
 800ad90:	d14d      	bne.n	800ae2e <_malloc_r+0xde>
 800ad92:	6834      	ldr	r4, [r6, #0]
 800ad94:	4626      	mov	r6, r4
 800ad96:	2e00      	cmp	r6, #0
 800ad98:	d140      	bne.n	800ae1c <_malloc_r+0xcc>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4638      	mov	r0, r7
 800ada0:	eb04 0803 	add.w	r8, r4, r3
 800ada4:	f000 f878 	bl	800ae98 <_sbrk_r>
 800ada8:	4580      	cmp	r8, r0
 800adaa:	d13a      	bne.n	800ae22 <_malloc_r+0xd2>
 800adac:	6821      	ldr	r1, [r4, #0]
 800adae:	3503      	adds	r5, #3
 800adb0:	1a6d      	subs	r5, r5, r1
 800adb2:	f025 0503 	bic.w	r5, r5, #3
 800adb6:	3508      	adds	r5, #8
 800adb8:	2d0c      	cmp	r5, #12
 800adba:	bf38      	it	cc
 800adbc:	250c      	movcc	r5, #12
 800adbe:	4629      	mov	r1, r5
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7ff ffa5 	bl	800ad10 <sbrk_aligned>
 800adc6:	3001      	adds	r0, #1
 800adc8:	d02b      	beq.n	800ae22 <_malloc_r+0xd2>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	442b      	add	r3, r5
 800adce:	6023      	str	r3, [r4, #0]
 800add0:	e00e      	b.n	800adf0 <_malloc_r+0xa0>
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	1b52      	subs	r2, r2, r5
 800add6:	d41e      	bmi.n	800ae16 <_malloc_r+0xc6>
 800add8:	2a0b      	cmp	r2, #11
 800adda:	d916      	bls.n	800ae0a <_malloc_r+0xba>
 800addc:	1961      	adds	r1, r4, r5
 800adde:	42a3      	cmp	r3, r4
 800ade0:	6025      	str	r5, [r4, #0]
 800ade2:	bf18      	it	ne
 800ade4:	6059      	strne	r1, [r3, #4]
 800ade6:	6863      	ldr	r3, [r4, #4]
 800ade8:	bf08      	it	eq
 800adea:	6031      	streq	r1, [r6, #0]
 800adec:	5162      	str	r2, [r4, r5]
 800adee:	604b      	str	r3, [r1, #4]
 800adf0:	4638      	mov	r0, r7
 800adf2:	f104 060b 	add.w	r6, r4, #11
 800adf6:	f000 f865 	bl	800aec4 <__malloc_unlock>
 800adfa:	f026 0607 	bic.w	r6, r6, #7
 800adfe:	1d23      	adds	r3, r4, #4
 800ae00:	1af2      	subs	r2, r6, r3
 800ae02:	d0b6      	beq.n	800ad72 <_malloc_r+0x22>
 800ae04:	1b9b      	subs	r3, r3, r6
 800ae06:	50a3      	str	r3, [r4, r2]
 800ae08:	e7b3      	b.n	800ad72 <_malloc_r+0x22>
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	bf0c      	ite	eq
 800ae10:	6032      	streq	r2, [r6, #0]
 800ae12:	605a      	strne	r2, [r3, #4]
 800ae14:	e7ec      	b.n	800adf0 <_malloc_r+0xa0>
 800ae16:	4623      	mov	r3, r4
 800ae18:	6864      	ldr	r4, [r4, #4]
 800ae1a:	e7b2      	b.n	800ad82 <_malloc_r+0x32>
 800ae1c:	4634      	mov	r4, r6
 800ae1e:	6876      	ldr	r6, [r6, #4]
 800ae20:	e7b9      	b.n	800ad96 <_malloc_r+0x46>
 800ae22:	230c      	movs	r3, #12
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	4638      	mov	r0, r7
 800ae28:	f000 f84c 	bl	800aec4 <__malloc_unlock>
 800ae2c:	e7a1      	b.n	800ad72 <_malloc_r+0x22>
 800ae2e:	6025      	str	r5, [r4, #0]
 800ae30:	e7de      	b.n	800adf0 <_malloc_r+0xa0>
 800ae32:	bf00      	nop
 800ae34:	240003cc 	.word	0x240003cc

0800ae38 <_realloc_r>:
 800ae38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	4614      	mov	r4, r2
 800ae40:	460e      	mov	r6, r1
 800ae42:	b921      	cbnz	r1, 800ae4e <_realloc_r+0x16>
 800ae44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	4611      	mov	r1, r2
 800ae4a:	f7ff bf81 	b.w	800ad50 <_malloc_r>
 800ae4e:	b92a      	cbnz	r2, 800ae5c <_realloc_r+0x24>
 800ae50:	f7ff ff12 	bl	800ac78 <_free_r>
 800ae54:	4625      	mov	r5, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5c:	f000 f838 	bl	800aed0 <_malloc_usable_size_r>
 800ae60:	4284      	cmp	r4, r0
 800ae62:	4607      	mov	r7, r0
 800ae64:	d802      	bhi.n	800ae6c <_realloc_r+0x34>
 800ae66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae6a:	d812      	bhi.n	800ae92 <_realloc_r+0x5a>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4640      	mov	r0, r8
 800ae70:	f7ff ff6e 	bl	800ad50 <_malloc_r>
 800ae74:	4605      	mov	r5, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0ed      	beq.n	800ae56 <_realloc_r+0x1e>
 800ae7a:	42bc      	cmp	r4, r7
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4631      	mov	r1, r6
 800ae80:	bf28      	it	cs
 800ae82:	463a      	movcs	r2, r7
 800ae84:	f7ff fed0 	bl	800ac28 <memcpy>
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f7ff fef4 	bl	800ac78 <_free_r>
 800ae90:	e7e1      	b.n	800ae56 <_realloc_r+0x1e>
 800ae92:	4635      	mov	r5, r6
 800ae94:	e7df      	b.n	800ae56 <_realloc_r+0x1e>
	...

0800ae98 <_sbrk_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d06      	ldr	r5, [pc, #24]	; (800aeb4 <_sbrk_r+0x1c>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f6 fcca 	bl	800183c <_sbrk>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_sbrk_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_sbrk_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	240003d4 	.word	0x240003d4

0800aeb8 <__malloc_lock>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__malloc_lock+0x8>)
 800aeba:	f000 b811 	b.w	800aee0 <__retarget_lock_acquire_recursive>
 800aebe:	bf00      	nop
 800aec0:	240003d8 	.word	0x240003d8

0800aec4 <__malloc_unlock>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__malloc_unlock+0x8>)
 800aec6:	f000 b80c 	b.w	800aee2 <__retarget_lock_release_recursive>
 800aeca:	bf00      	nop
 800aecc:	240003d8 	.word	0x240003d8

0800aed0 <_malloc_usable_size_r>:
 800aed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed4:	1f18      	subs	r0, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	bfbc      	itt	lt
 800aeda:	580b      	ldrlt	r3, [r1, r0]
 800aedc:	18c0      	addlt	r0, r0, r3
 800aede:	4770      	bx	lr

0800aee0 <__retarget_lock_acquire_recursive>:
 800aee0:	4770      	bx	lr

0800aee2 <__retarget_lock_release_recursive>:
 800aee2:	4770      	bx	lr

0800aee4 <_init>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	bf00      	nop
 800aee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeea:	bc08      	pop	{r3}
 800aeec:	469e      	mov	lr, r3
 800aeee:	4770      	bx	lr

0800aef0 <_fini>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	bf00      	nop
 800aef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef6:	bc08      	pop	{r3}
 800aef8:	469e      	mov	lr, r3
 800aefa:	4770      	bx	lr
